"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var bignumber_1 = require("@ethersproject/bignumber");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
exports.author = 'saffron.finance';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
var BIG18 = bignumber_1.BigNumber.from('1000000000000000000');
var VOTE_BOOST_DIV_1000 = bignumber_1.BigNumber.from(1000);
var DECIMALS = 18;
var QUERIES_PER_DEX_LP_PAIR = 2;
var abi = [
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: 'account',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'getReserves',
        outputs: [
            {
                internalType: 'uint112',
                name: '_reserve0',
                type: 'uint112'
            },
            {
                internalType: 'uint112',
                name: '_reserve1',
                type: 'uint112'
            },
            {
                internalType: 'uint32',
                name: '_blockTimestampLast',
                type: 'uint32'
            }
        ],
        stateMutability: 'view',
        type: 'function',
        constant: true
    },
    {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    }
];
// DirectBoostScheme provides logic to apply a multiplier, or boost, to a raw balance value. This gives
// Saffron Finance the ability to adjust the voting power a token holder has depending external configuration.
//
// name       ... unique string that identifies the instance of the VotingScheme
// multiplier ... the raw balance value is multiplied by the multiplier such that: score = (multiplier)(balance).
//                If this value is 1.0, it is equivalent to score = balance.
//                If this value is less than 1.0 and greater than 0.0, then the token holder's voting power is reduced.
//                If this value is 0.0, then the token holder has no voting power.
var DirectBoostScheme = /** @class */ (function () {
    function DirectBoostScheme(name, multiplier) {
        this.name = name;
        this.multiplier = multiplier;
    }
    DirectBoostScheme.prototype.doAlgorithm = function (balance) {
        var voteBoost1000 = bignumber_1.BigNumber.from(this.multiplier * 1000);
        return balance.mul(voteBoost1000).div(VOTE_BOOST_DIV_1000);
    };
    return DirectBoostScheme;
}());
// LPReservePairScheme provides logic to apply a voting score to only the SFI side of a Uniswap or Sushiswap LP token
// pair.
//
// name            ... unique string that identifies the instance of the VotingScheme
// multiplier ... the raw balance value is multiplied by the multiplier such that: score = (multiplier)(balance).
//                If this value is 1.0, it is equivalent to score = balance.
//                If this value is less than 1.0 and greater than 0.0, then the token holder's voting power is reduced.
//                If this value is 0.0, then the token holder has no voting power.
// saffLpToSfi_E18 ... Conversion of the Saffron LP Pair Token holding to SFI value with expected value to be in wei.
var LPReservePairScheme = /** @class */ (function () {
    function LPReservePairScheme(name, multiplier, saffLpToSfi_E18) {
        this.name = name;
        this.multiplier = multiplier;
        this.saffLpToSfi_E18 = saffLpToSfi_E18;
    }
    LPReservePairScheme.prototype.doAlgorithm = function (balance) {
        var voteMult1000 = bignumber_1.BigNumber.from(this.multiplier * 1000);
        var calculatedScore = balance.mul(this.saffLpToSfi_E18).div(BIG18);
        return calculatedScore.mul(voteMult1000).div(VOTE_BOOST_DIV_1000);
    };
    return LPReservePairScheme;
}());
// VoteScorer acts as the context to invoke the relevant VotingScheme by way of its calculateScore method.
// It assumes all VotingScheme's are created by the createVotingScheme method prior to invocation of calculateScore.
//
// votingSchemes    ...  A Map that provides keyed access to a VotingScheme instance.
// dexReserveData   ...  An Array that holds necessary Uniswap and Sushiswap LP Pair Token data for LPReservePairScheme.
var VoteScorer = /** @class */ (function () {
    function VoteScorer(dexReserveData) {
        this.votingSchemes = new Map();
        this.dexReserveData = new Array();
        this.dexReserveData = dexReserveData;
        this.votingSchemes.set('default', new DirectBoostScheme('default', 1.0));
    }
    VoteScorer.prototype.createVotingScheme = function (name, type, multiplier) {
        var votingScheme = new DirectBoostScheme('no-vote-scheme', 0.0);
        if (type === 'DirectBoostScheme') {
            votingScheme = new DirectBoostScheme(name, multiplier);
        }
        else if (type === 'LPReservePairScheme') {
            var lpReservePairData = this.dexReserveData.find(function (e) { return e.name === name; });
            if (lpReservePairData === undefined) {
                throw Error("Failed to locate token LP Pair data for " + name + ".");
            }
            votingScheme = new LPReservePairScheme(name, multiplier, lpReservePairData.saffLpToSFI_E18);
        }
        else {
            throw new Error("Unsupported voting scheme type, " + type + ".");
        }
        this.votingSchemes.set(name, votingScheme);
    };
    VoteScorer.prototype.calculateScore = function (schemeName, balance) {
        var votingScheme = this.votingSchemes.get(schemeName);
        if (votingScheme === undefined) {
            throw new Error("Failed to locate voting scheme, " + schemeName + ". Check initialization of votingSchemes.");
        }
        return votingScheme.doAlgorithm(balance);
    };
    return VoteScorer;
}());
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, callQueries, callResponses, holdersQueryBatches, votingScores, callQueryIndex, dexReserveData, voteScorer, emptyVotingScoreCountToAdd, emptyVote, i, addressVotingScore;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    callQueries = new Array();
                    callResponses = new Array();
                    holdersQueryBatches = new Array();
                    votingScores = new Array();
                    callQueryIndex = 0;
                    dexReserveData = new Array();
                    options.dexLpTypes.forEach(function (dexToken) {
                        var d = {
                            name: dexToken.name,
                            reservesQuery: [dexToken.lpToken, 'getReserves'],
                            reserveQueryIdx: 0,
                            reserve: bignumber_1.BigNumber.from(0),
                            supplyQuery: [dexToken.lpToken, 'totalSupply'],
                            supplyQueryIdx: 0,
                            supply: bignumber_1.BigNumber.from(0),
                            saffLpToSFI_E18: bignumber_1.BigNumber.from(0)
                        };
                        callQueries.push(d.reservesQuery);
                        d.reserveQueryIdx = callQueryIndex++;
                        callQueries.push(d.supplyQuery);
                        d.supplyQueryIdx = callQueryIndex++;
                        dexReserveData.push(d);
                    });
                    // ============= Multicall queries ==============
                    options.contracts.forEach(function (contract) {
                        var queries = addresses.map(function (address) {
                            return [contract.tokenAddress, 'balanceOf', [address]];
                        });
                        var queriesLength = callQueries.push.apply(callQueries, queries);
                        var batch = {
                            tag: contract.label,
                            votingScheme: contract.votingScheme,
                            qIdxStart: callQueryIndex,
                            qIdxEnd: queriesLength
                        };
                        callQueryIndex = queriesLength;
                        holdersQueryBatches.push(batch);
                    });
                    return [4 /*yield*/, utils_1.multicall(network, provider, abi, callQueries, {
                            blockTag: blockTag
                        })];
                case 1:
                    // Run queries
                    callResponses = _a.sent();
                    // ========== Extract and process query responses ==========
                    dexReserveData.forEach(function (drd) {
                        drd.reserve = callResponses[drd.reserveQueryIdx][0];
                        drd.supply = callResponses[drd.supplyQueryIdx][0];
                        drd.saffLpToSFI_E18 = drd.reserve.mul(BIG18).div(drd.supply);
                    });
                    voteScorer = new VoteScorer(dexReserveData);
                    options.votingSchemes.forEach(function (scheme) {
                        voteScorer.createVotingScheme(scheme.name, scheme.type, scheme.multiplier);
                    });
                    emptyVotingScoreCountToAdd = dexReserveData.length * QUERIES_PER_DEX_LP_PAIR;
                    emptyVote = { address: '0x00', score: 0.0 };
                    for (i = 0; i < emptyVotingScoreCountToAdd; i++) {
                        votingScores.push(emptyVote);
                    }
                    options.contracts.forEach(function (contract) {
                        var batch = holdersQueryBatches.find(function (e) { return e.tag === contract.label; });
                        if (batch === undefined) {
                            throw new Error("Failed to locate tag, " + contract.label + ", in queryBatches.");
                        }
                        var idxStart = batch.qIdxStart;
                        var batchScores = addresses.map(function (address, index) {
                            return {
                                address: address,
                                score: voteScorer.calculateScore(contract.votingScheme, callResponses[idxStart + index][0])
                            };
                        });
                        votingScores.push.apply(votingScores, batchScores);
                    });
                    addressVotingScore = addresses.map(function (address, addressIndex) {
                        var total = bignumber_1.BigNumber.from(0);
                        holdersQueryBatches.forEach(function (batch) {
                            var votingScore = votingScores[batch.qIdxStart + addressIndex];
                            if (votingScore === undefined) {
                                throw new Error("Expected a votingScore at batch.qIdxStart: " + batch.qIdxStart + ", addressIndex: " + addressIndex);
                            }
                            if (votingScore.address === address) {
                                total = total.add(votingScore.score);
                            }
                            else {
                                throw new Error(batch.tag + " expected address, " + address + ", found " + votingScore.address);
                            }
                        });
                        // Return single record { address, score } where score should have exponent of 18
                        return { address: address, score: total };
                    });
                    return [2 /*return*/, Object.fromEntries(addressVotingScore.map(function (addressVote) {
                            return [
                                addressVote.address,
                                parseFloat(units_1.formatUnits(addressVote.score, DECIMALS))
                            ];
                        }))];
            }
        });
    });
}
exports.strategy = strategy;
