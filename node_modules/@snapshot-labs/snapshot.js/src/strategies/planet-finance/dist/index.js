"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.bep20Abi = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var utils_1 = require("../../utils");
var multicaller_1 = require("../../utils/multicaller");
var erc20_balance_of_1 = require("../erc20-balance-of");
var examples_json_1 = require("./examples.json");
exports.author = 'planet-finance';
exports.version = '0.0.1';
exports.examples = examples_json_1["default"];
var planetFinanceFarmAbi = [
    {
        inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        name: 'poolInfo',
        outputs: [
            { internalType: 'contract IERC20', name: 'want', type: 'address' },
            { internalType: 'uint256', name: 'allocPoint', type: 'uint256' },
            { internalType: 'uint256', name: 'lastRewardBlock', type: 'uint256' },
            { internalType: 'uint256', name: 'accAQUAPerShare', type: 'uint256' },
            { internalType: 'address', name: 'strat', type: 'address' }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'uint256', name: '_pid', type: 'uint256' },
            { internalType: 'address', name: '_user', type: 'address' }
        ],
        name: 'stakedWantTokens',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    }
];
exports.bep20Abi = [
    {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [{ internalType: 'address', name: '', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    }
];
var planetFinanceFarmContractAddress = '0x0ac58Fd25f334975b1B61732CF79564b6200A933';
var aquaAddress = '0x72B7D61E8fC8cF971960DD9cfA59B8C829D91991';
var aquaBnbLpTokenAddress = '0x03028D2F8B275695A1c6AFB69A4765e3666e36d9';
var aquaCakeLpTokenAddress = '0x8852263275Ab21FfBAEB88a17BCb27611EeA54Ef';
var aquaBusdLpTokenAddress = '0x0DcFde6c6761286AE0FF26abE65c30c8918889Ca';
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, erc20Multi, score, usersAquaVaultBalances, usersAquaBnbVaultBalances, usersAquaCakeVaultBalances, usersAquaBusdVaultBalances, result, erc20Result, totalSupply, contractAquaBalance, totalSupplyAquaCake, aquaCakeContractAquaBalance, totalSupplyAquaBusd, aquaBusdContractAquaBalance;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    erc20Multi = new multicaller_1["default"](network, provider, exports.bep20Abi, {
                        blockTag: blockTag
                    });
                    score = erc20_balance_of_1.strategy(space, network, provider, addresses, options, snapshot);
                    usersAquaVaultBalances = utils_1.multicall(network, provider, planetFinanceFarmAbi, addresses.map(function (address) { return [
                        planetFinanceFarmContractAddress,
                        'stakedWantTokens',
                        ['1', address]
                    ]; }), { blockTag: blockTag });
                    usersAquaBnbVaultBalances = utils_1.multicall(network, provider, planetFinanceFarmAbi, addresses.map(function (address) { return [
                        planetFinanceFarmContractAddress,
                        'stakedWantTokens',
                        ['13', address]
                    ]; }), { blockTag: blockTag });
                    usersAquaCakeVaultBalances = utils_1.multicall(network, provider, planetFinanceFarmAbi, addresses.map(function (address) { return [
                        planetFinanceFarmContractAddress,
                        'stakedWantTokens',
                        ['14', address]
                    ]; }), { blockTag: blockTag });
                    usersAquaBusdVaultBalances = utils_1.multicall(network, provider, planetFinanceFarmAbi, addresses.map(function (address) { return [
                        planetFinanceFarmContractAddress,
                        'stakedWantTokens',
                        ['36', address]
                    ]; }), { blockTag: blockTag });
                    return [4 /*yield*/, Promise.all([
                            score,
                            usersAquaVaultBalances,
                            usersAquaBnbVaultBalances,
                            usersAquaCakeVaultBalances,
                            usersAquaBusdVaultBalances
                        ])];
                case 1:
                    result = _a.sent();
                    score = result[0];
                    usersAquaVaultBalances = result[1];
                    usersAquaBnbVaultBalances = result[2];
                    usersAquaCakeVaultBalances = result[3];
                    usersAquaBusdVaultBalances = result[4];
                    //AQUA-BNB
                    erc20Multi.call('aquaBnbTotalSupply', aquaBnbLpTokenAddress, 'totalSupply');
                    erc20Multi.call('lpAquaBal', aquaAddress, 'balanceOf', [
                        aquaBnbLpTokenAddress
                    ]);
                    return [4 /*yield*/, erc20Multi.execute()];
                case 2:
                    erc20Result = _a.sent();
                    totalSupply = erc20Result.aquaBnbTotalSupply.toString();
                    contractAquaBalance = erc20Result.lpAquaBal.toString();
                    erc20Multi.call('lpTotalSupply', aquaCakeLpTokenAddress, 'totalSupply');
                    erc20Multi.call('poolMMBalance', aquaAddress, 'balanceOf', [
                        aquaCakeLpTokenAddress
                    ]);
                    return [4 /*yield*/, erc20Multi.execute()];
                case 3:
                    erc20Result = _a.sent();
                    totalSupplyAquaCake = erc20Result.lpTotalSupply.toString();
                    aquaCakeContractAquaBalance = erc20Result.poolMMBalance.toString();
                    erc20Multi.call('lpTotalSupply', aquaBusdLpTokenAddress, 'totalSupply');
                    //AQUA-BUSD
                    erc20Multi.call('poolMMBalance', aquaAddress, 'balanceOf', [
                        aquaBusdLpTokenAddress
                    ]);
                    return [4 /*yield*/, erc20Multi.execute()];
                case 4:
                    erc20Result = _a.sent();
                    totalSupplyAquaBusd = erc20Result.lpTotalSupply.toString();
                    aquaBusdContractAquaBalance = erc20Result.poolMMBalance.toString();
                    return [2 /*return*/, Object.fromEntries(Object.entries(score).map(function (address, index) { return [
                            address[0],
                            address[1] +
                                parseFloat(units_1.formatUnits(usersAquaVaultBalances[index].toString(), 18)) +
                                (parseFloat(units_1.formatUnits(usersAquaBnbVaultBalances[index].toString(), 18)) /
                                    parseFloat(units_1.formatUnits(totalSupply, 18))) *
                                    parseFloat(units_1.formatUnits(contractAquaBalance, 18)) +
                                (parseFloat(units_1.formatUnits(usersAquaCakeVaultBalances[index].toString(), 18)) /
                                    parseFloat(units_1.formatUnits(totalSupplyAquaCake, 18))) *
                                    parseFloat(units_1.formatUnits(aquaCakeContractAquaBalance, 18)) +
                                (parseFloat(units_1.formatUnits(usersAquaBusdVaultBalances[index].toString(), 18)) /
                                    parseFloat(units_1.formatUnits(totalSupplyAquaBusd, 18))) *
                                    parseFloat(units_1.formatUnits(aquaBusdContractAquaBalance, 18))
                        ]; }))];
            }
        });
    });
}
exports.strategy = strategy;
