"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var address_1 = require("@ethersproject/address");
var bignumber_1 = require("@ethersproject/bignumber");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
var MASTERCHEF_SUBGRAPH_URL = {
    '1': 'https://api.thegraph.com/subgraphs/name/sushiswap/master-chef'
};
var SUSHISWAP_SUBGRAPH_URL = {
    '1': 'https://api.thegraph.com/subgraphs/name/sushiswap/exchange'
};
exports.author = '0xKiwi';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
function strategy(_space, network, _provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var tokenAddress, sushiPools0Params, sushiPools1Params, sushiPools0Result, sushiPools1Result, allSushiPools, pools, masterchefParams, masterchefResult, one_gwei, stakedBalances, score, pair_1, token0perUni_1, token1perUni_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tokenAddress = options.address.toLowerCase();
                    sushiPools0Params = {
                        pairs: {
                            __args: {
                                where: {
                                    token0: tokenAddress
                                },
                                first: 100
                            },
                            id: true,
                            token0: {
                                id: true
                            },
                            reserve0: true,
                            token1: {
                                id: true
                            },
                            reserve1: true,
                            totalSupply: true
                        }
                    };
                    sushiPools1Params = {
                        pairs: {
                            __args: {
                                where: {
                                    token1: tokenAddress
                                },
                                first: 100
                            },
                            id: true,
                            token0: {
                                id: true
                            },
                            reserve0: true,
                            token1: {
                                id: true
                            },
                            reserve1: true,
                            totalSupply: true
                        }
                    };
                    if (snapshot !== 'latest') {
                        // @ts-ignore
                        sushiPools0Params.pairs.__args.block = { number: snapshot };
                        // @ts-ignore
                        sushiPools1Params.pairs.__args.block = { number: snapshot };
                    }
                    return [4 /*yield*/, utils_1.subgraphRequest(SUSHISWAP_SUBGRAPH_URL[network], sushiPools0Params)];
                case 1:
                    sushiPools0Result = _a.sent();
                    return [4 /*yield*/, utils_1.subgraphRequest(SUSHISWAP_SUBGRAPH_URL[network], sushiPools1Params)];
                case 2:
                    sushiPools1Result = _a.sent();
                    if (!sushiPools0Result || !sushiPools1Result) {
                        return [2 /*return*/];
                    }
                    allSushiPools = sushiPools0Result.pairs.concat(sushiPools1Result.pairs);
                    pools = allSushiPools.map(function (_a) {
                        var id = _a.id;
                        return id.toLowerCase();
                    });
                    masterchefParams = {
                        pools: {
                            __args: {
                                where: {
                                    pair_in: pools
                                },
                                first: 100
                            },
                            id: true,
                            pair: true,
                            users: {
                                __args: {
                                    where: {
                                        amount_gt: 0,
                                        address_in: addresses.map(function (address) { return address.toLowerCase(); })
                                    }
                                },
                                address: true,
                                amount: true
                            }
                        }
                    };
                    if (snapshot !== 'latest') {
                        // @ts-ignore
                        masterchefParams.pools.__args.block = { number: snapshot };
                    }
                    return [4 /*yield*/, utils_1.subgraphRequest(MASTERCHEF_SUBGRAPH_URL[network], masterchefParams)];
                case 3:
                    masterchefResult = _a.sent();
                    one_gwei = bignumber_1.BigNumber.from(10).pow(9);
                    stakedBalances = [];
                    if (masterchefResult && masterchefResult.pools.length == 1) {
                        stakedBalances = masterchefResult.pools[0].users.map(function (u) {
                            return {
                                address: u.address,
                                amount: u.amount
                            };
                        });
                    }
                    score = {};
                    if (allSushiPools && allSushiPools.length > 0) {
                        pair_1 = allSushiPools.filter(function (_a) {
                            var id = _a.id;
                            return id == masterchefResult.pools[0].pair;
                        })[0];
                        console.log(pair_1);
                        token0perUni_1 = pair_1.reserve0 / pair_1.totalSupply;
                        token1perUni_1 = pair_1.reserve1 / pair_1.totalSupply;
                        stakedBalances.forEach(function (u) {
                            var userScore = (u.amount / one_gwei.toNumber()) *
                                (pair_1.token0.id == tokenAddress ? token0perUni_1 : token1perUni_1);
                            var userScoreInEther = userScore / one_gwei.toNumber();
                            var userAddress = address_1.getAddress(u.address);
                            if (!score[userAddress])
                                score[userAddress] = 0;
                            score[userAddress] = score[userAddress] + userScoreInEther;
                        });
                    }
                    return [2 /*return*/, score || {}];
            }
        });
    });
}
exports.strategy = strategy;
