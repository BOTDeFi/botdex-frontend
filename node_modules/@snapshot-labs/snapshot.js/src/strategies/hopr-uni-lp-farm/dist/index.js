"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
exports.author = 'hoprnet';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
var tokenAndPoolAbi = [
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        name: 'liquidityProviders',
        outputs: [
            {
                internalType: 'uint256',
                name: 'claimedUntil',
                type: 'uint256'
            },
            {
                internalType: 'uint256',
                name: 'currentBalance',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    }
];
var XDAI_BLOCK_SUBGRAPH_URL = 'https://api.thegraph.com/subgraphs/name/1hive/xdai-blocks';
var HOPR_XDAI_SUBGRAPH_URL = 'https://api.thegraph.com/subgraphs/name/hoprnet/hopr-on-xdai';
var LIMIT = 1000; // 1000 addresses per query in Subgraph
function getXdaiBlockNumber(timestamp) {
    return __awaiter(this, void 0, Promise, function () {
        var query, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    query = {
                        blocks: {
                            __args: {
                                first: 1,
                                orderBy: 'number',
                                orderDirection: 'desc',
                                where: {
                                    timestamp_lte: timestamp
                                }
                            },
                            number: true,
                            timestamp: true
                        }
                    };
                    return [4 /*yield*/, utils_1.subgraphRequest(XDAI_BLOCK_SUBGRAPH_URL, query)];
                case 1:
                    data = _a.sent();
                    return [2 /*return*/, Number(data.blocks[0].number)];
            }
        });
    });
}
function xHoprSubgraphQuery(addresses, blockNumber) {
    return __awaiter(this, void 0, Promise, function () {
        var query, data, entries;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    query = {
                        accounts: {
                            __args: {
                                first: LIMIT,
                                block: {
                                    number: blockNumber
                                },
                                where: {
                                    id_in: addresses.map(function (adr) { return adr.toLowerCase(); })
                                }
                            },
                            id: true,
                            totalBalance: true
                        }
                    };
                    return [4 /*yield*/, utils_1.subgraphRequest(HOPR_XDAI_SUBGRAPH_URL, query)];
                case 1:
                    data = _a.sent();
                    entries = data.accounts.map(function (d) { return [d.id, Number(d.totalBalance)]; });
                    return [2 /*return*/, Object.fromEntries(entries)];
            }
        });
    });
}
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, _a, res, block, hoprBalanceOfPool, poolTotalSupply, response, snapshotXdaiBlock, addressSubsets, returnedFromSubgraph, hoprOnXdaiBalance, hoprOnXdaiScore;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    return [4 /*yield*/, Promise.all([
                            utils_1.multicall(network, provider, tokenAndPoolAbi, [
                                [options.hoprAddress, 'balanceOf', [options.uniPoolAddress]],
                                [options.uniPoolAddress, 'totalSupply', []]
                            ]
                                .concat(addresses.map(function (address) { return [
                                options.uniPoolAddress,
                                'balanceOf',
                                [address]
                            ]; }))
                                .concat(blockTag >= options.farmDeployBlock || blockTag === 'latest'
                                ? addresses.map(function (address) { return [
                                    options.farmAddress,
                                    'liquidityProviders',
                                    [address]
                                ]; })
                                : []), { blockTag: blockTag }),
                            provider.getBlock(blockTag)
                        ])];
                case 1:
                    _a = _b.sent(), res = _a[0], block = _a[1];
                    hoprBalanceOfPool = res[0];
                    poolTotalSupply = res[1];
                    response = blockTag >= options.farmDeployBlock || blockTag === 'latest'
                        ? res
                            .slice(2, 2 + addresses.length)
                            .map(function (r, i) {
                            return r[0].add(res[2 + i + addresses.length][1]);
                        })
                        : res.slice(2).map(function (r) { return r[0]; });
                    return [4 /*yield*/, getXdaiBlockNumber(block.timestamp)];
                case 2:
                    snapshotXdaiBlock = _b.sent();
                    addressSubsets = Array.apply(null, Array(Math.ceil(addresses.length / LIMIT))).map(function (_e, i) { return addresses.slice(i * LIMIT, (i + 1) * LIMIT); });
                    return [4 /*yield*/, Promise.all(addressSubsets.map(function (subset) {
                            return xHoprSubgraphQuery(subset, snapshotXdaiBlock);
                        }))];
                case 3:
                    returnedFromSubgraph = _b.sent();
                    hoprOnXdaiBalance = Object.assign.apply(Object, __spreadArrays([{}], returnedFromSubgraph));
                    hoprOnXdaiScore = addresses.map(function (address) { var _a; return (_a = hoprOnXdaiBalance[address.toLowerCase()]) !== null && _a !== void 0 ? _a : 0; });
                    return [2 /*return*/, Object.fromEntries(response.map(function (value, i) { return [
                            addresses[i],
                            parseFloat(units_1.formatUnits(value.mul(hoprBalanceOfPool[0]).div(poolTotalSupply[0]), 18)) + hoprOnXdaiScore[i] // xHOPR + wxHOPR balance
                        ]; }))];
            }
        });
    });
}
exports.strategy = strategy;
