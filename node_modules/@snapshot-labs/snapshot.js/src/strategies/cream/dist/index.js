"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var bignumber_1 = require("@ethersproject/bignumber");
var units_1 = require("@ethersproject/units");
var erc20_balance_of_1 = require("../erc20-balance-of");
var web3_1 = require("../../utils/web3");
var multicaller_1 = require("../../utils/multicaller");
var examples_json_1 = require("./examples.json");
exports.author = 'jeremyHD';
exports.version = '0.2.1';
exports.examples = examples_json_1["default"];
var ONE_E18 = units_1.parseUnits('1', 18);
var abi = [
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'totalSupply',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            },
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        name: 'userInfo',
        outputs: [
            {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256'
            },
            {
                internalType: 'uint256',
                name: 'rewardDebt',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [],
        name: 'exchangeRateStored',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: 'account',
                type: 'address'
            }
        ],
        name: 'borrowBalanceStored',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    }
];
var CREAM_VOTING_POWER = '0xb146BF59f30a54750209EF529a766D952720D0f9';
var CREAM_VOTING_POWER_DEPLOY_BLOCK = 12315028;
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var snapshotBlock, _a, snapshotBlocks, i, blocksPerPeriod, blockTag, scores, averageScore;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(typeof snapshot === 'number')) return [3 /*break*/, 1];
                    _a = snapshot;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, web3_1.getBlockNumber(provider)];
                case 2:
                    _a = _b.sent();
                    _b.label = 3;
                case 3:
                    snapshotBlock = _a;
                    snapshotBlocks = [];
                    for (i = 0; i < options.periods; i++) {
                        blocksPerPeriod = 80640;
                        blockTag = snapshotBlock > blocksPerPeriod * i
                            ? snapshotBlock - blocksPerPeriod * i
                            : snapshotBlock;
                        snapshotBlocks.push(blockTag);
                    }
                    return [4 /*yield*/, Promise.all(__spreadArrays(snapshotBlocks.map(function (blockTag) {
                            return blockTag > CREAM_VOTING_POWER_DEPLOY_BLOCK
                                ? getScores(provider, addresses, options, blockTag)
                                : getLegacyScores(provider, addresses, options, blockTag);
                        })))];
                case 4:
                    scores = _b.sent();
                    averageScore = {};
                    addresses.forEach(function (address) {
                        var userScore = scores
                            .map(function (score) { return score[address]; })
                            .reduce(function (accumulator, score) { return (accumulator += score); }, 0);
                        averageScore[address] = userScore / options.periods;
                    });
                    return [2 /*return*/, Object.fromEntries(Array(addresses.length)
                            .fill('')
                            .map(function (_, i) {
                            var score = averageScore[addresses[i]];
                            // ignore score < minimum voting amount
                            if (score < options.minVote) {
                                return [addresses[i], 0];
                            }
                            return [addresses[i], score];
                        }))];
            }
        });
    });
}
exports.strategy = strategy;
function getScores(provider, addresses, options, blockTag) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, erc20_balance_of_1.strategy('cream', '1', provider, addresses, {
                    address: CREAM_VOTING_POWER,
                    decimals: 18
                }, blockTag)];
        });
    });
}
function getLegacyScores(provider, addresses, options, blockTag) {
    return __awaiter(this, void 0, void 0, function () {
        var score, multi1, multi2, multi3, multi4, results, result, creamPerSushiswapLP, creamPerUniswapLP, creamPerBalancerLP;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    score = {};
                    multi1 = new multicaller_1["default"]('1', provider, abi, { blockTag: blockTag });
                    multi1.call('sushiswap.cream', options.token, 'balanceOf', [
                        options.sushiswap
                    ]);
                    multi1.call('sushiswap.totalSupply', options.sushiswap, 'totalSupply');
                    addresses.forEach(function (address) {
                        multi1.call("sushiswap." + address + ".balanceOf", options.sushiswap, 'balanceOf', [address]);
                        multi1.call("sushiswap." + address + ".userInfo", options.masterChef, 'userInfo', [options.pid, address]);
                    });
                    multi2 = new multicaller_1["default"]('1', provider, abi, { blockTag: blockTag });
                    multi2.call('uniswap.cream', options.token, 'balanceOf', [options.uniswap]);
                    multi2.call('uniswap.totalSupply', options.uniswap, 'totalSupply');
                    multi2.call('balancer.cream', options.token, 'balanceOf', [options.balancer]);
                    multi2.call('balancer.totalSupply', options.balancer, 'totalSupply');
                    addresses.forEach(function (address) {
                        multi2.call("uniswap." + address + ".balanceOf", options.uniswap, 'balanceOf', [
                            address
                        ]);
                        multi2.call("balancer." + address + ".balanceOf", options.balancer, 'balanceOf', [address]);
                    });
                    multi3 = new multicaller_1["default"]('1', provider, abi, { blockTag: blockTag });
                    multi3.call('crCREAM.exchangeRate', options.crCREAM, 'exchangeRateStored');
                    addresses.forEach(function (address) {
                        multi3.call("crCREAM." + address + ".balanceOf", options.crCREAM, 'balanceOf', [
                            address
                        ]);
                        multi3.call("crCREAM." + address + ".borrow", options.crCREAM, 'borrowBalanceStored', [address]);
                    });
                    multi4 = new multicaller_1["default"]('1', provider, abi, { blockTag: blockTag });
                    addresses.forEach(function (address) {
                        options.pools.forEach(function (pool) {
                            multi4.call("pool." + address + "." + pool.name, pool.address, 'balanceOf', [
                                address
                            ]);
                        });
                    });
                    return [4 /*yield*/, Promise.all([
                            multi1.execute(),
                            multi2.execute(),
                            multi3.execute(),
                            multi4.execute()
                        ])];
                case 1:
                    results = _a.sent();
                    result = results.reduce(function (sumResult, partialResult) {
                        Object.entries(partialResult).forEach(function (_a) {
                            var key = _a[0], value = _a[1];
                            sumResult[key] = value;
                        });
                        return sumResult;
                    }, {});
                    creamPerSushiswapLP = units_1.parseUnits(result.sushiswap.cream.toString(), 18).div(result.sushiswap.totalSupply);
                    creamPerUniswapLP = units_1.parseUnits(result.uniswap.cream.toString(), 18).div(result.uniswap.totalSupply);
                    creamPerBalancerLP = units_1.parseUnits(result.balancer.cream.toString(), 18).div(result.balancer.totalSupply);
                    addresses.forEach(function (address) {
                        var userScore = score[address] || bignumber_1.BigNumber.from(0);
                        var sushi = result.sushiswap[address].balanceOf
                            .add(result.sushiswap[address].userInfo.amount)
                            .mul(creamPerSushiswapLP)
                            .div(ONE_E18);
                        var uniswap = result.uniswap[address].balanceOf
                            .mul(creamPerUniswapLP)
                            .div(ONE_E18);
                        var balancer = result.balancer[address].balanceOf
                            .mul(creamPerBalancerLP)
                            .div(ONE_E18);
                        var crCREAM = result.crCREAM[address].balanceOf
                            .mul(result.crCREAM.exchangeRate)
                            .div(ONE_E18)
                            .sub(result.crCREAM[address].borrow);
                        var pools = Object.values(result.pool[address]).reduce(function (accumulator, poolBalance) {
                            return accumulator.add(poolBalance);
                        }, bignumber_1.BigNumber.from(0));
                        score[address] = userScore
                            .add(sushi)
                            .add(uniswap)
                            .add(balancer)
                            .add(crCREAM)
                            .add(pools);
                    });
                    Object.keys(score).map(function (address) {
                        score[address] = parseFloat(units_1.formatUnits(score[address], 18));
                    });
                    return [2 /*return*/, score];
            }
        });
    });
}
