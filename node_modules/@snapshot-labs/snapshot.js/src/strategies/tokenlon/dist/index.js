"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
exports.author = 'BenjaminLu';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
var abi = [
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'totalSupply',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
        name: 'earned',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    }
];
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, response, lonPerLPUniswap, lonPerLPSushiSwap, lpBalancesUniswap, lpBalancesUniswapStaking2, lonEarnedBalancesUniswapStaking2, lpBalancesUniswapStaking3, lonEarnedBalancesUniswapStaking3, lpBalancesSushiSwap, lpBalancesSushiSwapStaking2, lonEarnedBalancesSushiSwapStaking2, lpBalancesSushiSwapStaking3, lonEarnedBalancesSushiSwapStaking3, tokenBalances, lonBalanceOfxLON, xLONTotalSupply, xLONBalanceOfUsers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    return [4 /*yield*/, utils_1.multicall(network, provider, abi, __spreadArrays([
                            [options.token, 'balanceOf', [options.uniswap]],
                            [options.uniswap, 'totalSupply'],
                            [options.token, 'balanceOf', [options.sushiswap]],
                            [options.sushiswap, 'totalSupply']
                        ], addresses.map(function (address) { return [
                            options.uniswap,
                            'balanceOf',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardUniswap2,
                            'balanceOf',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardUniswap2,
                            'earned',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardUniswap3,
                            'balanceOf',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardUniswap3,
                            'earned',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.sushiswap,
                            'balanceOf',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardSushiSwap2,
                            'balanceOf',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardSushiSwap2,
                            'earned',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardSushiSwap3,
                            'balanceOf',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.stakingRewardSushiSwap3,
                            'earned',
                            [address]
                        ]; }), addresses.map(function (address) { return [
                            options.token,
                            'balanceOf',
                            [address]
                        ]; }), [
                            [options.token, 'balanceOf', [options.xLON]],
                            [options.xLON, 'totalSupply', []]
                        ], addresses.map(function (address) { return [options.xLON, 'balanceOf', [address]]; })), { blockTag: blockTag })];
                case 1:
                    response = _a.sent();
                    lonPerLPUniswap = units_1.parseUnits(response[0][0].toString(), 18).div(response[1][0]);
                    lonPerLPSushiSwap = units_1.parseUnits(response[2][0].toString(), 18).div(response[3][0]);
                    lpBalancesUniswap = response.slice(4, addresses.length + 4);
                    lpBalancesUniswapStaking2 = response.slice(addresses.length * 1 + 4, addresses.length * 2 + 4);
                    lonEarnedBalancesUniswapStaking2 = response.slice(addresses.length * 2 + 4, addresses.length * 3 + 4);
                    lpBalancesUniswapStaking3 = response.slice(addresses.length * 3 + 4, addresses.length * 4 + 4);
                    lonEarnedBalancesUniswapStaking3 = response.slice(addresses.length * 4 + 4, addresses.length * 5 + 4);
                    lpBalancesSushiSwap = response.slice(addresses.length * 5 + 4, addresses.length * 6 + 4);
                    lpBalancesSushiSwapStaking2 = response.slice(addresses.length * 6 + 4, addresses.length * 7 + 4);
                    lonEarnedBalancesSushiSwapStaking2 = response.slice(addresses.length * 7 + 4, addresses.length * 8 + 4);
                    lpBalancesSushiSwapStaking3 = response.slice(addresses.length * 8 + 4, addresses.length * 9 + 4);
                    lonEarnedBalancesSushiSwapStaking3 = response.slice(addresses.length * 9 + 4, addresses.length * 10 + 4);
                    tokenBalances = response.slice(addresses.length * 10 + 4, addresses.length * 11 + 4);
                    lonBalanceOfxLON = response.slice(addresses.length * 11 + 4, addresses.length * 11 + 5)[0][0];
                    xLONTotalSupply = response.slice(addresses.length * 11 + 5, addresses.length * 11 + 6)[0][0];
                    xLONBalanceOfUsers = response.slice(addresses.length * 11 + 6, addresses.length * 12 + 6);
                    return [2 /*return*/, Object.fromEntries(Array(addresses.length)
                            .fill('')
                            .map(function (_, i) {
                            var xLONBalanceOfUser = xLONBalanceOfUsers[i][0];
                            var userLONShares = xLONBalanceOfUser
                                .mul(lonBalanceOfxLON)
                                .div(xLONTotalSupply);
                            var lpBalanceUniswap = lpBalancesUniswap[i][0];
                            var lpBalanceUniswapStaking2 = lpBalancesUniswapStaking2[i][0];
                            var lpBalanceUniswapStaking3 = lpBalancesUniswapStaking3[i][0];
                            var lonLpBalanceUniswap = lpBalanceUniswap
                                .add(lpBalanceUniswapStaking2)
                                .add(lpBalanceUniswapStaking3)
                                .mul(lonPerLPUniswap)
                                .div(units_1.parseUnits('1', 18));
                            var lonEarnedBalanceUniswapStaking2 = lonEarnedBalancesUniswapStaking2[i][0];
                            var lonEarnedBalanceUniswapStaking3 = lonEarnedBalancesUniswapStaking3[i][0];
                            var lpBalanceSushiSwap = lpBalancesSushiSwap[i][0];
                            var lpBalanceSushiSwapStaking2 = lpBalancesSushiSwapStaking2[i][0];
                            var lpBalanceSushiSwapStaking3 = lpBalancesSushiSwapStaking3[i][0];
                            var lonLpBalanceSushiSwap = lpBalanceSushiSwap
                                .add(lpBalanceSushiSwapStaking2)
                                .add(lpBalanceSushiSwapStaking3)
                                .mul(lonPerLPSushiSwap)
                                .div(units_1.parseUnits('1', 18));
                            var lonEarnedBalanceSushiSwapStaking2 = lonEarnedBalancesSushiSwapStaking2[i][0];
                            var lonEarnedBalanceSushiSwapStaking3 = lonEarnedBalancesSushiSwapStaking3[i][0];
                            return [
                                addresses[i],
                                parseFloat(units_1.formatUnits(tokenBalances[i][0]
                                    .add(userLONShares)
                                    .add(lonLpBalanceUniswap)
                                    .add(lonEarnedBalanceUniswapStaking2)
                                    .add(lonEarnedBalanceUniswapStaking3)
                                    .add(lonLpBalanceSushiSwap)
                                    .add(lonEarnedBalanceSushiSwapStaking2)
                                    .add(lonEarnedBalanceSushiSwapStaking3), options.decimals))
                            ];
                        }))];
            }
        });
    });
}
exports.strategy = strategy;
