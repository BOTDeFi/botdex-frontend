"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.bdToBn = exports.about = exports.examples = exports.version = exports.author = void 0;
var address_1 = require("@ethersproject/address");
var utils_1 = require("../../utils");
var units_1 = require("@ethersproject/units");
var bignumber_1 = require("@ethersproject/bignumber");
var oceanUtils_1 = require("./oceanUtils");
var examples_json_1 = require("./examples.json");
var README_md_1 = require("./README.md");
exports.author = 'w1kke';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
exports.about = README_md_1["default"];
var OCEAN_ERC20_DECIMALS = 18;
var OCEAN_SUBGRAPH_URL = {
    '1': 'https://subgraph.mainnet.oceanprotocol.com/subgraphs/name/oceanprotocol/ocean-subgraph',
    '42': 'https://subgraph.rinkeby.oceanprotocol.com/subgraphs/name/oceanprotocol/ocean-subgraph'
};
// Returns a BigDecimal as a BigNumber with 10^decimals extra zeros
function bdToBn(bd, decimals) {
    var bn;
    var splitDecimal = bd.split('.');
    if (splitDecimal.length > 1) {
        bn = splitDecimal[0] + "." + splitDecimal[1].slice(0, decimals - splitDecimal[0].length - 1);
    }
    else {
        bn = "" + splitDecimal[0];
    }
    var bn2 = units_1.parseUnits(bn, decimals);
    return bn2;
}
exports.bdToBn = bdToBn;
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var params, graphResults, score, userAddresses, return_score, results, expectedResults_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = {
                        pools: {
                            __args: {
                                first: 1000,
                                orderBy: 'oceanReserve',
                                orderDirection: 'desc'
                            },
                            active: true,
                            totalShares: true,
                            holderCount: true,
                            oceanReserve: true,
                            shares: {
                                __args: {
                                    where: {
                                        userAddress_in: addresses.map(function (address) { return address.toLowerCase(); })
                                    },
                                    orderBy: 'balance',
                                    orderDirection: 'desc'
                                },
                                userAddress: {
                                    id: true
                                },
                                balance: true
                            }
                        }
                    };
                    if (snapshot !== 'latest') {
                        // @ts-ignore
                        params.pools.__args.block = { number: +snapshot };
                    }
                    return [4 /*yield*/, utils_1.subgraphRequest(OCEAN_SUBGRAPH_URL[network], params)];
                case 1:
                    graphResults = _a.sent();
                    score = {};
                    userAddresses = [];
                    return_score = {};
                    if (graphResults && graphResults.pools) {
                        graphResults.pools.forEach(function (pool) {
                            if (pool.holderCount > 0 && pool.active) {
                                pool.shares.map(function (share) {
                                    var userAddress = address_1.getAddress(share.userAddress.id);
                                    if (!userAddresses.includes(userAddress))
                                        userAddresses.push(userAddress);
                                    if (!score[userAddress])
                                        score[userAddress] = bignumber_1.BigNumber.from(0);
                                    var userShare = share.balance * (pool.oceanReserve / pool.totalShares);
                                    if (userShare > 0.0001) {
                                        score[userAddress] = score[userAddress].add(bdToBn(userShare.toString(), OCEAN_ERC20_DECIMALS));
                                    }
                                });
                            }
                        });
                        // We then sum total votes, per user address
                        userAddresses.forEach(function (address) {
                            var parsedSum = parseFloat(units_1.formatUnits(score[address], OCEAN_ERC20_DECIMALS));
                            return_score[address] = parsedSum;
                        });
                    }
                    results = Object.fromEntries(Object.entries(return_score).filter(function (_a) {
                        var k = _a[0];
                        return addresses.indexOf(k) >= 0;
                    }));
                    // Test validation: Update examples.json w/ expectedResults to reflect LPs @ blockHeight
                    // Success criteria: Address scores and length, must match expectedResults. Order not validated.
                    // From GRT's graphUtils.ts => verifyResults => Scores need to match expectedResults.
                    // npm run test --strategy=ocean-marketplace | grep -E 'SUCCESS|ERROR'
                    if (options.expectedResults) {
                        expectedResults_1 = {};
                        Object.keys(options.expectedResults.scores).forEach(function (key) {
                            expectedResults_1[key] = results[key];
                        });
                        oceanUtils_1.verifyResults(JSON.stringify(expectedResults_1), JSON.stringify(options.expectedResults.scores), 'Scores');
                        oceanUtils_1.verifyResultsLength(Object.keys(expectedResults_1).length, Object.keys(options.expectedResults.scores).length, 'Scores');
                    }
                    return [2 /*return*/, results || {}];
            }
        });
    });
}
exports.strategy = strategy;
