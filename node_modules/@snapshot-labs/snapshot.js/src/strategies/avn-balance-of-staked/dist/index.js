"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var bignumber_1 = require("@ethersproject/bignumber");
var units_1 = require("@ethersproject/units");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
exports.author = 'andrew-frank';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
var AVT_ABI = [
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: 'account',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    }
];
var VR_ABI = [
    {
        inputs: [
            { internalType: 'uint8', name: 'node', type: 'uint8' },
            { internalType: 'address', name: 'staker', type: 'address' }
        ],
        name: 'getStakerBalance',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    }
];
var NUM_NODES = 10;
// [0, 1, ... , 9] for convinience
var NODES_INDICES = Array.from(Array(NUM_NODES).keys());
var STAKES_MULTIPLIER = 2;
var EthCall = /** @class */ (function () {
    function EthCall(contract, method, args) {
        this.contract = contract;
        this.method = method;
        this.args = args;
    }
    Object.defineProperty(EthCall.prototype, "ethCall", {
        get: function () {
            return [this.contract, this.method, this.args];
        },
        enumerable: false,
        configurable: true
    });
    return EthCall;
}());
/** creates flat array of eth calls for each user's stake in each VR contract in each node */
function serializeVrMultiCalls(vr1Address, vr2Address, userAddresses) {
    // [ [0, 1, ... , 19],  [0, 1, ... , 19] , ..., [0, 1, ... 19], ... ]
    var userCalls = userAddresses.map(function (user) {
        var method = 'getStakerBalance';
        // map to objects to prevent flatting eth call arrays
        var vr1Calls = NODES_INDICES.map(function (node) { return new EthCall(vr1Address, method, [node, user]); });
        var vr2Calls = NODES_INDICES.map(function (node) { return new EthCall(vr2Address, method, [node, user]); });
        // * [0-9] calls for each node in VR1
        // * [10-19] calls for each node in VR2
        return vr1Calls.concat(vr2Calls);
    });
    // flat it and map to a list of the call primitives
    var objCalls = userCalls.flat();
    return objCalls.map(function (obj) { return obj.ethCall; });
}
/** splits array into chunks */
function chunkArray(arr, length) {
    var chunks = [];
    var i = 0;
    var n = arr.length;
    while (i < n) {
        chunks.push(arr.slice(i, (i += length)));
    }
    return chunks;
}
/** sums big numbers in array */
function sumNumbers(arr) {
    return arr.reduce(function (previus, current) {
        return previus.add(current[0]);
    }, bignumber_1.BigNumber.from(0));
}
/**
 * Parses multicall response
 * @param response multicall response
 * @returns summed AVT staked for each user in every node in every VR contract
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function parseVrResponse(response, users) {
    return chunkArray(response, 2 * NUM_NODES).map(sumNumbers);
}
function strategy(_space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, avtResponses, avtValues, vrMultiResponse, stakes, vrVotes, scores;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    return [4 /*yield*/, utils_1.multicall(network, provider, AVT_ABI, addresses.map(function (address) { return [
                            options.tokenAddress,
                            'balanceOf',
                            [address]
                        ]; }), { blockTag: blockTag })];
                case 1:
                    avtResponses = _a.sent();
                    avtValues = avtResponses.map(function (value) { return value[0]; });
                    return [4 /*yield*/, utils_1.multicall(network, provider, VR_ABI, serializeVrMultiCalls(options.vrAddress, options.vr2Address, addresses), { blockTag: blockTag })];
                case 2:
                    vrMultiResponse = _a.sent();
                    stakes = parseVrResponse(vrMultiResponse, addresses);
                    vrVotes = stakes.map(function (v) { return v.mul(STAKES_MULTIPLIER); });
                    scores = avtValues.map(function (value, i) {
                        return value.add(vrVotes[i]);
                    });
                    return [2 /*return*/, Object.fromEntries(scores.map(function (value, i) { return [
                            addresses[i],
                            parseFloat(units_1.formatUnits(value.toString(), options.decimals))
                        ]; }))];
            }
        });
    });
}
exports.strategy = strategy;
