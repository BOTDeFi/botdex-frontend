"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.about = exports.examples = exports.version = exports.author = void 0;
var cross_fetch_1 = require("cross-fetch");
var units_1 = require("@ethersproject/units");
var utils_1 = require("../../utils");
var erc20_balance_of_1 = require("../erc20-balance-of");
var examples_json_1 = require("./examples.json");
var README_md_1 = require("./README.md");
exports.author = 'benlyaunzon';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
exports.about = README_md_1["default"];
var ZRX_STAKING_POOLS = {
    '1': 'https://api.0x.org/staking/pools',
    '42': 'https://staging.api.0x.org/staking/pools'
};
var abi = [
    'function getVotingPower(address account, bytes32[] operatedPoolIds) view returns (uint256 votingPower)'
];
var encodePoolId = function (poolId) {
    return "0x" + poolId.toString(16).padStart(64, '0');
};
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, erc20Balances, zrxStakingPoolsRes, stakingPools, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    // Early return 0 voting power if governanceContract not correctly set
                    if (!options.governerContract) {
                        return [2 /*return*/, Object.fromEntries(addresses.map(function (address) { return [address, '0']; }))];
                    }
                    return [4 /*yield*/, erc20_balance_of_1.strategy(space, network, provider, addresses, options, snapshot)];
                case 1:
                    erc20Balances = _a.sent();
                    return [4 /*yield*/, cross_fetch_1["default"](ZRX_STAKING_POOLS[network])];
                case 2:
                    zrxStakingPoolsRes = _a.sent();
                    return [4 /*yield*/, zrxStakingPoolsRes.json()];
                case 3:
                    stakingPools = (_a.sent()).stakingPools;
                    return [4 /*yield*/, utils_1.multicall(network, provider, abi, addresses.map(function (address) {
                            var addressOperatedPools = stakingPools.filter(function (p) { return p.operatorAddress.toLowerCase() === address.toLowerCase(); });
                            var pools = addressOperatedPools
                                ? addressOperatedPools.map(function (pool) {
                                    return encodePoolId(parseInt(pool.poolId, 10));
                                })
                                : [];
                            return [
                                options.governerContract,
                                'getVotingPower',
                                [address.toLowerCase(), pools]
                            ];
                        }), { blockTag: blockTag })];
                case 4:
                    response = _a.sent();
                    return [2 /*return*/, Object.fromEntries(response.map(function (value, i) { return [
                            addresses[i],
                            parseFloat(units_1.formatUnits(value.toString(), options.decimals)) +
                                erc20Balances[addresses[i]]
                        ]; }))];
            }
        });
    });
}
exports.strategy = strategy;
