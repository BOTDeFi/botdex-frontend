"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var utils_1 = require("../../utils");
var bignumber_1 = require("@ethersproject/bignumber");
var examples_json_1 = require("./examples.json");
exports.author = 'apescape';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
var chefAbi = [
    {
        inputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            },
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        name: 'userInfo',
        outputs: [
            {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256'
            },
            {
                internalType: 'uint256',
                name: 'rewardDebt',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    }
];
var lpPairAbi = [
    {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [],
        name: 'getReserves',
        outputs: [
            {
                internalType: 'uint112',
                name: '_reserve0',
                type: 'uint112'
            },
            {
                internalType: 'uint112',
                name: '_reserve1',
                type: 'uint112'
            },
            {
                internalType: 'uint32',
                name: '_blockTimestampLast',
                type: 'uint32'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    }
];
var chef1Address = '0xCA74b3db871c679e928E70917Ae804DC7BFd8781';
var chef2Address = '0x062D9b9a97B4eFC67D286e99618dA87C614B166F';
var lpPairAddress = '0x52307F4C5CeBB1f157c3947D335B999091bAa3F7';
var decimals = 18;
var precision = bignumber_1.BigNumber.from(10).pow(18);
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, userInfoPool1, userInfoPool2, lpSupply, lpReserves;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    return [4 /*yield*/, utils_1.multicall(network, provider, chefAbi, addresses.map(function (address) { return [chef1Address, 'userInfo', [1, address]]; }), { blockTag: blockTag })];
                case 1:
                    userInfoPool1 = _a.sent();
                    return [4 /*yield*/, utils_1.multicall(network, provider, chefAbi, addresses.map(function (address) { return [chef2Address, 'userInfo', [0, address]]; }), { blockTag: blockTag })];
                case 2:
                    userInfoPool2 = _a.sent();
                    return [4 /*yield*/, utils_1.call(provider, lpPairAbi, [
                            lpPairAddress,
                            'totalSupply',
                            []
                        ])];
                case 3:
                    lpSupply = _a.sent();
                    return [4 /*yield*/, utils_1.call(provider, lpPairAbi, [
                            lpPairAddress,
                            'getReserves',
                            []
                        ])];
                case 4:
                    lpReserves = _a.sent();
                    return [2 /*return*/, Object.fromEntries(userInfoPool1.map(function (info1, i) {
                            var balance1 = info1.amount;
                            var balance2 = userInfoPool2[i].amount;
                            var tokensPerLp = lpReserves._reserve1.mul(precision).div(lpSupply);
                            var balance2Normalized = balance2.mul(tokensPerLp).div(precision);
                            var sum = balance1.add(balance2Normalized);
                            return [addresses[i], parseFloat(units_1.formatUnits(sum.toString(), decimals))];
                        }))];
            }
        });
    });
}
exports.strategy = strategy;
