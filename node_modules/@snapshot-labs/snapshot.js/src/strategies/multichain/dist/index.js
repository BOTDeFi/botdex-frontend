"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var utils_1 = require("../../utils");
var provider_1 = require("../../utils/provider");
var __1 = require("..");
var examples_json_1 = require("./examples.json");
exports.author = 'kesar';
exports.version = '1.0.0';
exports.examples = examples_json_1["default"];
var defaultGraphs = {
    '56': 'https://api.thegraph.com/subgraphs/name/apyvision/block-info',
    '137': 'https://api.thegraph.com/subgraphs/name/sameepsi/maticblocks'
};
function getChainBlockNumber(timestamp, graphURL) {
    return __awaiter(this, void 0, Promise, function () {
        var query, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    query = {
                        blocks: {
                            __args: {
                                first: 1,
                                orderBy: 'number',
                                orderDirection: 'desc',
                                where: {
                                    timestamp_lte: timestamp
                                }
                            },
                            number: true,
                            timestamp: true
                        }
                    };
                    return [4 /*yield*/, utils_1.subgraphRequest(graphURL, query)];
                case 1:
                    data = _a.sent();
                    return [2 /*return*/, Number(data.blocks[0].number)];
            }
        });
    });
}
function getChainBlocks(snapshot, provider, options, network) {
    var _a;
    return __awaiter(this, void 0, Promise, function () {
        var blockTag, block, chainBlocks, _i, _b, strategy_1, graph, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    return [4 /*yield*/, provider.getBlock(blockTag)];
                case 1:
                    block = _e.sent();
                    chainBlocks = {};
                    _i = 0, _b = options.strategies;
                    _e.label = 2;
                case 2:
                    if (!(_i < _b.length)) return [3 /*break*/, 6];
                    strategy_1 = _b[_i];
                    if (chainBlocks[strategy_1.network]) {
                        return [3 /*break*/, 5];
                    }
                    if (!(blockTag === 'latest' || strategy_1.network === network)) return [3 /*break*/, 3];
                    chainBlocks[strategy_1.network] = blockTag;
                    return [3 /*break*/, 5];
                case 3:
                    graph = ((_a = options.graphs) === null || _a === void 0 ? void 0 : _a[strategy_1.network]) || defaultGraphs[strategy_1.network];
                    _c = chainBlocks;
                    _d = strategy_1.network;
                    return [4 /*yield*/, getChainBlockNumber(block.timestamp, graph)];
                case 4:
                    _c[_d] = _e.sent();
                    _e.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 2];
                case 6: return [2 /*return*/, chainBlocks];
            }
        });
    });
}
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var promises, chainBlocks, _i, _a, strategy_2, results;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    promises = [];
                    return [4 /*yield*/, getChainBlocks(snapshot, provider, options, network)];
                case 1:
                    chainBlocks = _b.sent();
                    for (_i = 0, _a = options.strategies; _i < _a.length; _i++) {
                        strategy_2 = _a[_i];
                        promises.push(__1["default"][strategy_2.name].strategy(space, strategy_2.network, provider_1["default"](strategy_2.network), addresses, strategy_2.params, chainBlocks[strategy_2.network]));
                    }
                    return [4 /*yield*/, Promise.all(promises)];
                case 2:
                    results = _b.sent();
                    return [2 /*return*/, results.reduce(function (finalResults, strategyResult) {
                            for (var _i = 0, _a = Object.entries(strategyResult); _i < _a.length; _i++) {
                                var _b = _a[_i], address = _b[0], value = _b[1];
                                if (!finalResults[address]) {
                                    finalResults[address] = 0;
                                }
                                finalResults[address] += value;
                            }
                            return finalResults;
                        }, {})];
            }
        });
    });
}
exports.strategy = strategy;
