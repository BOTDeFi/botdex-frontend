"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.about = exports.examples = exports.version = exports.author = void 0;
var cross_fetch_1 = require("cross-fetch");
var erc20_balance_of_1 = require("../erc20-balance-of");
var examples_json_1 = require("./examples.json");
var README_md_1 = require("./README.md");
exports.author = 'snapshot-labs';
exports.version = '0.0.1';
exports.examples = examples_json_1["default"];
exports.about = README_md_1["default"];
var networksWithPlatforms = {
    1: 'ethereum',
    56: 'binance-smart-chain',
    66: 'okex-chain',
    88: 'tomochain',
    100: 'xdai',
    128: 'huobi-token',
    137: 'polygon-pos',
    250: 'fantom',
    42220: 'celo',
    43114: 'avalanche',
    1666600000: 'harmony-shard-0'
};
function strategy(space, network, provider, addresses, options, snapshot) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, block, platform, address, _c, currency, coingeckoApiURL, coingeckoData, latestPriceFromBlock, score;
        var _this = this;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    return [4 /*yield*/, provider.getBlock(blockTag)];
                case 1:
                    block = _d.sent();
                    platform = options.platform
                        ? options.platform
                        : networksWithPlatforms[network];
                    address = options.address, _c = options.currency, currency = _c === void 0 ? 'usd' : _c;
                    coingeckoApiURL = "https://api.coingecko.com/api/v3/coins/" + platform + "/contract/" + address + "/market_chart/range?vs_currency=" + currency + "&from=" + (block.timestamp - 100000) + "&to=" + block.timestamp;
                    return [4 /*yield*/, cross_fetch_1["default"](coingeckoApiURL)
                            .then(function (r) { return __awaiter(_this, void 0, void 0, function () {
                            var json;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, r.json()];
                                    case 1:
                                        json = _a.sent();
                                        return [2 /*return*/, json];
                                }
                            });
                        }); })["catch"](function (e) {
                            console.error(e);
                            throw new Error('Strategy er20-price: coingecko api failed');
                        })];
                case 2:
                    coingeckoData = _d.sent();
                    latestPriceFromBlock = ((_b = (_a = coingeckoData.prices) === null || _a === void 0 ? void 0 : _a.pop()) === null || _b === void 0 ? void 0 : _b.pop()) || 0;
                    return [4 /*yield*/, erc20_balance_of_1.strategy(space, network, provider, addresses, options, snapshot)];
                case 3:
                    score = _d.sent();
                    return [2 /*return*/, Object.fromEntries(Object.entries(score).map(function (address) { return [
                            address[0],
                            address[1] * latestPriceFromBlock
                        ]; }))];
            }
        });
    });
}
exports.strategy = strategy;
