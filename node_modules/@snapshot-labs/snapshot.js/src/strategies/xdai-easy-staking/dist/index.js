"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var bignumber_1 = require("@ethersproject/bignumber");
var utils_1 = require("../../utils");
var utils_2 = require("./utils");
var examples_json_1 = require("./examples.json");
exports.author = 'maxaleks';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
var EASY_STAKING_SUBGRAPH_URL = 'https://api.thegraph.com/subgraphs/name/maxaleks/easy-staking';
var ercABI = [
    {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [
            {
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    }
];
function getEasyStakingDeposits(addresses, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var params, page, deposits, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = {
                        deposits: {
                            __args: {
                                where: {
                                    user_in: addresses.map(function (address) { return address.toLowerCase(); }),
                                    amount_gt: 0
                                },
                                first: 1000,
                                skip: 0
                            },
                            user: true,
                            amount: true,
                            timestamp: true
                        }
                    };
                    if (snapshot !== 'latest') {
                        // @ts-ignore
                        params.deposits.__args.block = { number: snapshot };
                    }
                    page = 0;
                    deposits = [];
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 3];
                    params.deposits.__args.skip = page * 1000;
                    return [4 /*yield*/, utils_1.subgraphRequest(EASY_STAKING_SUBGRAPH_URL, params)];
                case 2:
                    data = _a.sent();
                    deposits = deposits.concat(data.deposits);
                    page++;
                    if (data.deposits.length < 1000)
                        return [3 /*break*/, 3];
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, deposits.map(function (deposit) { return (__assign(__assign({}, deposit), { amount: bignumber_1.BigNumber.from(deposit.amount), timestamp: bignumber_1.BigNumber.from(deposit.timestamp) })); })];
            }
        });
    });
}
function getEasyStakingParams(snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var params, commonData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = {
                        commonData: {
                            __args: {
                                id: 'common'
                            },
                            sigmoidParamA: true,
                            sigmoidParamB: true,
                            sigmoidParamC: true,
                            totalSupplyFactor: true,
                            totalStaked: true
                        }
                    };
                    if (snapshot !== 'latest') {
                        // @ts-ignore
                        params.commonData.__args.block = { number: snapshot };
                    }
                    return [4 /*yield*/, utils_1.subgraphRequest(EASY_STAKING_SUBGRAPH_URL, params)];
                case 1:
                    commonData = (_a.sent()).commonData;
                    return [2 /*return*/, {
                            sigmoidParameters: {
                                a: bignumber_1.BigNumber.from(commonData.sigmoidParamA),
                                b: bignumber_1.BigNumber.from(commonData.sigmoidParamB),
                                c: bignumber_1.BigNumber.from(commonData.sigmoidParamC)
                            },
                            totalSupplyFactor: bignumber_1.BigNumber.from(commonData.totalSupplyFactor),
                            totalStaked: bignumber_1.BigNumber.from(commonData.totalStaked)
                        }];
            }
        });
    });
}
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, easyStakingDeposits, _b, sigmoidParameters, totalSupplyFactor, totalStaked, block, totalSupply, result;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        getEasyStakingDeposits(addresses, snapshot),
                        getEasyStakingParams(snapshot),
                        provider.getBlock(snapshot),
                        utils_1.call(provider, ercABI, [options.address, 'totalSupply', []])
                    ])];
                case 1:
                    _a = _c.sent(), easyStakingDeposits = _a[0], _b = _a[1], sigmoidParameters = _b.sigmoidParameters, totalSupplyFactor = _b.totalSupplyFactor, totalStaked = _b.totalStaked, block = _a[2], totalSupply = _a[3];
                    result = {};
                    addresses.forEach(function (address) {
                        result[address] = 0;
                    });
                    if (!easyStakingDeposits || easyStakingDeposits.length === 0) {
                        return [2 /*return*/, result];
                    }
                    return [2 /*return*/, Object.fromEntries(Object.entries(result).map(function (_a) {
                            var address = _a[0], balance = _a[1];
                            var totalBalance = balance;
                            var userDeposits = easyStakingDeposits.filter(function (deposit) { return deposit.user.toLowerCase() === address.toLowerCase(); });
                            userDeposits.forEach(function (deposit) {
                                var timePassed = bignumber_1.BigNumber.from(block.timestamp).sub(deposit.timestamp);
                                var emission = utils_2.calculateEmission(deposit.amount, timePassed, sigmoidParameters, totalSupplyFactor, totalSupply, totalStaked);
                                totalBalance += parseFloat(units_1.formatUnits(deposit.amount.add(emission).toString(), options.decimals));
                            });
                            return [address, totalBalance];
                        }))];
            }
        });
    });
}
exports.strategy = strategy;
