"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var bignumber_1 = require("@ethersproject/bignumber");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
var BIG18 = bignumber_1.BigNumber.from('1000000000000000000');
exports.author = 'FraxFinance';
exports.version = '0.0.2';
exports.examples = examples_json_1["default"];
// 0.0.1: FXS Plus FXS in LPs
// 0.0.2: Adds veFXS and removes outdated SushiSwap LPs
var DECIMALS = 18;
var abi = [
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: 'account',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'account',
                type: 'address'
            }
        ],
        name: 'boostedBalanceOf',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'getReserves',
        outputs: [
            {
                internalType: 'uint112',
                name: '_reserve0',
                type: 'uint112'
            },
            {
                internalType: 'uint112',
                name: '_reserve1',
                type: 'uint112'
            },
            {
                internalType: 'uint32',
                name: '_blockTimestampLast',
                type: 'uint32'
            }
        ],
        stateMutability: 'view',
        type: 'function',
        constant: true
    },
    {
        inputs: [],
        name: 'token0',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    }
];
var chunk = function (arr, size) {
    return Array.from({ length: Math.ceil(arr.length / size) }, function (v, i) {
        return arr.slice(i * size, i * size + size);
    });
};
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, fxsQuery, vefxsQuery, freeUniLPFraxFxsQuery, farmingUniLPFraxFxsQuery, response, uniLPFraxFxs_token0, uniLPFraxFxs_getReserves, uniLPFraxFxs_totalSupply, uni_FraxFxs_reservesFXS_E0, uni_FraxFxs_totalSupply_E0, uniLPFraxFxs_fxs_per_LP_E18, responseClean, chunks, fxsBalances, vefxsBalances, freeUniFraxFxsBalances, farmUniFraxFxsBalances;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    fxsQuery = addresses.map(function (address) { return [
                        options.FXS,
                        'balanceOf',
                        [address]
                    ]; });
                    vefxsQuery = addresses.map(function (address) { return [
                        options.VEFXS,
                        'balanceOf',
                        [address]
                    ]; });
                    freeUniLPFraxFxsQuery = addresses.map(function (address) { return [
                        options.UNI_LP_FRAX_FXS,
                        'balanceOf',
                        [address]
                    ]; });
                    farmingUniLPFraxFxsQuery = addresses.map(function (address) { return [
                        options.FARMING_UNI_LP_FRAX_FXS,
                        'boostedBalanceOf',
                        [address]
                    ]; });
                    return [4 /*yield*/, utils_1.multicall(network, provider, abi, __spreadArrays([
                            // Get 1inch LP OPIUM-ETH balance of OPIUM
                            // [options.OPIUM, 'balanceOf', [options.LP_1INCH_OPIUM_ETH]],
                            [options.UNI_LP_FRAX_FXS, 'token0'],
                            [options.UNI_LP_FRAX_FXS, 'getReserves'],
                            [options.UNI_LP_FRAX_FXS, 'totalSupply']
                        ], fxsQuery, vefxsQuery, freeUniLPFraxFxsQuery, farmingUniLPFraxFxsQuery), { blockTag: blockTag })];
                case 1:
                    response = _a.sent();
                    uniLPFraxFxs_token0 = response[0];
                    uniLPFraxFxs_getReserves = response[1];
                    uniLPFraxFxs_totalSupply = response[2];
                    if (uniLPFraxFxs_token0[0] == options.FXS)
                        uni_FraxFxs_reservesFXS_E0 = uniLPFraxFxs_getReserves[0];
                    else
                        uni_FraxFxs_reservesFXS_E0 = uniLPFraxFxs_getReserves[1];
                    uni_FraxFxs_totalSupply_E0 = uniLPFraxFxs_totalSupply[0];
                    uniLPFraxFxs_fxs_per_LP_E18 = uni_FraxFxs_reservesFXS_E0
                        .mul(BIG18)
                        .div(uni_FraxFxs_totalSupply_E0);
                    responseClean = response.slice(3, response.length);
                    chunks = chunk(responseClean, addresses.length);
                    fxsBalances = chunks[0];
                    vefxsBalances = chunks[1];
                    freeUniFraxFxsBalances = chunks[2];
                    farmUniFraxFxsBalances = chunks[3];
                    return [2 /*return*/, Object.fromEntries(Array(addresses.length)
                            .fill('x')
                            .map(function (_, i) {
                            var free_fxs = fxsBalances[i][0];
                            var vefxs = vefxsBalances[i][0];
                            var free_uni_frax_fxs = freeUniFraxFxsBalances[i][0];
                            var farm_uni_frax_fxs = farmUniFraxFxsBalances[i][0];
                            // Print statements
                            // console.log(`==================${addresses[i]}==================`);
                            // console.log("Free FXS: ", free_fxs.div(BIG18).toString());
                            // console.log("veFXS: ", vefxs.div(BIG18).toString());
                            // console.log("Free Uni FRAX/FXS LP: ", free_uni_frax_fxs.div(BIG18).toString());
                            // console.log("Farmed Uni FRAX/FXS LP [boosted]: ", farm_uni_frax_fxs.div(BIG18).toString());
                            // console.log("------");
                            // console.log("E18");
                            // console.log("FXS per Uni FRAX/FXS LP E18: ", uniLPFraxFxs_fxs_per_LP_E18.toString());
                            // console.log("E0");
                            // console.log("FXS per Uni FRAX/FXS LP E0: ", uniLPFraxFxs_fxs_per_LP_E18.div(BIG18).toString());
                            // console.log(``);
                            return [
                                addresses[i],
                                parseFloat(units_1.formatUnits(free_fxs
                                    .add(vefxs)
                                    .add(free_uni_frax_fxs.mul(uniLPFraxFxs_fxs_per_LP_E18).div(BIG18)) // FXS share in free Uni FRAX/FXS LP
                                    .add(farm_uni_frax_fxs.mul(uniLPFraxFxs_fxs_per_LP_E18).div(BIG18)) // FXS share in farmed Uni FRAX/FXS LP [boosted]
                                    .toString(), DECIMALS))
                            ];
                        }))];
            }
        });
    });
}
exports.strategy = strategy;
