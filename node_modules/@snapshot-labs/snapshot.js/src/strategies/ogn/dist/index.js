"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.about = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var web3_1 = require("../../utils/web3");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
var README_md_1 = require("./README.md");
exports.author = 'franckc';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
exports.about = README_md_1["default"];
var abi = [
    'function balanceOf(address account) external view returns (uint256)',
    // Staking
    'function totalStaked(address account) external view returns (uint256)'
];
// Number of blocks in 30 days, assuming 15 sec per block.
var numBlock30Days = (30 * 24 * 60 * 60) / 15;
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag1, _a, blockTag2, ognCalls, stakingCalls, multicalls, responses, scores;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(typeof snapshot === 'number')) return [3 /*break*/, 1];
                    _a = snapshot;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, web3_1.getBlockNumber(provider)];
                case 2:
                    _a = _b.sent();
                    _b.label = 3;
                case 3:
                    blockTag1 = _a;
                    blockTag2 = blockTag1 - numBlock30Days;
                    ognCalls = addresses.map(function (address) { return [
                        options.ognAddress,
                        'balanceOf',
                        [address]
                    ]; });
                    stakingCalls = addresses.map(function (address) { return [
                        options.stakingAddress,
                        'totalStaked',
                        [address]
                    ]; });
                    multicalls = [
                        utils_1.multicall(network, provider, abi, ognCalls, { blockTag: blockTag1 }),
                        utils_1.multicall(network, provider, abi, ognCalls, { blockTag: blockTag2 }),
                        utils_1.multicall(network, provider, abi, stakingCalls, { blockTag: blockTag1 }),
                        utils_1.multicall(network, provider, abi, stakingCalls, { blockTag: blockTag2 })
                    ];
                    return [4 /*yield*/, Promise.all(multicalls)];
                case 4:
                    responses = _b.sent();
                    scores = {};
                    addresses.forEach(function (address, i) {
                        var balance = responses[0][i][0]
                            .add(responses[1][i][0])
                            .add(responses[2][i][0])
                            .add(responses[3][i][0])
                            .div(2);
                        scores[address] = parseFloat(units_1.formatUnits(balance.toString(), options.decimals));
                    });
                    return [2 /*return*/, scores];
            }
        });
    });
}
exports.strategy = strategy;
