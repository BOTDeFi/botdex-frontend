"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.strategy = exports.about = exports.examples = exports.version = exports.author = void 0;
var units_1 = require("@ethersproject/units");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
var README_md_1 = require("./README.md");
exports.author = 'dominator008';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
exports.about = README_md_1["default"];
var abi = [
    {
        constant: true,
        inputs: [],
        name: 'getValidatorNum',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        name: 'validatorSet',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [
            {
                internalType: 'address',
                name: '_candidateAddr',
                type: 'address'
            },
            {
                internalType: 'address',
                name: '_delegatorAddr',
                type: 'address'
            }
        ],
        name: 'getDelegatorInfo',
        outputs: [
            {
                internalType: 'uint256',
                name: 'delegatedStake',
                type: 'uint256'
            },
            {
                internalType: 'uint256',
                name: 'undelegatingStake',
                type: 'uint256'
            },
            {
                internalType: 'uint256[]',
                name: 'intentAmounts',
                type: 'uint256[]'
            },
            {
                internalType: 'uint256[]',
                name: 'intentProposedTimes',
                type: 'uint256[]'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    }
];
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var blockTag, validatorNum, validatorAddresses, callInfos, callInfosCopy, batchSize, batches, delegatorInfoResponse, i, _a, _b, delegations, aggregatedDelegations;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    blockTag = typeof snapshot === 'number' ? snapshot : 'latest';
                    return [4 /*yield*/, utils_1.multicall(network, provider, abi, [[options.dposAddress, 'getValidatorNum', []]], { blockTag: blockTag })];
                case 1:
                    validatorNum = (_c.sent())[0][0];
                    return [4 /*yield*/, utils_1.multicall(network, provider, abi, Array.from(Array(validatorNum.toNumber()).keys()).map(function (index) { return [
                            options.dposAddress,
                            'validatorSet',
                            [index]
                        ]; }), { blockTag: blockTag })];
                case 2:
                    validatorAddresses = (_c.sent()).map(function (value) { return value[0]; });
                    callInfos = validatorAddresses.reduce(function (infos, validatorAddress) {
                        return infos.concat(addresses.map(function (address) { return [
                            address,
                            [options.dposAddress, 'getDelegatorInfo', [validatorAddress, address]]
                        ]; }));
                    }, []);
                    callInfosCopy = __spreadArrays(callInfos);
                    batchSize = 2000;
                    batches = new Array(Math.ceil(callInfos.length / batchSize))
                        .fill(0)
                        .map(function () { return callInfosCopy.splice(0, batchSize); });
                    delegatorInfoResponse = [];
                    i = 0;
                    _c.label = 3;
                case 3:
                    if (!(i < batches.length)) return [3 /*break*/, 6];
                    _b = (_a = delegatorInfoResponse).concat;
                    return [4 /*yield*/, utils_1.multicall(network, provider, abi, batches[i].map(function (info) { return info[1]; }), { blockTag: blockTag })];
                case 4:
                    delegatorInfoResponse = _b.apply(_a, [_c.sent()]);
                    _c.label = 5;
                case 5:
                    i++;
                    return [3 /*break*/, 3];
                case 6:
                    delegations = delegatorInfoResponse.map(function (info, i) { return [
                        callInfos[i][0],
                        info.delegatedStake
                    ]; });
                    aggregatedDelegations = delegations.reduce(function (aggregates, delegation) {
                        var delegatorAddress = delegation[0];
                        if (aggregates[delegatorAddress]) {
                            aggregates[delegatorAddress] = aggregates[delegatorAddress].add(delegation[1]);
                        }
                        else {
                            aggregates[delegatorAddress] = delegation[1];
                        }
                        return aggregates;
                    }, {});
                    return [2 /*return*/, Object.entries(aggregatedDelegations).reduce(function (transformed, _a) {
                            var delegatorAddress = _a[0], delegatedStake = _a[1];
                            transformed[delegatorAddress] = parseFloat(units_1.formatUnits(delegatedStake.toString(), 18));
                            return transformed;
                        }, {})];
            }
        });
    });
}
exports.strategy = strategy;
