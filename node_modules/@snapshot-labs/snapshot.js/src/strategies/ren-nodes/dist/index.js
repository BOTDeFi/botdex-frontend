"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = exports.examples = exports.version = exports.author = void 0;
var address_1 = require("@ethersproject/address");
var utils_1 = require("../../utils");
var examples_json_1 = require("./examples.json");
exports.author = 'noiach';
exports.version = '0.1.0';
exports.examples = examples_json_1["default"];
/*
 * A strategy based on the number of RenVM nodes an address has, and how long
 * each node has been registered for.
 */
var RENVM_SUBGRAPH_URL = {
    '1': 'https://api.thegraph.com/subgraphs/name/renproject/renvm',
    '42': 'https://api.thegraph.com/subgraphs/name/renproject/renvm-testnet'
};
// A month in seconds.
var MONTH = 28 * 24 * 60 * 60;
// Subgraph restricts the number of results of a query to 1000 entities.
var QUERY_LIMIT = 1000;
var RENVM_SUBGRAPH_QUERY = {
    darknodes: {
        __args: {
            first: QUERY_LIMIT,
            // Updated each loop.
            skip: 0,
            where: {
                // Skip nodes that have been deregistered.
                registeredAt_gt: 0,
                // Updated below.
                registeredAt_lte: undefined
            }
        },
        registeredAt: true,
        deregisteredAt: true,
        operator: true
    }
};
function strategy(space, network, provider, addresses, options, snapshot) {
    return __awaiter(this, void 0, void 0, function () {
        var timestamp, nodes, result, scores;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (snapshot !== 'latest') {
                        // @ts-ignore
                        RENVM_SUBGRAPH_QUERY.darknodes.__args.block = { number: snapshot };
                    }
                    return [4 /*yield*/, provider.getBlock(snapshot)];
                case 1:
                    timestamp = (_a.sent()).timestamp;
                    RENVM_SUBGRAPH_QUERY.darknodes.__args.where.registeredAt_lte = timestamp;
                    nodes = [];
                    _a.label = 2;
                case 2:
                    if (!(nodes.length < 10000)) return [3 /*break*/, 4];
                    // Skip the number nodes already seen.
                    RENVM_SUBGRAPH_QUERY.darknodes.__args.skip = nodes.length;
                    return [4 /*yield*/, utils_1.subgraphRequest(RENVM_SUBGRAPH_URL[network], RENVM_SUBGRAPH_QUERY)];
                case 3:
                    result = _a.sent();
                    if (result && result.darknodes) {
                        nodes = nodes.concat(result.darknodes);
                    }
                    else {
                        return [3 /*break*/, 4];
                    }
                    // If the number of results returned was less than QUERY_LIMIT, then there
                    // are no more results to fetch.
                    if (result.darknodes.length < QUERY_LIMIT) {
                        return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 2];
                case 4:
                    scores = addresses.reduce(function (obj, address) {
                        var _a;
                        return (__assign(__assign({}, obj), (_a = {}, _a[address_1.getAddress(address)] = 0, _a)));
                    }, {});
                    nodes.forEach(function (darknode) {
                        // Skip operators that aren't in `addresses`.
                        var nodeOperator = address_1.getAddress(darknode.operator);
                        if (scores[nodeOperator] === undefined) {
                            return;
                        }
                        // Check that the darknode isn't deregistered.
                        if (darknode.deregisteredAt > 0 && darknode.deregisteredAt < timestamp) {
                            return;
                        }
                        // Take square root of the number of months (rounded up) the node has been
                        // registered for.
                        var timeRegistered = timestamp - darknode.registeredAt;
                        var score = Math.sqrt(Math.ceil(timeRegistered / MONTH));
                        scores[nodeOperator] += score;
                    });
                    return [2 /*return*/, scores];
            }
        });
    });
}
exports.strategy = strategy;
