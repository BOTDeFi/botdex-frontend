{"ast":null,"code":"/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('./index.js').H} H\n */\nimport { thematicBreak } from './handlers/thematic-break.js';\nimport { list } from './handlers/list.js';\nimport { wrap } from './wrap.js';\n/**\n * @param {H} h\n */\n\nexport function footer(h) {\n  const footnoteById = h.footnoteById;\n  const footnoteOrder = h.footnoteOrder;\n  let index = -1;\n  /** @type {Array.<ListItem>} */\n\n  const listItems = [];\n\n  while (++index < footnoteOrder.length) {\n    const def = footnoteById[footnoteOrder[index].toUpperCase()];\n\n    if (!def) {\n      continue;\n    }\n\n    const marker = String(index + 1);\n    const content = [...def.children];\n    /** @type {Link} */\n\n    const backReference = {\n      type: 'link',\n      url: '#fnref' + marker,\n      data: {\n        hProperties: {\n          className: ['footnote-back'],\n          role: 'doc-backlink'\n        }\n      },\n      children: [{\n        type: 'text',\n        value: '↩'\n      }]\n    };\n    const tail = content[content.length - 1];\n\n    if (tail && tail.type === 'paragraph') {\n      tail.children.push(backReference);\n    } else {\n      // @ts-expect-error Indeed, link directly added in block content.\n      // Which we do because that way at least the handlers will be called\n      // for the other HTML we’re generating (as markdown).\n      content.push(backReference);\n    }\n\n    listItems.push({\n      type: 'listItem',\n      data: {\n        hProperties: {\n          id: 'fn' + marker,\n          role: 'doc-endnote'\n        }\n      },\n      children: content,\n      position: def.position\n    });\n  }\n\n  if (listItems.length === 0) {\n    return null;\n  }\n\n  return h(null, 'section', {\n    className: ['footnotes'],\n    role: 'doc-endnotes'\n  }, wrap([thematicBreak(h), list(h, {\n    type: 'list',\n    ordered: true,\n    children: listItems\n  })], true));\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-hast/lib/footer.js"],"names":["thematicBreak","list","wrap","footer","h","footnoteById","footnoteOrder","index","listItems","length","def","toUpperCase","marker","String","content","children","backReference","type","url","data","hProperties","className","role","value","tail","push","id","position","ordered"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,8BAA5B;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AACA,SAAQC,IAAR,QAAmB,WAAnB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACxB,QAAMC,YAAY,GAAGD,CAAC,CAACC,YAAvB;AACA,QAAMC,aAAa,GAAGF,CAAC,CAACE,aAAxB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA;;AACA,QAAMC,SAAS,GAAG,EAAlB;;AAEA,SAAO,EAAED,KAAF,GAAUD,aAAa,CAACG,MAA/B,EAAuC;AACrC,UAAMC,GAAG,GAAGL,YAAY,CAACC,aAAa,CAACC,KAAD,CAAb,CAAqBI,WAArB,EAAD,CAAxB;;AAEA,QAAI,CAACD,GAAL,EAAU;AACR;AACD;;AAED,UAAME,MAAM,GAAGC,MAAM,CAACN,KAAK,GAAG,CAAT,CAArB;AACA,UAAMO,OAAO,GAAG,CAAC,GAAGJ,GAAG,CAACK,QAAR,CAAhB;AACA;;AACA,UAAMC,aAAa,GAAG;AACpBC,MAAAA,IAAI,EAAE,MADc;AAEpBC,MAAAA,GAAG,EAAE,WAAWN,MAFI;AAGpBO,MAAAA,IAAI,EAAE;AAACC,QAAAA,WAAW,EAAE;AAACC,UAAAA,SAAS,EAAE,CAAC,eAAD,CAAZ;AAA+BC,UAAAA,IAAI,EAAE;AAArC;AAAd,OAHc;AAIpBP,MAAAA,QAAQ,EAAE,CAAC;AAACE,QAAAA,IAAI,EAAE,MAAP;AAAeM,QAAAA,KAAK,EAAE;AAAtB,OAAD;AAJU,KAAtB;AAMA,UAAMC,IAAI,GAAGV,OAAO,CAACA,OAAO,CAACL,MAAR,GAAiB,CAAlB,CAApB;;AAEA,QAAIe,IAAI,IAAIA,IAAI,CAACP,IAAL,KAAc,WAA1B,EAAuC;AACrCO,MAAAA,IAAI,CAACT,QAAL,CAAcU,IAAd,CAAmBT,aAAnB;AACD,KAFD,MAEO;AACL;AACA;AACA;AACAF,MAAAA,OAAO,CAACW,IAAR,CAAaT,aAAb;AACD;;AAEDR,IAAAA,SAAS,CAACiB,IAAV,CAAe;AACbR,MAAAA,IAAI,EAAE,UADO;AAEbE,MAAAA,IAAI,EAAE;AAACC,QAAAA,WAAW,EAAE;AAACM,UAAAA,EAAE,EAAE,OAAOd,MAAZ;AAAoBU,UAAAA,IAAI,EAAE;AAA1B;AAAd,OAFO;AAGbP,MAAAA,QAAQ,EAAED,OAHG;AAIba,MAAAA,QAAQ,EAAEjB,GAAG,CAACiB;AAJD,KAAf;AAMD;;AAED,MAAInB,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,SAAOL,CAAC,CACN,IADM,EAEN,SAFM,EAGN;AAACiB,IAAAA,SAAS,EAAE,CAAC,WAAD,CAAZ;AAA2BC,IAAAA,IAAI,EAAE;AAAjC,GAHM,EAINpB,IAAI,CACF,CACEF,aAAa,CAACI,CAAD,CADf,EAEEH,IAAI,CAACG,CAAD,EAAI;AAACa,IAAAA,IAAI,EAAE,MAAP;AAAeW,IAAAA,OAAO,EAAE,IAAxB;AAA8Bb,IAAAA,QAAQ,EAAEP;AAAxC,GAAJ,CAFN,CADE,EAKF,IALE,CAJE,CAAR;AAYD","sourcesContent":["/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('./index.js').H} H\n */\n\nimport {thematicBreak} from './handlers/thematic-break.js'\nimport {list} from './handlers/list.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n */\nexport function footer(h) {\n  const footnoteById = h.footnoteById\n  const footnoteOrder = h.footnoteOrder\n  let index = -1\n  /** @type {Array.<ListItem>} */\n  const listItems = []\n\n  while (++index < footnoteOrder.length) {\n    const def = footnoteById[footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const marker = String(index + 1)\n    const content = [...def.children]\n    /** @type {Link} */\n    const backReference = {\n      type: 'link',\n      url: '#fnref' + marker,\n      data: {hProperties: {className: ['footnote-back'], role: 'doc-backlink'}},\n      children: [{type: 'text', value: '↩'}]\n    }\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'paragraph') {\n      tail.children.push(backReference)\n    } else {\n      // @ts-expect-error Indeed, link directly added in block content.\n      // Which we do because that way at least the handlers will be called\n      // for the other HTML we’re generating (as markdown).\n      content.push(backReference)\n    }\n\n    listItems.push({\n      type: 'listItem',\n      data: {hProperties: {id: 'fn' + marker, role: 'doc-endnote'}},\n      children: content,\n      position: def.position\n    })\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return h(\n    null,\n    'section',\n    {className: ['footnotes'], role: 'doc-endnotes'},\n    wrap(\n      [\n        thematicBreak(h),\n        list(h, {type: 'list', ordered: true, children: listItems})\n      ],\n      true\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}