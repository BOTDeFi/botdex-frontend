{"ast":null,"code":"import { supportsArrayBuffer, nativeIsView, toString } from './_setup.js';\nimport isDataView from './isDataView.js';\nimport constant from './constant.js';\nimport isBufferLike from './_isBufferLike.js'; // Is a given value a typed array?\n\nvar typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\n\nfunction isTypedArray(obj) {\n  // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n  // Otherwise, fall back on the above regular expression.\n  return nativeIsView ? nativeIsView(obj) && !isDataView(obj) : isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n}\n\nexport default supportsArrayBuffer ? isTypedArray : constant(false);","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/underscore/modules/isTypedArray.js"],"names":["supportsArrayBuffer","nativeIsView","toString","isDataView","constant","isBufferLike","typedArrayPattern","isTypedArray","obj","test","call"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,YAA9B,EAA4CC,QAA5C,QAA4D,aAA5D;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,oBAAzB,C,CAEA;;AACA,IAAIC,iBAAiB,GAAG,6EAAxB;;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzB;AACA;AACA,SAAOP,YAAY,GAAIA,YAAY,CAACO,GAAD,CAAZ,IAAqB,CAACL,UAAU,CAACK,GAAD,CAApC,GACLH,YAAY,CAACG,GAAD,CAAZ,IAAqBF,iBAAiB,CAACG,IAAlB,CAAuBP,QAAQ,CAACQ,IAAT,CAAcF,GAAd,CAAvB,CADnC;AAED;;AAED,eAAeR,mBAAmB,GAAGO,YAAH,GAAkBH,QAAQ,CAAC,KAAD,CAA5D","sourcesContent":["import { supportsArrayBuffer, nativeIsView, toString } from './_setup.js';\nimport isDataView from './isDataView.js';\nimport constant from './constant.js';\nimport isBufferLike from './_isBufferLike.js';\n\n// Is a given value a typed array?\nvar typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\nfunction isTypedArray(obj) {\n  // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n  // Otherwise, fall back on the above regular expression.\n  return nativeIsView ? (nativeIsView(obj) && !isDataView(obj)) :\n                isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n}\n\nexport default supportsArrayBuffer ? isTypedArray : constant(false);\n"]},"metadata":{},"sourceType":"module"}