{"ast":null,"code":"import { types } from 'mobx-state-tree';\nimport { farms as farmsConfig } from '@/config';\nimport priceHelperLpsConfig from '@/config/priceHelperLps';\nimport { fetchFarms, fetchFarmsPrices, fetchFarmUserAllowances, fetchFarmUserEarnings, fetchFarmUserStakedBalances, fetchFarmUserTokenBalances } from '../farms';\nimport AddressModel from './Address';\nimport TokenModel from './Token';\nconst UserDataModel = types.model({\n  allowance: types.string,\n  tokenBalance: types.string,\n  stakedBalance: types.string,\n  earnings: types.string\n});\nconst FarmModel = types.model({\n  pid: types.number,\n  lpSymbol: types.string,\n  lpAddresses: AddressModel,\n  token: TokenModel,\n  quoteToken: TokenModel,\n  multiplier: types.maybe(types.string),\n  categoryType: types.string,\n  // dual: types.maybe(\n  //   types.model({\n  //     rewardPerBlock: types.number,\n  //     earnLabel: types.string,\n  //     endBlock: types.number,\n  //   }),\n  // ),\n  tokenAmountMc: types.maybe(types.string),\n  quoteTokenAmountMc: types.maybe(types.string),\n  tokenAmountTotal: types.maybe(types.string),\n  quoteTokenAmountTotal: types.maybe(types.string),\n  lpTotalInQuoteToken: types.maybe(types.string),\n  lpTotalSupply: types.maybe(types.string),\n  tokenPriceVsQuote: types.maybe(types.string),\n  poolWeight: types.maybe(types.string),\n  userData: types.maybe(UserDataModel)\n});\nconst FarmsModel = types.model({\n  data: types.optional(types.array(FarmModel), farmsConfig),\n  userDataLoaded: false\n}).actions(_c = self => ({\n  async fetchFarmsPublicDataAsync(pids) {\n    const farmsToFetch = farmsConfig.filter(farmConfig => pids.includes(farmConfig.pid)); // Add price helper farms\n\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig);\n    const farms = await fetchFarms(farmsWithPriceHelpers);\n    const farmsWithPrices = await fetchFarmsPrices(farms); // Filter out price helper LP config farms (there can be farms with \"pid: -1\" which must be excluded)\n\n    const farmsWithoutHelperLps = farmsWithPrices.filter(farm => {\n      return farm.pid >= 0;\n    });\n    this.fetchFarmsPublicDataAsyncSuccess(farmsWithoutHelperLps);\n  },\n\n  fetchFarmsPublicDataAsyncSuccess(newData) {\n    self.data.forEach(farm => {\n      const liveFarmData = newData.find(({\n        pid\n      }) => pid === farm.pid);\n      if (!liveFarmData) return;\n      farm.categoryType = liveFarmData.categoryType;\n      farm.lpAddresses = liveFarmData.lpAddresses;\n      farm.lpSymbol = liveFarmData.lpSymbol;\n      farm.lpTotalInQuoteToken = liveFarmData.lpTotalInQuoteToken;\n      farm.lpTotalSupply = liveFarmData.lpTotalSupply;\n      farm.multiplier = liveFarmData.multiplier;\n      farm.pid = liveFarmData.pid;\n      farm.poolWeight = liveFarmData.poolWeight;\n      farm.quoteToken.busdPrice = liveFarmData.quoteToken.busdPrice || '';\n      farm.quoteTokenAmountMc = liveFarmData.quoteTokenAmountMc;\n      farm.quoteTokenAmountTotal = liveFarmData.quoteTokenAmountTotal;\n      farm.token.busdPrice = liveFarmData.token.busdPrice || '';\n      farm.tokenAmountMc = liveFarmData.tokenAmountMc;\n      farm.tokenAmountTotal = liveFarmData.tokenAmountTotal;\n      farm.tokenPriceVsQuote = liveFarmData.tokenPriceVsQuote;\n    });\n  },\n\n  async fetchFarmUserDataAsync(account, pids) {\n    const farmsToFetch = farmsConfig.filter(farmConfig => pids.includes(farmConfig.pid));\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch);\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch);\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch);\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch);\n    this.fetchFarmUserDataAsyncSuccess(userFarmAllowances.map((farmAllowance, index) => {\n      return {\n        pid: farmsToFetch[index].pid,\n        allowance: userFarmAllowances[index],\n        tokenBalance: userFarmTokenBalances[index],\n        stakedBalance: userStakedBalances[index],\n        earnings: userFarmEarnings[index]\n      };\n    }));\n  },\n\n  fetchFarmUserDataAsyncSuccess(newData) {\n    newData.forEach(userData => {\n      const {\n        pid\n      } = userData;\n      const index = self.data.findIndex(farm => farm.pid === pid);\n      self.data[index].userData = userData;\n    });\n    self.userDataLoaded = true;\n  }\n\n}));\n_c2 = FarmsModel;\nexport default FarmsModel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FarmsModel$types\\n  .model({\\n    data: types.optional(types.array(FarmModel), farmsConfig),\\n    userDataLoaded: false,\\n  })\\n  .actions\");\n$RefreshReg$(_c2, \"FarmsModel\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Farms.ts"],"names":["types","farms","farmsConfig","priceHelperLpsConfig","fetchFarms","fetchFarmsPrices","fetchFarmUserAllowances","fetchFarmUserEarnings","fetchFarmUserStakedBalances","fetchFarmUserTokenBalances","AddressModel","TokenModel","UserDataModel","model","allowance","string","tokenBalance","stakedBalance","earnings","FarmModel","pid","number","lpSymbol","lpAddresses","token","quoteToken","multiplier","maybe","categoryType","tokenAmountMc","quoteTokenAmountMc","tokenAmountTotal","quoteTokenAmountTotal","lpTotalInQuoteToken","lpTotalSupply","tokenPriceVsQuote","poolWeight","userData","FarmsModel","data","optional","array","userDataLoaded","actions","self","fetchFarmsPublicDataAsync","pids","farmsToFetch","filter","farmConfig","includes","farmsWithPriceHelpers","concat","farmsWithPrices","farmsWithoutHelperLps","farm","fetchFarmsPublicDataAsyncSuccess","newData","forEach","liveFarmData","find","busdPrice","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","fetchFarmUserDataAsyncSuccess","map","farmAllowance","index","findIndex"],"mappings":"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","sourcesContent":["import { types } from 'mobx-state-tree';\n\nimport { farms as farmsConfig } from '@/config';\nimport priceHelperLpsConfig from '@/config/priceHelperLps';\nimport { FarmWithoutUserData } from '@/types';\n\nimport {\n  fetchFarms,\n  fetchFarmsPrices,\n  fetchFarmUserAllowances,\n  fetchFarmUserEarnings,\n  fetchFarmUserStakedBalances,\n  fetchFarmUserTokenBalances,\n} from '../farms';\n\nimport AddressModel from './Address';\nimport TokenModel from './Token';\n\nconst UserDataModel = types.model({\n  allowance: types.string,\n  tokenBalance: types.string,\n  stakedBalance: types.string,\n  earnings: types.string,\n});\n\nconst FarmModel = types.model({\n  pid: types.number,\n  lpSymbol: types.string,\n  lpAddresses: AddressModel,\n  token: TokenModel,\n  quoteToken: TokenModel,\n  multiplier: types.maybe(types.string),\n  categoryType: types.string,\n  // dual: types.maybe(\n  //   types.model({\n  //     rewardPerBlock: types.number,\n  //     earnLabel: types.string,\n  //     endBlock: types.number,\n  //   }),\n  // ),\n\n  tokenAmountMc: types.maybe(types.string),\n  quoteTokenAmountMc: types.maybe(types.string),\n  tokenAmountTotal: types.maybe(types.string),\n  quoteTokenAmountTotal: types.maybe(types.string),\n  lpTotalInQuoteToken: types.maybe(types.string),\n  lpTotalSupply: types.maybe(types.string),\n  tokenPriceVsQuote: types.maybe(types.string),\n  poolWeight: types.maybe(types.string),\n  userData: types.maybe(UserDataModel),\n});\n\nconst FarmsModel = types\n  .model({\n    data: types.optional(types.array(FarmModel), farmsConfig),\n    userDataLoaded: false,\n  })\n  .actions((self) => ({\n    async fetchFarmsPublicDataAsync(pids: number[]) {\n      const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid));\n\n      // Add price helper farms\n      const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig);\n\n      const farms = await fetchFarms(farmsWithPriceHelpers);\n      const farmsWithPrices = await fetchFarmsPrices(farms);\n\n      // Filter out price helper LP config farms (there can be farms with \"pid: -1\" which must be excluded)\n      const farmsWithoutHelperLps = farmsWithPrices.filter((farm: FarmWithoutUserData) => {\n        return farm.pid >= 0;\n      });\n\n      this.fetchFarmsPublicDataAsyncSuccess(farmsWithoutHelperLps);\n    },\n    fetchFarmsPublicDataAsyncSuccess(newData: FarmWithoutUserData[]) {\n      self.data.forEach((farm) => {\n        const liveFarmData = newData.find(({ pid }: { pid: number }) => pid === farm.pid);\n\n        if (!liveFarmData) return;\n\n        farm.categoryType = liveFarmData.categoryType;\n        farm.lpAddresses = liveFarmData.lpAddresses;\n        farm.lpSymbol = liveFarmData.lpSymbol;\n        farm.lpTotalInQuoteToken = liveFarmData.lpTotalInQuoteToken;\n        farm.lpTotalSupply = liveFarmData.lpTotalSupply;\n        farm.multiplier = liveFarmData.multiplier;\n        farm.pid = liveFarmData.pid;\n        farm.poolWeight = liveFarmData.poolWeight;\n\n        farm.quoteToken.busdPrice = liveFarmData.quoteToken.busdPrice || '';\n\n        farm.quoteTokenAmountMc = liveFarmData.quoteTokenAmountMc;\n        farm.quoteTokenAmountTotal = liveFarmData.quoteTokenAmountTotal;\n\n        farm.token.busdPrice = liveFarmData.token.busdPrice || '';\n\n        farm.tokenAmountMc = liveFarmData.tokenAmountMc;\n        farm.tokenAmountTotal = liveFarmData.tokenAmountTotal;\n        farm.tokenPriceVsQuote = liveFarmData.tokenPriceVsQuote;\n      });\n    },\n    async fetchFarmUserDataAsync(account: string, pids: number[]) {\n      const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid));\n      const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch);\n      const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch);\n      const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch);\n      const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch);\n\n      this.fetchFarmUserDataAsyncSuccess(\n        userFarmAllowances.map((farmAllowance: any, index: number) => {\n          return {\n            pid: farmsToFetch[index].pid,\n            allowance: userFarmAllowances[index],\n            tokenBalance: userFarmTokenBalances[index],\n            stakedBalance: userStakedBalances[index],\n            earnings: userFarmEarnings[index],\n          };\n        }),\n      );\n    },\n    fetchFarmUserDataAsyncSuccess(\n      newData: { pid: any; allowance: any; tokenBalance: any; stakedBalance: any; earnings: any }[],\n    ) {\n      newData.forEach((userData) => {\n        const { pid } = userData;\n        const index = self.data.findIndex((farm) => farm.pid === pid);\n        self.data[index].userData = userData;\n      });\n      self.userDataLoaded = true;\n    },\n  }));\n\nexport default FarmsModel;\n"]},"metadata":{},"sourceType":"module"}