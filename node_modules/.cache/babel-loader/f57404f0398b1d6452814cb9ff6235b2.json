{"ast":null,"code":"import { types } from 'mobx-state-tree';\nimport TokenModel from '../Token';\nconst StakeUnstakeModal = types.model({\n  isOpen: types.optional(types.boolean, false),\n  isStaking: types.optional(types.boolean, true),\n  maxStakingValue: types.optional(types.number, 0),\n  stakingToken: types.maybeNull(TokenModel),\n  isAutoVault: types.boolean,\n  poolId: types.number\n}).actions(_c = self => ({\n  close() {\n    self.isOpen = false;\n  },\n\n  open({\n    isStaking,\n    maxStakingValue,\n    stakingToken,\n    isAutoVault,\n    poolId\n  }) {\n    self.isOpen = true;\n    self.isStaking = isStaking;\n    self.maxStakingValue = maxStakingValue;\n    self.stakingToken = stakingToken;\n    self.isAutoVault = isAutoVault;\n    self.poolId = poolId;\n  }\n\n}));\n_c2 = StakeUnstakeModal;\nexport default StakeUnstakeModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StakeUnstakeModal$types\\n  .model({\\n    isOpen: types.optional(types.boolean, false),\\n    isStaking: types.optional(types.boolean, true),\\n    maxStakingValue: types.optional(types.number, 0),\\n    stakingToken: types.maybeNull(TokenModel),\\n    isAutoVault: types.boolean,\\n    poolId: types.number,\\n  })\\n  .actions\");\n$RefreshReg$(_c2, \"StakeUnstakeModal\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/StakeUnstakeModal.ts"],"names":["types","TokenModel","StakeUnstakeModal","model","isOpen","optional","boolean","isStaking","maxStakingValue","number","stakingToken","maybeNull","isAutoVault","poolId","actions","self","close","open"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AAIA,OAAOC,UAAP,MAAuB,UAAvB;AASA,MAAMC,iBAAiB,GAAGF,KAAK,CAC5BG,KADuB,CACjB;AACLC,EAAAA,MAAM,EAAEJ,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,OAArB,EAA8B,KAA9B,CADH;AAELC,EAAAA,SAAS,EAAEP,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,OAArB,EAA8B,IAA9B,CAFN;AAGLE,EAAAA,eAAe,EAAER,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACS,MAArB,EAA6B,CAA7B,CAHZ;AAILC,EAAAA,YAAY,EAAEV,KAAK,CAACW,SAAN,CAAgBV,UAAhB,CAJT;AAKLW,EAAAA,WAAW,EAAEZ,KAAK,CAACM,OALd;AAMLO,EAAAA,MAAM,EAAEb,KAAK,CAACS;AANT,CADiB,EASvBK,OATuB,MASdC,IAAD,KAAW;AAClBC,EAAAA,KAAK,GAAG;AACND,IAAAA,IAAI,CAACX,MAAL,GAAc,KAAd;AACD,GAHiB;;AAIlBa,EAAAA,IAAI,CAAC;AACHV,IAAAA,SADG;AAEHC,IAAAA,eAFG;AAGHE,IAAAA,YAHG;AAIHE,IAAAA,WAJG;AAKHC,IAAAA;AALG,GAAD,EAYD;AACDE,IAAAA,IAAI,CAACX,MAAL,GAAc,IAAd;AAEAW,IAAAA,IAAI,CAACR,SAAL,GAAiBA,SAAjB;AACAQ,IAAAA,IAAI,CAACP,eAAL,GAAuBA,eAAvB;AACAO,IAAAA,IAAI,CAACL,YAAL,GAAoBA,YAApB;AACAK,IAAAA,IAAI,CAACH,WAAL,GAAmBA,WAAnB;AACAG,IAAAA,IAAI,CAACF,MAAL,GAAcA,MAAd;AACD;;AAxBiB,CAAX,CATe,CAA1B;MAAMX,iB;AAoCN,eAAeA,iBAAf","sourcesContent":["import { types } from 'mobx-state-tree';\n\nimport { Token } from '@/types';\n\nimport TokenModel from '../Token';\n\nexport interface ITokenMobx extends Token {\n  decimals: number;\n  projectLink: string;\n  logoURI: string;\n  busdPrice: string;\n}\n\nconst StakeUnstakeModal = types\n  .model({\n    isOpen: types.optional(types.boolean, false),\n    isStaking: types.optional(types.boolean, true),\n    maxStakingValue: types.optional(types.number, 0),\n    stakingToken: types.maybeNull(TokenModel),\n    isAutoVault: types.boolean,\n    poolId: types.number,\n  })\n  .actions((self) => ({\n    close() {\n      self.isOpen = false;\n    },\n    open({\n      isStaking,\n      maxStakingValue,\n      stakingToken,\n      isAutoVault,\n      poolId,\n    }: {\n      isStaking: boolean;\n      maxStakingValue: number;\n      stakingToken: ITokenMobx;\n      isAutoVault: boolean;\n      poolId: number;\n    }) {\n      self.isOpen = true;\n\n      self.isStaking = isStaking;\n      self.maxStakingValue = maxStakingValue;\n      self.stakingToken = stakingToken;\n      self.isAutoVault = isAutoVault;\n      self.poolId = poolId;\n    },\n  }));\n\nexport default StakeUnstakeModal;\n"]},"metadata":{},"sourceType":"module"}