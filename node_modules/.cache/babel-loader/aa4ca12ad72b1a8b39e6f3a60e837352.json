{"ast":null,"code":"/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\nimport { containerPhrasing } from 'mdast-util-to-markdown/lib/util/container-phrasing.js';\n/** @type {FromMarkdownExtension} */\n\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {\n    strikethrough: enterStrikethrough\n  },\n  exit: {\n    strikethrough: exitStrikethrough\n  }\n};\n/** @type {ToMarkdownExtension} */\n\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [{\n    character: '~',\n    inConstruct: 'phrasing'\n  }],\n  handlers: {\n    delete: handleDelete\n  }\n};\nhandleDelete.peek = peekDelete;\n/** @type {FromMarkdownHandle} */\n\nfunction enterStrikethrough(token) {\n  this.enter({\n    type: 'delete',\n    children: []\n  }, token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitStrikethrough(token) {\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\n\n\nfunction handleDelete(node, _, context) {\n  const exit = context.enter('emphasis');\n  const value = containerPhrasing(node, context, {\n    before: '~',\n    after: '~'\n  });\n  exit();\n  return '~~' + value + '~~';\n}\n/** @type {ToMarkdownHandle} */\n\n\nfunction peekDelete() {\n  return '~';\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-gfm-strikethrough/index.js"],"names":["containerPhrasing","gfmStrikethroughFromMarkdown","canContainEols","enter","strikethrough","enterStrikethrough","exit","exitStrikethrough","gfmStrikethroughToMarkdown","unsafe","character","inConstruct","handlers","delete","handleDelete","peek","peekDelete","token","type","children","node","_","context","value","before","after"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,uDAAhC;AAEA;;AACA,OAAO,MAAMC,4BAA4B,GAAG;AAC1CC,EAAAA,cAAc,EAAE,CAAC,QAAD,CAD0B;AAE1CC,EAAAA,KAAK,EAAE;AAACC,IAAAA,aAAa,EAAEC;AAAhB,GAFmC;AAG1CC,EAAAA,IAAI,EAAE;AAACF,IAAAA,aAAa,EAAEG;AAAhB;AAHoC,CAArC;AAMP;;AACA,OAAO,MAAMC,0BAA0B,GAAG;AACxCC,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,SAAS,EAAE,GAAZ;AAAiBC,IAAAA,WAAW,EAAE;AAA9B,GAAD,CADgC;AAExCC,EAAAA,QAAQ,EAAE;AAACC,IAAAA,MAAM,EAAEC;AAAT;AAF8B,CAAnC;AAKPA,YAAY,CAACC,IAAb,GAAoBC,UAApB;AAEA;;AACA,SAASX,kBAAT,CAA4BY,KAA5B,EAAmC;AACjC,OAAKd,KAAL,CAAW;AAACe,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,QAAQ,EAAE;AAA3B,GAAX,EAA2CF,KAA3C;AACD;AAED;;;AACA,SAASV,iBAAT,CAA2BU,KAA3B,EAAkC;AAChC,OAAKX,IAAL,CAAUW,KAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASH,YAAT,CAAsBM,IAAtB,EAA4BC,CAA5B,EAA+BC,OAA/B,EAAwC;AACtC,QAAMhB,IAAI,GAAGgB,OAAO,CAACnB,KAAR,CAAc,UAAd,CAAb;AACA,QAAMoB,KAAK,GAAGvB,iBAAiB,CAACoB,IAAD,EAAOE,OAAP,EAAgB;AAACE,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAhB,CAA/B;AACAnB,EAAAA,IAAI;AACJ,SAAO,OAAOiB,KAAP,GAAe,IAAtB;AACD;AAED;;;AACA,SAASP,UAAT,GAAsB;AACpB,SAAO,GAAP;AACD","sourcesContent":["/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [{character: '~', inConstruct: 'phrasing'}],\n  handlers: {delete: handleDelete}\n}\n\nhandleDelete.peek = peekDelete\n\n/** @type {FromMarkdownHandle} */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context) {\n  const exit = context.enter('emphasis')\n  const value = containerPhrasing(node, context, {before: '~', after: '~'})\n  exit()\n  return '~~' + value + '~~'\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n"]},"metadata":{},"sourceType":"module"}