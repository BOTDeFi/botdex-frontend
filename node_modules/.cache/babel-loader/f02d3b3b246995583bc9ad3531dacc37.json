{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { PoolFarmingMode, Precisions } from '@/types';\nimport { loadingDataFormatter } from '@/utils/formatters';\nexport const useTotalStaked = (pool, farmMode) => {\n  _s();\n\n  const {\n    stakingToken,\n    totalStaked\n  } = pool;\n  const {\n    totalRefineryInVault,\n    availableRefineryAmountToCompound,\n    fuelTokensAmount\n  } = useSelectVaultData();\n  const totalStakedBalance = useMemo(() => {\n    switch (farmMode) {\n      case PoolFarmingMode.auto:\n        return totalRefineryInVault;\n\n      case PoolFarmingMode.manual:\n        {\n          if (!totalStaked || !totalRefineryInVault) return null; // workaround for some cases (NOTE: can be outdated)\n          // -> if Auto Pool has stakedValue/shares and compound hasn't been taken then correct value of ManualPool (it will be negative by totalStaked RP1 in Auto Pool + ManualPool)\n          // Given: AP totalStaked = 1000; MP totalStaked = 0; available: 1000\n          // AP totalStaked: 1000; MP totalStaked: (MP) - (AP) + (available) = 0\n\n          let manualPoolTotalStakedBalance;\n\n          if (totalRefineryInVault.eq(0)) {\n            manualPoolTotalStakedBalance = availableRefineryAmountToCompound.eq(0) ? new BigNumber(totalStaked).minus(fuelTokensAmount) : totalStaked;\n          } else {\n            manualPoolTotalStakedBalance = new BigNumber(totalStaked).minus(new BigNumber(totalRefineryInVault).minus(availableRefineryAmountToCompound));\n          }\n\n          if (manualPoolTotalStakedBalance.lt(0)) return null;\n          return manualPoolTotalStakedBalance;\n        }\n\n      case PoolFarmingMode.earn:\n      default:\n        return totalStaked;\n    }\n  }, [farmMode, totalRefineryInVault, availableRefineryAmountToCompound, fuelTokensAmount, totalStaked]);\n  const totalStakedBalanceToDisplay = useMemo(() => loadingDataFormatter(totalStakedBalance, {\n    decimals: stakingToken.decimals,\n    displayDecimals: Precisions.shortToken\n  }), [totalStakedBalance, stakingToken.decimals]);\n  return {\n    totalStakedBalance,\n    totalStakedBalanceToDisplay\n  };\n};\n\n_s(useTotalStaked, \"SflU5GYjj87uZ/aCBSY3bsIxRTY=\", false, function () {\n  return [useSelectVaultData];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useTotalStaked.ts"],"names":["useMemo","BigNumber","useSelectVaultData","PoolFarmingMode","Precisions","loadingDataFormatter","useTotalStaked","pool","farmMode","stakingToken","totalStaked","totalRefineryInVault","availableRefineryAmountToCompound","fuelTokensAmount","totalStakedBalance","auto","manual","manualPoolTotalStakedBalance","eq","minus","lt","earn","totalStakedBalanceToDisplay","decimals","displayDecimals","shortToken"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAAiCC,eAAjC,EAAkDC,UAAlD,QAAoE,SAApE;AACA,SAASC,oBAAT,QAAqC,oBAArC;AAEA,OAAO,MAAMC,cAAc,GAAG,CAC5BC,IAD4B,EAE5BC,QAF4B,KAMzB;AAAA;;AACH,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAgCH,IAAtC;AACA,QAAM;AACJI,IAAAA,oBADI;AAEJC,IAAAA,iCAFI;AAGJC,IAAAA;AAHI,MAIFX,kBAAkB,EAJtB;AAMA,QAAMY,kBAAkB,GAAGd,OAAO,CAAC,MAAM;AACvC,YAAQQ,QAAR;AACE,WAAKL,eAAe,CAACY,IAArB;AACE,eAAOJ,oBAAP;;AACF,WAAKR,eAAe,CAACa,MAArB;AAA6B;AAC3B,cAAI,CAACN,WAAD,IAAgB,CAACC,oBAArB,EAA2C,OAAO,IAAP,CADhB,CAE3B;AACA;AACA;AACA;;AACA,cAAIM,4BAAJ;;AAEA,cAAIN,oBAAoB,CAACO,EAArB,CAAwB,CAAxB,CAAJ,EAAgC;AAC9BD,YAAAA,4BAA4B,GAAGL,iCAAiC,CAACM,EAAlC,CAAqC,CAArC,IAC3B,IAAIjB,SAAJ,CAAcS,WAAd,EAA2BS,KAA3B,CAAiCN,gBAAjC,CAD2B,GAE3BH,WAFJ;AAGD,WAJD,MAIO;AACLO,YAAAA,4BAA4B,GAAG,IAAIhB,SAAJ,CAAcS,WAAd,EAA2BS,KAA3B,CAC7B,IAAIlB,SAAJ,CAAcU,oBAAd,EAAoCQ,KAApC,CAA0CP,iCAA1C,CAD6B,CAA/B;AAGD;;AAED,cAAIK,4BAA4B,CAACG,EAA7B,CAAgC,CAAhC,CAAJ,EAAwC,OAAO,IAAP;AACxC,iBAAOH,4BAAP;AACD;;AACD,WAAKd,eAAe,CAACkB,IAArB;AACA;AACE,eAAOX,WAAP;AA1BJ;AA4BD,GA7BiC,EA6B/B,CACDF,QADC,EAEDG,oBAFC,EAGDC,iCAHC,EAIDC,gBAJC,EAKDH,WALC,CA7B+B,CAAlC;AAqCA,QAAMY,2BAA2B,GAAGtB,OAAO,CACzC,MACEK,oBAAoB,CAACS,kBAAD,EAAqB;AACvCS,IAAAA,QAAQ,EAAEd,YAAY,CAACc,QADgB;AAEvCC,IAAAA,eAAe,EAAEpB,UAAU,CAACqB;AAFW,GAArB,CAFmB,EAMzC,CAACX,kBAAD,EAAqBL,YAAY,CAACc,QAAlC,CANyC,CAA3C;AASA,SAAO;AACLT,IAAAA,kBADK;AAELQ,IAAAA;AAFK,GAAP;AAID,CAhEM;;GAAMhB,c;UAYPJ,kB","sourcesContent":["import { useMemo } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\n\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { IPoolFarmingMode, Pool, PoolFarmingMode, Precisions } from '@/types';\nimport { loadingDataFormatter } from '@/utils/formatters';\n\nexport const useTotalStaked = (\n  pool: Pool,\n  farmMode: IPoolFarmingMode,\n): {\n  totalStakedBalance: BigNumber | null | undefined;\n  totalStakedBalanceToDisplay: string | number;\n} => {\n  const { stakingToken, totalStaked } = pool;\n  const {\n    totalRefineryInVault,\n    availableRefineryAmountToCompound,\n    fuelTokensAmount,\n  } = useSelectVaultData();\n\n  const totalStakedBalance = useMemo(() => {\n    switch (farmMode) {\n      case PoolFarmingMode.auto:\n        return totalRefineryInVault;\n      case PoolFarmingMode.manual: {\n        if (!totalStaked || !totalRefineryInVault) return null;\n        // workaround for some cases (NOTE: can be outdated)\n        // -> if Auto Pool has stakedValue/shares and compound hasn't been taken then correct value of ManualPool (it will be negative by totalStaked RP1 in Auto Pool + ManualPool)\n        // Given: AP totalStaked = 1000; MP totalStaked = 0; available: 1000\n        // AP totalStaked: 1000; MP totalStaked: (MP) - (AP) + (available) = 0\n        let manualPoolTotalStakedBalance: BigNumber;\n\n        if (totalRefineryInVault.eq(0)) {\n          manualPoolTotalStakedBalance = availableRefineryAmountToCompound.eq(0)\n            ? new BigNumber(totalStaked).minus(fuelTokensAmount)\n            : totalStaked;\n        } else {\n          manualPoolTotalStakedBalance = new BigNumber(totalStaked).minus(\n            new BigNumber(totalRefineryInVault).minus(availableRefineryAmountToCompound),\n          );\n        }\n\n        if (manualPoolTotalStakedBalance.lt(0)) return null;\n        return manualPoolTotalStakedBalance;\n      }\n      case PoolFarmingMode.earn:\n      default:\n        return totalStaked;\n    }\n  }, [\n    farmMode,\n    totalRefineryInVault,\n    availableRefineryAmountToCompound,\n    fuelTokensAmount,\n    totalStaked,\n  ]);\n\n  const totalStakedBalanceToDisplay = useMemo(\n    () =>\n      loadingDataFormatter(totalStakedBalance, {\n        decimals: stakingToken.decimals,\n        displayDecimals: Precisions.shortToken,\n      }),\n    [totalStakedBalance, stakingToken.decimals],\n  );\n\n  return {\n    totalStakedBalance,\n    totalStakedBalanceToDisplay,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}