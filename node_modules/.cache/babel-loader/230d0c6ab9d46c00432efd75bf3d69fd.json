{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js/bignumber';\nimport { useMst } from '@/store';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { getBalanceAmount } from '@/utils/formatters';\nimport { clog } from '@/utils/logger';\nexport const useFarmFromLpSymbol = lpSymbol => {\n  _s();\n\n  const {\n    farms\n  } = useMst();\n  const [farm] = farms.data.filter(f => f.lpSymbol === lpSymbol);\n  return farm;\n};\n\n_s(useFarmFromLpSymbol, \"+27KqVw+0dp5ybKnv56eV72lDYQ=\", false, function () {\n  return [useMst];\n});\n\nexport const useFarmFromPid = pid => {\n  _s2();\n\n  const {\n    farms\n  } = useMst();\n  const [farm] = farms.data.filter(f => f.pid === pid);\n  return farm;\n}; // Return the base token price for a farm, from a given pid\n\n_s2(useFarmFromPid, \"+27KqVw+0dp5ybKnv56eV72lDYQ=\", false, function () {\n  return [useMst];\n});\n\nexport const useBusdPriceFromPid = pid => {\n  _s3();\n\n  var _farm$token;\n\n  const farm = useFarmFromPid(pid);\n\n  if ((_farm$token = farm.token) === null || _farm$token === void 0 ? void 0 : _farm$token.busdPrice) {\n    return new BigNumber(farm.token.busdPrice);\n  }\n\n  return BIG_ZERO;\n};\n\n_s3(useBusdPriceFromPid, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useLpTokenPrice = symbol => {\n  _s4();\n\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal || BIG_ZERO); // Double it to get overall value in LP\n\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2); // Divide total value of all tokens, by the number of LP tokens\n\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n    clog('TEST1', farmTokenPriceInUsd, farm.tokenAmountTotal, overallValueOfAllTokensInFarm);\n  }\n\n  return lpTokenPrice;\n};\n\n_s4(useLpTokenPrice, \"+hyoswFTXS+XugOwGpb7EaPFmo4=\", false, function () {\n  return [useFarmFromLpSymbol, useBusdPriceFromPid];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useFarmsPrices.ts"],"names":["BigNumber","useMst","BIG_ZERO","getBalanceAmount","clog","useFarmFromLpSymbol","lpSymbol","farms","farm","data","filter","f","useFarmFromPid","pid","useBusdPriceFromPid","token","busdPrice","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AAEA,SAASC,MAAT,QAAuB,SAAvB;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,QAAD,IAA4B;AAAA;;AAC7D,QAAM;AAAEC,IAAAA;AAAF,MAAYN,MAAM,EAAxB;AACA,QAAM,CAACO,IAAD,IAASD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAACL,QAAF,KAAeA,QAAxC,CAAf;AACA,SAAOE,IAAP;AACD,CAJM;;GAAMH,mB;UACOJ,M;;;AAKpB,OAAO,MAAMW,cAAc,GAAIC,GAAD,IAAuB;AAAA;;AACnD,QAAM;AAAEN,IAAAA;AAAF,MAAYN,MAAM,EAAxB;AACA,QAAM,CAACO,IAAD,IAASD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAACE,GAAF,KAAUA,GAAnC,CAAf;AACA,SAAOL,IAAP;AACD,CAJM,C,CAMP;;IANaI,c;UACOX,M;;;AAMpB,OAAO,MAAMa,mBAAmB,GAAID,GAAD,IAA4B;AAAA;;AAAA;;AAC7D,QAAML,IAAI,GAAGI,cAAc,CAACC,GAAD,CAA3B;;AACA,qBAAIL,IAAI,CAACO,KAAT,gDAAI,YAAYC,SAAhB,EAA2B;AACzB,WAAO,IAAIhB,SAAJ,CAAcQ,IAAI,CAACO,KAAL,CAAWC,SAAzB,CAAP;AACD;;AACD,SAAOd,QAAP;AACD,CANM;;IAAMY,mB;UACEF,c;;;AAOf,OAAO,MAAMK,eAAe,GAAIC,MAAD,IAAoB;AAAA;;AACjD,QAAMV,IAAI,GAAGH,mBAAmB,CAACa,MAAD,CAAhC;AACA,QAAMC,mBAAmB,GAAGL,mBAAmB,CAACN,IAAI,CAACK,GAAN,CAA/C;AACA,MAAIO,YAAY,GAAGlB,QAAnB;;AAEA,MAAIM,IAAI,CAACa,aAAL,IAAsBb,IAAI,CAACc,mBAA/B,EAAoD;AAClD;AACA,UAAMC,sBAAsB,GAAGJ,mBAAmB,CAACK,KAApB,CAA0BhB,IAAI,CAACiB,gBAAL,IAAyBvB,QAAnD,CAA/B,CAFkD,CAGlD;;AACA,UAAMwB,6BAA6B,GAAGH,sBAAsB,CAACC,KAAvB,CAA6B,CAA7B,CAAtC,CAJkD,CAKlD;;AACA,UAAMG,aAAa,GAAGxB,gBAAgB,CAAC,IAAIH,SAAJ,CAAcQ,IAAI,CAACa,aAAnB,CAAD,CAAtC;AACAD,IAAAA,YAAY,GAAGM,6BAA6B,CAACE,GAA9B,CAAkCD,aAAlC,CAAf;AAEAvB,IAAAA,IAAI,CAAC,OAAD,EAAUe,mBAAV,EAA+BX,IAAI,CAACiB,gBAApC,EAAsDC,6BAAtD,CAAJ;AACD;;AAED,SAAON,YAAP;AACD,CAlBM;;IAAMH,e;UACEZ,mB,EACeS,mB","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\n\nimport { useMst } from '@/store';\nimport { Farm } from '@/types';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { getBalanceAmount } from '@/utils/formatters';\nimport { clog } from '@/utils/logger';\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\n  const { farms } = useMst();\n  const [farm] = farms.data.filter((f) => f.lpSymbol === lpSymbol);\n  return farm as Farm;\n};\n\nexport const useFarmFromPid = (pid: number): Farm => {\n  const { farms } = useMst();\n  const [farm] = farms.data.filter((f) => f.pid === pid);\n  return farm as Farm;\n};\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid);\n  if (farm.token?.busdPrice) {\n    return new BigNumber(farm.token.busdPrice);\n  }\n  return BIG_ZERO;\n};\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal || BIG_ZERO);\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2);\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n\n    clog('TEST1', farmTokenPriceInUsd, farm.tokenAmountTotal, overallValueOfAllTokensInFarm);\n  }\n\n  return lpTokenPrice;\n};\n"]},"metadata":{},"sourceType":"module"}