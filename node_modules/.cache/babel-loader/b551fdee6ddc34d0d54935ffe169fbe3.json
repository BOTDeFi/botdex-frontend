{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var listRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]\\s|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n      emptyListRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]|[*+-]|(\\d+)[.)])(\\s*)$/,\n      unorderedListRE = /[*+-]\\s/;\n\n  CodeMirror.commands.newlineAndIndentContinueMarkdownList = function (cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(),\n        replacements = [];\n\n    for (var i = 0; i < ranges.length; i++) {\n      var pos = ranges[i].head; // If we're not in Markdown mode, fall back to normal newlineAndIndent\n\n      var eolState = cm.getStateAfter(pos.line);\n      var inner = CodeMirror.innerMode(cm.getMode(), eolState);\n\n      if (inner.mode.name !== \"markdown\") {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      } else {\n        eolState = inner.state;\n      }\n\n      var inList = eolState.list !== false;\n      var inQuote = eolState.quote !== 0;\n      var line = cm.getLine(pos.line),\n          match = listRE.exec(line);\n      var cursorBeforeBullet = /^\\s*$/.test(line.slice(0, pos.ch));\n\n      if (!ranges[i].empty() || !inList && !inQuote || !match || cursorBeforeBullet) {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      }\n\n      if (emptyListRE.test(line)) {\n        var endOfQuote = inQuote && />\\s*$/.test(line);\n        var endOfList = !/>\\s*$/.test(line);\n        if (endOfQuote || endOfList) cm.replaceRange(\"\", {\n          line: pos.line,\n          ch: 0\n        }, {\n          line: pos.line,\n          ch: pos.ch + 1\n        });\n        replacements[i] = \"\\n\";\n      } else {\n        var indent = match[1],\n            after = match[5];\n        var numbered = !(unorderedListRE.test(match[2]) || match[2].indexOf(\">\") >= 0);\n        var bullet = numbered ? parseInt(match[3], 10) + 1 + match[4] : match[2].replace(\"x\", \" \");\n        replacements[i] = \"\\n\" + indent + bullet + after;\n        if (numbered) incrementRemainingMarkdownListNumbers(cm, pos);\n      }\n    }\n\n    cm.replaceSelections(replacements);\n  }; // Auto-updating Markdown list numbers when a new item is added to the\n  // middle of a list\n\n\n  function incrementRemainingMarkdownListNumbers(cm, pos) {\n    var startLine = pos.line,\n        lookAhead = 0,\n        skipCount = 0;\n    var startItem = listRE.exec(cm.getLine(startLine)),\n        startIndent = startItem[1];\n\n    do {\n      lookAhead += 1;\n      var nextLineNumber = startLine + lookAhead;\n      var nextLine = cm.getLine(nextLineNumber),\n          nextItem = listRE.exec(nextLine);\n\n      if (nextItem) {\n        var nextIndent = nextItem[1];\n        var newNumber = parseInt(startItem[3], 10) + lookAhead - skipCount;\n        var nextNumber = parseInt(nextItem[3], 10),\n            itemNumber = nextNumber;\n\n        if (startIndent === nextIndent && !isNaN(nextNumber)) {\n          if (newNumber === nextNumber) itemNumber = nextNumber + 1;\n          if (newNumber > nextNumber) itemNumber = newNumber + 1;\n          cm.replaceRange(nextLine.replace(listRE, nextIndent + itemNumber + nextItem[4] + nextItem[5]), {\n            line: nextLineNumber,\n            ch: 0\n          }, {\n            line: nextLineNumber,\n            ch: nextLine.length\n          });\n        } else {\n          if (startIndent.length > nextIndent.length) return; // This doesn't run if the next line immediately indents, as it is\n          // not clear of the users intention (new indented item or same level)\n\n          if (startIndent.length < nextIndent.length && lookAhead === 1) return;\n          skipCount += 1;\n        }\n      }\n    } while (nextItem);\n  }\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/codemirror/addon/edit/continuelist.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","listRE","emptyListRE","unorderedListRE","commands","newlineAndIndentContinueMarkdownList","cm","getOption","Pass","ranges","listSelections","replacements","i","length","pos","head","eolState","getStateAfter","line","inner","innerMode","getMode","mode","name","execCommand","state","inList","list","inQuote","quote","getLine","match","exec","cursorBeforeBullet","test","slice","ch","empty","endOfQuote","endOfList","replaceRange","indent","after","numbered","indexOf","bullet","parseInt","replace","incrementRemainingMarkdownListNumbers","replaceSelections","startLine","lookAhead","skipCount","startItem","startIndent","nextLineNumber","nextLine","nextItem","nextIndent","newNumber","nextNumber","itemNumber","isNaN"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var listRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]\\s|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n      emptyListRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]|[*+-]|(\\d+)[.)])(\\s*)$/,\n      unorderedListRE = /[*+-]\\s/;\n\n  CodeMirror.commands.newlineAndIndentContinueMarkdownList = function(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var pos = ranges[i].head;\n\n      // If we're not in Markdown mode, fall back to normal newlineAndIndent\n      var eolState = cm.getStateAfter(pos.line);\n      var inner = CodeMirror.innerMode(cm.getMode(), eolState);\n      if (inner.mode.name !== \"markdown\") {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      } else {\n        eolState = inner.state;\n      }\n\n      var inList = eolState.list !== false;\n      var inQuote = eolState.quote !== 0;\n\n      var line = cm.getLine(pos.line), match = listRE.exec(line);\n      var cursorBeforeBullet = /^\\s*$/.test(line.slice(0, pos.ch));\n      if (!ranges[i].empty() || (!inList && !inQuote) || !match || cursorBeforeBullet) {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      }\n      if (emptyListRE.test(line)) {\n        var endOfQuote = inQuote && />\\s*$/.test(line)\n        var endOfList = !/>\\s*$/.test(line)\n        if (endOfQuote || endOfList) cm.replaceRange(\"\", {\n          line: pos.line, ch: 0\n        }, {\n          line: pos.line, ch: pos.ch + 1\n        });\n        replacements[i] = \"\\n\";\n      } else {\n        var indent = match[1], after = match[5];\n        var numbered = !(unorderedListRE.test(match[2]) || match[2].indexOf(\">\") >= 0);\n        var bullet = numbered ? (parseInt(match[3], 10) + 1) + match[4] : match[2].replace(\"x\", \" \");\n        replacements[i] = \"\\n\" + indent + bullet + after;\n\n        if (numbered) incrementRemainingMarkdownListNumbers(cm, pos);\n      }\n    }\n\n    cm.replaceSelections(replacements);\n  };\n\n  // Auto-updating Markdown list numbers when a new item is added to the\n  // middle of a list\n  function incrementRemainingMarkdownListNumbers(cm, pos) {\n    var startLine = pos.line, lookAhead = 0, skipCount = 0;\n    var startItem = listRE.exec(cm.getLine(startLine)), startIndent = startItem[1];\n\n    do {\n      lookAhead += 1;\n      var nextLineNumber = startLine + lookAhead;\n      var nextLine = cm.getLine(nextLineNumber), nextItem = listRE.exec(nextLine);\n\n      if (nextItem) {\n        var nextIndent = nextItem[1];\n        var newNumber = (parseInt(startItem[3], 10) + lookAhead - skipCount);\n        var nextNumber = (parseInt(nextItem[3], 10)), itemNumber = nextNumber;\n\n        if (startIndent === nextIndent && !isNaN(nextNumber)) {\n          if (newNumber === nextNumber) itemNumber = nextNumber + 1;\n          if (newNumber > nextNumber) itemNumber = newNumber + 1;\n          cm.replaceRange(\n            nextLine.replace(listRE, nextIndent + itemNumber + nextItem[4] + nextItem[5]),\n          {\n            line: nextLineNumber, ch: 0\n          }, {\n            line: nextLineNumber, ch: nextLine.length\n          });\n        } else {\n          if (startIndent.length > nextIndent.length) return;\n          // This doesn't run if the next line immediately indents, as it is\n          // not clear of the users intention (new indented item or same level)\n          if ((startIndent.length < nextIndent.length) && (lookAhead === 1)) return;\n          skipCount += 1;\n        }\n      }\n    } while (nextItem);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}