{"ast":null,"code":"/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n */\nimport { footnoteReference } from './footnote-reference.js';\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\n\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById;\n  const footnoteOrder = h.footnoteOrder;\n  let no = 1;\n\n  while (no in footnoteById) no++;\n\n  const identifier = String(no); // No need to check if `identifier` exists in `footnoteOrder`, it’s guaranteed\n  // to not exist because we just generated it.\n\n  footnoteOrder.push(identifier);\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{\n      type: 'paragraph',\n      children: node.children\n    }],\n    position: node.position\n  };\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  });\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-hast/lib/handlers/footnote.js"],"names":["footnoteReference","footnote","h","node","footnoteById","footnoteOrder","no","identifier","String","push","type","children","position"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,yBAAhC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,IAArB,EAA2B;AAChC,QAAMC,YAAY,GAAGF,CAAC,CAACE,YAAvB;AACA,QAAMC,aAAa,GAAGH,CAAC,CAACG,aAAxB;AACA,MAAIC,EAAE,GAAG,CAAT;;AAEA,SAAOA,EAAE,IAAIF,YAAb,EAA2BE,EAAE;;AAE7B,QAAMC,UAAU,GAAGC,MAAM,CAACF,EAAD,CAAzB,CAPgC,CAShC;AACA;;AACAD,EAAAA,aAAa,CAACI,IAAd,CAAmBF,UAAnB;AAEAH,EAAAA,YAAY,CAACG,UAAD,CAAZ,GAA2B;AACzBG,IAAAA,IAAI,EAAE,oBADmB;AAEzBH,IAAAA,UAFyB;AAGzBI,IAAAA,QAAQ,EAAE,CAAC;AAACD,MAAAA,IAAI,EAAE,WAAP;AAAoBC,MAAAA,QAAQ,EAAER,IAAI,CAACQ;AAAnC,KAAD,CAHe;AAIzBC,IAAAA,QAAQ,EAAET,IAAI,CAACS;AAJU,GAA3B;AAOA,SAAOZ,iBAAiB,CAACE,CAAD,EAAI;AAC1BQ,IAAAA,IAAI,EAAE,mBADoB;AAE1BH,IAAAA,UAF0B;AAG1BK,IAAAA,QAAQ,EAAET,IAAI,CAACS;AAHW,GAAJ,CAAxB;AAKD","sourcesContent":["/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  const footnoteOrder = h.footnoteOrder\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  // No need to check if `identifier` exists in `footnoteOrder`, it’s guaranteed\n  // to not exist because we just generated it.\n  footnoteOrder.push(identifier)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n"]},"metadata":{},"sourceType":"module"}