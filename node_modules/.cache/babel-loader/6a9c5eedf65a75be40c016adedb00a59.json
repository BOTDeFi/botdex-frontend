{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/DaoProposal/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Form as FormAntd } from 'antd';\nimport { observer } from 'mobx-react-lite';\nimport Button from '@/components/atoms/Button';\nimport ReactMarkdown from '@/components/molecules/ReactMarkdown';\nimport EasyMde from '@/components/organisms/EasyMde';\nimport { DaoSection, DaoWrapper } from '@/components/sections/Dao';\nimport { ActionsForm, ChoicesForm, TitleForm } from '@/components/sections/DaoProposal';\nimport { getMomentMergedDateTime } from '@/components/sections/DaoProposal/helpers';\nimport { useCreateProposal } from '@/hooks/dao/useCreateProposal';\nimport { hasCurrentBalance, requestHasCurrentBalance, useGetCurrentBalance } from '@/services/api/refinery-finance-pairs';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { useMst } from '@/store';\nimport { debounce } from '@/utils/debounce';\nimport 'antd/lib/form/style/css';\nimport 'antd/lib/time-picker/style/css';\nimport 'antd/lib/date-picker/style/css';\nimport './DaoProposal.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst extractDataForProposalFromForms = forms => {\n  const [{\n    title\n  },, // has empty data, so skip it\n  {\n    choices\n  }, {\n    actionsForm_start_date,\n    actionsForm_start_time,\n    actionsForm_end_date,\n    actionsForm_end_time\n  }] = forms;\n  const start = getMomentMergedDateTime(actionsForm_start_date, actionsForm_start_time).unix();\n  const end = getMomentMergedDateTime(actionsForm_end_date, actionsForm_end_time).unix();\n  return {\n    name: title,\n    choices,\n    start,\n    end\n  };\n};\n\nconst ConnectWalletButton = () => {\n  _s();\n\n  const {\n    connect\n  } = useWalletConnectorContext();\n  return /*#__PURE__*/_jsxDEV(Button, {\n    className: \"actions-section__submit\",\n    onClick: connect,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-white text-smd text-bold\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConnectWalletButton, \"VGoveYuwlRUU+Quyq2xmsUbgEPg=\", false, function () {\n  return [useWalletConnectorContext];\n});\n\n_c = ConnectWalletButton;\nconst DaoProposal = observer(_c2 = _s2(() => {\n  _s2();\n\n  const history = useHistory();\n  const [titleForm] = FormAntd.useForm();\n  const [contentForm] = FormAntd.useForm();\n  const [choicesForm] = FormAntd.useForm();\n  const [actionsForm] = FormAntd.useForm();\n  const forms = [titleForm, contentForm, choicesForm, actionsForm];\n  const {\n    user\n  } = useMst();\n  const [isFormsValidated, setFormsValidated] = useState(false);\n  const [editorPlainText, setEditorPlainText] = useState('');\n\n  const handleEasyMdeChange = text => {\n    validateForms();\n    setEditorPlainText(text);\n  };\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    createProposal\n  } = useCreateProposal({\n    onSuccessTx: ({\n      ipfsHash\n    }) => {\n      // Redirect user to newly created proposal page\n      history.push(`/dao/${ipfsHash}`);\n    },\n    onStartTx: () => setPendingTx(true),\n    onEndTx: () => setPendingTx(false)\n  });\n\n  const onSubmit = async () => {\n    // In case when user entered CORRECT data, and then, makes it WRONG (but function is debounced/throttled)\n    const isFormValid = await validateFormsAsync();\n\n    if (isFormValid) {\n      const formsValidationResult = forms.map(form => form.getFieldsValue());\n      const proposalData = { ...extractDataForProposalFromForms(formsValidationResult),\n        body: editorPlainText\n      };\n      createProposal(proposalData);\n    } else {\n      setFormsValidated(false);\n    }\n  };\n\n  const getFormsValidationPromises = () => {\n    return Object.values(forms).map(form => {\n      // validate only fields were touched\n      // contentForm is never touched so, anyway explicitly call its form.validateFields()\n      if (!form.isFieldsTouched() && form !== contentForm) {\n        return Promise.reject(new Error('Form fields are never touched'));\n      }\n\n      return form.validateFields();\n    });\n  };\n  /**\n   * It is async/await version of validateForms, also with useState, to validate like synchronously.\n   */\n\n\n  const validateFormsAsync = async () => {\n    const formsValidationPromises = getFormsValidationPromises();\n\n    try {\n      await Promise.all(formsValidationPromises); // if form fields are validated without errors, then send requests to check votingPower\n\n      const currentBalance = await requestHasCurrentBalance(user.address, client);\n      if (!currentBalance) throw new Error('No balance');\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  const validateForms = debounce(() => {\n    const formsValidationPromises = getFormsValidationPromises();\n    Promise.all(formsValidationPromises).then(() => {\n      setFormsValidated(true);\n    }).then(() => {\n      // if form fields are validated without errors, then send requests to check votingPower\n      getNewCurrentBalance();\n    }).catch(() => {\n      setFormsValidated(false);\n    });\n  }, 1500, false);\n  const {\n    getCurrentBalance,\n    options: [, {\n      loading: currentBalanceLoading,\n      error: currentBalanceError,\n      data: currentBalance,\n      client\n    }]\n  } = useGetCurrentBalance({\n    fetchPolicy: 'network-only'\n  });\n  const getNewCurrentBalance = useCallback(() => {\n    if (user.address) {\n      getCurrentBalance(user.address);\n    }\n  }, [user.address, getCurrentBalance]);\n  useEffect(() => {\n    getNewCurrentBalance();\n  }, [getNewCurrentBalance]);\n  const hasBalance = hasCurrentBalance(currentBalanceError, currentBalance);\n  const isAbleToPublish = hasBalance && isFormsValidated && !pendingTx;\n  const isProcessingValidation = currentBalanceLoading || pendingTx;\n  return /*#__PURE__*/_jsxDEV(DaoWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dao-proposal__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dao-proposal__column\",\n        children: [/*#__PURE__*/_jsxDEV(DaoSection, {\n          className: \"dao-proposal__section title-section\",\n          title: \"Title\",\n          customClasses: {\n            body: 'dao-proposal__section-body'\n          },\n          children: /*#__PURE__*/_jsxDEV(TitleForm, {\n            form: titleForm,\n            validateForms: validateForms,\n            fieldClassName: \"title-section__field\",\n            inputClassName: \"title-section__input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DaoSection, {\n          className: \"dao-proposal__section\",\n          title: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dao-proposal__section-header-tip text-norm text-smd\",\n              children: \"Tip: write in Markdown!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true),\n          customClasses: {\n            body: 'dao-proposal__section-body'\n          },\n          children: /*#__PURE__*/_jsxDEV(FormAntd, {\n            name: \"contentForm\",\n            form: contentForm,\n            layout: \"vertical\",\n            children: /*#__PURE__*/_jsxDEV(FormAntd.Item, {\n              className: \"content-section__field\",\n              name: \"content\",\n              rules: [{\n                validator: () => {\n                  if (editorPlainText.trim().length) {\n                    return Promise.resolve();\n                  }\n\n                  return Promise.reject(new Error('Content must not be empty'));\n                }\n              }],\n              children: /*#__PURE__*/_jsxDEV(EasyMde, {\n                id: \"body\",\n                name: \"body\",\n                onTextChange: handleEasyMdeChange,\n                value: editorPlainText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), editorPlainText && /*#__PURE__*/_jsxDEV(DaoSection, {\n          className: \"dao-proposal__section\",\n          title: \"Preview\",\n          customClasses: {\n            body: 'dao-proposal__section-body'\n          },\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            className: \"text-yellow\",\n            children: editorPlainText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DaoSection, {\n          className: \"dao-proposal__section\",\n          title: \"Choices\",\n          customClasses: {\n            body: 'dao-proposal__section-body'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChoicesForm, {\n            form: choicesForm,\n            validateForms: validateForms,\n            inputClassName: \"choices-section__input\",\n            inputPostfixClassName: \"choices-section__input-postfix\",\n            formErrorsClassName: \"choices-section__form-errors\",\n            buttonClassName: \"choices-section__button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dao-proposal__column\",\n        children: /*#__PURE__*/_jsxDEV(DaoSection, {\n          className: \"dao-proposal__section\",\n          title: \"Actions\",\n          children: [/*#__PURE__*/_jsxDEV(ActionsForm, {\n            form: actionsForm,\n            validateForms: validateForms,\n            snapshotClassName: \"actions-section__snapshot\",\n            snapshotTitleClassName: \"actions-section__snapshot-title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), !user.address ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            className: \"actions-section__submit\",\n            loading: isProcessingValidation,\n            disabled: !isAbleToPublish,\n            onClick: isAbleToPublish ? onSubmit : undefined,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-white text-smd text-bold\",\n              children: \"Publish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), !hasBalance && !currentBalanceLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              marginTop: 10\n            },\n            children: \"You need voting power to publish a proposal.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}, \"vIUrBD5pb/Zk8P12f+ELPd6mIDw=\", false, function () {\n  return [useHistory, FormAntd.useForm, FormAntd.useForm, FormAntd.useForm, FormAntd.useForm, useMst, useCreateProposal, useGetCurrentBalance];\n}));\n_c3 = DaoProposal;\nexport default DaoProposal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectWalletButton\");\n$RefreshReg$(_c2, \"DaoProposal$observer\");\n$RefreshReg$(_c3, \"DaoProposal\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/DaoProposal/index.tsx"],"names":["React","useCallback","useEffect","useState","useHistory","Form","FormAntd","observer","Button","ReactMarkdown","EasyMde","DaoSection","DaoWrapper","ActionsForm","ChoicesForm","TitleForm","getMomentMergedDateTime","useCreateProposal","hasCurrentBalance","requestHasCurrentBalance","useGetCurrentBalance","useWalletConnectorContext","useMst","debounce","extractDataForProposalFromForms","forms","title","choices","actionsForm_start_date","actionsForm_start_time","actionsForm_end_date","actionsForm_end_time","start","unix","end","name","ConnectWalletButton","connect","DaoProposal","history","titleForm","useForm","contentForm","choicesForm","actionsForm","user","isFormsValidated","setFormsValidated","editorPlainText","setEditorPlainText","handleEasyMdeChange","text","validateForms","pendingTx","setPendingTx","createProposal","onSuccessTx","ipfsHash","push","onStartTx","onEndTx","onSubmit","isFormValid","validateFormsAsync","formsValidationResult","map","form","getFieldsValue","proposalData","body","getFormsValidationPromises","Object","values","isFieldsTouched","Promise","reject","Error","validateFields","formsValidationPromises","all","currentBalance","address","client","err","then","getNewCurrentBalance","catch","getCurrentBalance","options","loading","currentBalanceLoading","error","currentBalanceError","data","fetchPolicy","hasBalance","isAbleToPublish","isProcessingValidation","validator","trim","length","resolve","undefined","color","marginTop"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Form as FormAntd } from 'antd';\nimport { observer } from 'mobx-react-lite';\n\nimport Button from '@/components/atoms/Button';\nimport ReactMarkdown from '@/components/molecules/ReactMarkdown';\nimport EasyMde from '@/components/organisms/EasyMde';\nimport { DaoSection, DaoWrapper } from '@/components/sections/Dao';\nimport { ActionsForm, ChoicesForm, TitleForm } from '@/components/sections/DaoProposal';\nimport { getMomentMergedDateTime } from '@/components/sections/DaoProposal/helpers';\nimport { useCreateProposal } from '@/hooks/dao/useCreateProposal';\nimport {\n  hasCurrentBalance,\n  requestHasCurrentBalance,\n  useGetCurrentBalance,\n} from '@/services/api/refinery-finance-pairs';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { useMst } from '@/store';\nimport { debounce } from '@/utils/debounce';\n\nimport 'antd/lib/form/style/css';\nimport 'antd/lib/time-picker/style/css';\nimport 'antd/lib/date-picker/style/css';\n\nimport './DaoProposal.scss';\n\nconst extractDataForProposalFromForms = (forms: Array<any>) => {\n  const [\n    { title }, // has empty data, so skip it\n    ,\n    { choices },\n    { actionsForm_start_date, actionsForm_start_time, actionsForm_end_date, actionsForm_end_time },\n  ] = forms;\n\n  const start = getMomentMergedDateTime(actionsForm_start_date, actionsForm_start_time).unix();\n  const end = getMomentMergedDateTime(actionsForm_end_date, actionsForm_end_time).unix();\n\n  return {\n    name: title,\n    choices,\n    start,\n    end,\n  };\n};\n\nconst ConnectWalletButton: React.FC = () => {\n  const { connect } = useWalletConnectorContext();\n  return (\n    <Button className=\"actions-section__submit\" onClick={connect}>\n      <span className=\"text-white text-smd text-bold\">Connect Wallet</span>\n    </Button>\n  );\n};\n\nconst DaoProposal: React.FC = observer(() => {\n  const history = useHistory();\n  const [titleForm] = FormAntd.useForm();\n  const [contentForm] = FormAntd.useForm();\n  const [choicesForm] = FormAntd.useForm();\n  const [actionsForm] = FormAntd.useForm();\n  const forms = [titleForm, contentForm, choicesForm, actionsForm];\n\n  const { user } = useMst();\n\n  const [isFormsValidated, setFormsValidated] = useState(false);\n  const [editorPlainText, setEditorPlainText] = useState('');\n\n  const handleEasyMdeChange = (text: string) => {\n    validateForms();\n    setEditorPlainText(text);\n  };\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const { createProposal } = useCreateProposal({\n    onSuccessTx: ({ ipfsHash }) => {\n      // Redirect user to newly created proposal page\n      history.push(`/dao/${ipfsHash}`);\n    },\n    onStartTx: () => setPendingTx(true),\n    onEndTx: () => setPendingTx(false),\n  });\n\n  const onSubmit = async () => {\n    // In case when user entered CORRECT data, and then, makes it WRONG (but function is debounced/throttled)\n    const isFormValid = await validateFormsAsync();\n    if (isFormValid) {\n      const formsValidationResult = forms.map((form) => form.getFieldsValue());\n      const proposalData = {\n        ...extractDataForProposalFromForms(formsValidationResult),\n        body: editorPlainText,\n      };\n      createProposal(proposalData);\n    } else {\n      setFormsValidated(false);\n    }\n  };\n\n  const getFormsValidationPromises = () => {\n    return Object.values(forms).map((form) => {\n      // validate only fields were touched\n      // contentForm is never touched so, anyway explicitly call its form.validateFields()\n      if (!form.isFieldsTouched() && form !== contentForm) {\n        return Promise.reject(new Error('Form fields are never touched'));\n      }\n      return form.validateFields();\n    });\n  };\n\n  /**\n   * It is async/await version of validateForms, also with useState, to validate like synchronously.\n   */\n  const validateFormsAsync = async () => {\n    const formsValidationPromises = getFormsValidationPromises();\n    try {\n      await Promise.all(formsValidationPromises);\n      // if form fields are validated without errors, then send requests to check votingPower\n      const currentBalance = await requestHasCurrentBalance(user.address, client);\n      if (!currentBalance) throw new Error('No balance');\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n  const validateForms = debounce(\n    () => {\n      const formsValidationPromises = getFormsValidationPromises();\n      Promise.all(formsValidationPromises)\n        .then(() => {\n          setFormsValidated(true);\n        })\n        .then(() => {\n          // if form fields are validated without errors, then send requests to check votingPower\n          getNewCurrentBalance();\n        })\n        .catch(() => {\n          setFormsValidated(false);\n        });\n    },\n    1500,\n    false,\n  );\n\n  const {\n    getCurrentBalance,\n    options: [\n      ,\n      { loading: currentBalanceLoading, error: currentBalanceError, data: currentBalance, client },\n    ],\n  } = useGetCurrentBalance({ fetchPolicy: 'network-only' });\n\n  const getNewCurrentBalance = useCallback(() => {\n    if (user.address) {\n      getCurrentBalance(user.address);\n    }\n  }, [user.address, getCurrentBalance]);\n\n  useEffect(() => {\n    getNewCurrentBalance();\n  }, [getNewCurrentBalance]);\n\n  const hasBalance = hasCurrentBalance(currentBalanceError, currentBalance);\n  const isAbleToPublish = hasBalance && isFormsValidated && !pendingTx;\n  const isProcessingValidation = currentBalanceLoading || pendingTx;\n\n  return (\n    <DaoWrapper>\n      <div className=\"dao-proposal__wrapper\">\n        <div className=\"dao-proposal__column\">\n          <DaoSection\n            className=\"dao-proposal__section title-section\"\n            title=\"Title\"\n            customClasses={{ body: 'dao-proposal__section-body' }}\n          >\n            <TitleForm\n              form={titleForm}\n              validateForms={validateForms}\n              fieldClassName=\"title-section__field\"\n              inputClassName=\"title-section__input\"\n            />\n          </DaoSection>\n\n          <DaoSection\n            className=\"dao-proposal__section\"\n            title={\n              <>\n                <div>Content</div>\n                <span className=\"dao-proposal__section-header-tip text-norm text-smd\">\n                  Tip: write in Markdown!\n                </span>\n              </>\n            }\n            customClasses={{ body: 'dao-proposal__section-body' }}\n          >\n            <FormAntd name=\"contentForm\" form={contentForm} layout=\"vertical\">\n              <FormAntd.Item\n                className=\"content-section__field\"\n                name=\"content\"\n                rules={[\n                  {\n                    validator: () => {\n                      if (editorPlainText.trim().length) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject(new Error('Content must not be empty'));\n                    },\n                  },\n                ]}\n              >\n                <EasyMde\n                  id=\"body\"\n                  name=\"body\"\n                  onTextChange={handleEasyMdeChange}\n                  value={editorPlainText}\n                />\n              </FormAntd.Item>\n            </FormAntd>\n          </DaoSection>\n\n          {editorPlainText && (\n            <DaoSection\n              className=\"dao-proposal__section\"\n              title=\"Preview\"\n              customClasses={{ body: 'dao-proposal__section-body' }}\n            >\n              <ReactMarkdown className=\"text-yellow\">{editorPlainText}</ReactMarkdown>\n            </DaoSection>\n          )}\n\n          <DaoSection\n            className=\"dao-proposal__section\"\n            title=\"Choices\"\n            customClasses={{ body: 'dao-proposal__section-body' }}\n          >\n            <ChoicesForm\n              form={choicesForm}\n              validateForms={validateForms}\n              inputClassName=\"choices-section__input\"\n              inputPostfixClassName=\"choices-section__input-postfix\"\n              formErrorsClassName=\"choices-section__form-errors\"\n              buttonClassName=\"choices-section__button\"\n            />\n          </DaoSection>\n        </div>\n\n        <div className=\"dao-proposal__column\">\n          <DaoSection className=\"dao-proposal__section\" title=\"Actions\">\n            <ActionsForm\n              form={actionsForm}\n              validateForms={validateForms}\n              snapshotClassName=\"actions-section__snapshot\"\n              snapshotTitleClassName=\"actions-section__snapshot-title\"\n            />\n            {!user.address ? (\n              <ConnectWalletButton />\n            ) : (\n              <Button\n                className=\"actions-section__submit\"\n                loading={isProcessingValidation}\n                disabled={!isAbleToPublish}\n                onClick={isAbleToPublish ? onSubmit : undefined}\n              >\n                <span className=\"text-white text-smd text-bold\">Publish</span>\n              </Button>\n            )}\n            {!hasBalance && !currentBalanceLoading && (\n              <div style={{ color: 'red', marginTop: 10 }}>\n                You need voting power to publish a proposal.\n              </div>\n            )}\n          </DaoSection>\n        </div>\n      </div>\n    </DaoWrapper>\n  );\n});\n\nexport default DaoProposal;\n"]},"metadata":{},"sourceType":"module"}