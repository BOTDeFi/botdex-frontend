{"ast":null,"code":"export default function escapeStringRegexp(string) {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  } // Escape characters with special meaning either inside or outside character sets.\n  // Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\n\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js"],"names":["escapeStringRegexp","string","TypeError","replace"],"mappings":"AAAA,eAAe,SAASA,kBAAT,CAA4BC,MAA5B,EAAoC;AAClD,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;AACA,GAHiD,CAKlD;AACA;;;AACA,SAAOD,MAAM,CACXE,OADK,CACG,qBADH,EAC0B,MAD1B,EAELA,OAFK,CAEG,IAFH,EAES,OAFT,CAAP;AAGA","sourcesContent":["export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n"]},"metadata":{},"sourceType":"module"}