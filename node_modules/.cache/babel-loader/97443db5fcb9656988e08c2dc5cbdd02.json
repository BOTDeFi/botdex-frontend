{"ast":null,"code":"/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n\n  if ( // C0 except for HT, LF, FF, CR, space\n  code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of the basic block and C1 controls.\n  code > 126 && code < 160 || // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 || // Noncharacters.\n  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range\n  code > 1114111) {\n    return '\\uFFFD';\n  }\n\n  return String.fromCharCode(code);\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-util-decode-numeric-character-reference/index.js"],"names":["decodeNumericCharacterReference","value","base","code","Number","parseInt","String","fromCharCode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,+BAAT,CAAyCC,KAAzC,EAAgDC,IAAhD,EAAsD;AAC3D,QAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBJ,KAAhB,EAAuBC,IAAvB,CAAb;;AAEA,OACE;AACAC,EAAAA,IAAI,GAAG,CAAP,IACAA,IAAI,KAAK,EADT,IAECA,IAAI,GAAG,EAAP,IAAaA,IAAI,GAAG,EAFrB,IAE4B;AAC3BA,EAAAA,IAAI,GAAG,GAAP,IAAcA,IAAI,GAAG,GAHtB,IAG8B;AAC7BA,EAAAA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KAJxB,IAIkC;AACjCA,EAAAA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KALxB,IAMA,CAACA,IAAI,GAAG,KAAR,MAAmB,KANnB,IAOA,CAACA,IAAI,GAAG,KAAR,MAAmB,KAPnB,IAO4B;AAC5BA,EAAAA,IAAI,GAAG,OAVT,EAWE;AACA,WAAO,QAAP;AACD;;AAED,SAAOG,MAAM,CAACC,YAAP,CAAoBJ,IAApB,CAAP;AACD","sourcesContent":["/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n"]},"metadata":{},"sourceType":"module"}