{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport ArrowPurple from \"@/assets/img/icons/arrow-btn.svg\";\nimport { Button } from '@/components/atoms';\nimport { AprColumn, EndsInColumn, RecentProfitColumn, TotalStakedColumn } from '@/components/sections/Pools/TableRow/Columns';\nimport { useTotalStaked } from '@/hooks/pools/useTotalStaked';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useBlock } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { getRefineryVaultEarnings, getStakingBalance } from '@/store/pools/helpers';\nimport { useSelectVaultData, useStakedValue } from '@/store/pools/hooks';\nimport { PoolFarmingMode, Precisions } from '@/types';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { feeFormatter, getBalanceAmount, getFullDisplayBalance, numberWithCommas } from '@/utils/formatters';\nimport { getAprData, getPoolBlockInfo, useNonAutoVaultEarnings } from '../PoolCard/utils';\nimport StakeUnstakeButtons from '../StakeUnstakeButtons';\nimport StakingSection from '../StakingSection';\nimport DetailsLinks from './DetailsLinks';\nimport RecentProfit from './RecentProfit';\nimport TableRowSubtitle from './TableRowSubtitle';\nimport TableRowTitle from './TableRowTitle';\nimport './TableRow.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst mockData = {\n  currencyToConvert: 'USD'\n};\nconst TableRow = observer(_c = _s(({\n  farmMode,\n  pool,\n  columns\n}) => {\n  _s();\n\n  const {\n    user,\n    modals,\n    pools: {\n      fees: {\n        performanceFee: globalPerformanceFee\n      }\n    }\n  } = useMst();\n  const [currentBlock] = useBlock();\n  const {\n    shouldShowBlockCountdown,\n    // blocksUntilStart,\n    // blocksRemaining,\n    // hasPoolStarted,\n    blocksToDisplay\n  } = getPoolBlockInfo(pool, currentBlock);\n  const {\n    pricePerFullShare,\n    userData: {\n      userShares,\n      refineryAtLastUserAction\n    }\n  } = useSelectVaultData();\n  const {\n    earningToken,\n    stakingToken,\n    apr,\n    earningTokenPrice,\n    stakingTokenPrice\n  } = pool;\n  const {\n    tokenUsdPrice: refineryUsdPrice\n  } = useRefineryUsdPrice();\n  const [isOpenDetails, setOpenDetails] = useState(false);\n\n  const toggleDetails = () => {\n    setOpenDetails(isOpen => !isOpen);\n  };\n\n  const handleToggleDetailsClick = () => {\n    toggleDetails();\n  };\n\n  const handleToggleDetailsKeyDown = e => {\n    if (e.repeat) return;\n\n    if (e.key === 'Enter') {\n      toggleDetails();\n    }\n  };\n\n  const performanceFee = farmMode === PoolFarmingMode.auto ? Number(feeFormatter(globalPerformanceFee)) : 0;\n  const {\n    apr: earningsPercentageToDisplay,\n    autoCompoundFrequency\n  } = getAprData(pool, performanceFee);\n  const {\n    hasStakedValue,\n    stakedValue\n  } = useStakedValue(farmMode, pool);\n  const stakingTokenBalance = stakedValue.plus(getStakingBalance(pool));\n\n  const handleOpenRoiModal = e => {\n    e.stopPropagation();\n    modals.roi.open({\n      isFarmPage: false,\n      autoCompoundFrequency,\n      performanceFee,\n      apr: apr || 0,\n      earningTokenSymbol: earningToken.symbol,\n      earningTokenPrice: earningTokenPrice || 0,\n      stakingTokenSymbol: stakingToken.symbol,\n      stakingTokenPrice: Number(stakingTokenPrice),\n      stakingTokenBalance: stakingTokenBalance.toString()\n    });\n  };\n\n  const {\n    totalStakedBalanceToDisplay\n  } = useTotalStaked(pool, farmMode);\n  const stakedValueAsString = useMemo(() => getFullDisplayBalance({\n    balance: stakedValue,\n    decimals: pool.stakingToken.decimals,\n    displayDecimals: Precisions.shortToken\n  }).toString(), [stakedValue, pool.stakingToken.decimals]);\n  const {\n    nonAutoVaultEarnings,\n    nonAutoVaultEarningsAsString\n  } = useNonAutoVaultEarnings(pool);\n\n  const collectHandler = () => {\n    modals.poolsCollect.open({\n      poolId: pool.id,\n      farmMode,\n      earningTokenSymbol: pool.earningToken.symbol,\n      earnings: nonAutoVaultEarningsAsString,\n      earningTokenDecimals: Number(pool.earningToken.decimals),\n      fullBalance: getFullDisplayBalance({\n        balance: nonAutoVaultEarnings,\n        decimals: pool.earningToken.decimals\n      }).toString()\n    });\n  };\n\n  const hasConnectedWallet = Boolean(user.address);\n  const convertedStakedValue = useMemo(() => {\n    return new BigNumber(stakedValueAsString).times(refineryUsdPrice);\n  }, [stakedValueAsString, refineryUsdPrice]);\n  const convertedStakedValueAsString = useMemo(() => convertedStakedValue.toFixed(Precisions.fiat), [convertedStakedValue]);\n  const recentProfit = useMemo(() => {\n    if (farmMode === PoolFarmingMode.auto) {\n      const {\n        // hasAutoEarnings,\n        autoRefineryToDisplay: autoRefineryVaultRecentProfit\n      } = getRefineryVaultEarnings(user.address, refineryAtLastUserAction || BIG_ZERO, userShares || BIG_ZERO, pricePerFullShare || BIG_ZERO);\n      return autoRefineryVaultRecentProfit;\n    }\n\n    return getBalanceAmount(nonAutoVaultEarnings, pool.earningToken.decimals);\n  }, [farmMode, pricePerFullShare, refineryAtLastUserAction, user.address, userShares, nonAutoVaultEarnings, pool.earningToken.decimals]);\n  const recentProfitToDisplay = recentProfit.toFixed(Precisions.shortToken);\n  const convertedRecentProfit = useMemo(() => {\n    return recentProfit * refineryUsdPrice;\n  }, [recentProfit, refineryUsdPrice]);\n  const convertedRecentProfitToDisplay = convertedRecentProfit.toFixed(Precisions.fiat);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pools-table-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pools-table-row__content\",\n      onClick: handleToggleDetailsClick,\n      onKeyDown: handleToggleDetailsKeyDown,\n      role: \"button\",\n      tabIndex: 0,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pools-table-row__currencies box-f-ai-c t-box-b\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box pools-table-row__currencies-item\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: earningToken.logoURI,\n            alt: \"currency\",\n            className: \"pools-table-row__currencies-item-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: [/*#__PURE__*/_jsxDEV(TableRowTitle, {\n            farmMode: farmMode,\n            tokenEarn: earningToken\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableRowSubtitle, {\n            farmMode: farmMode,\n            tokenEarn: earningToken,\n            tokenStake: stakingToken\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RecentProfitColumn, {\n        name: columns[0].name,\n        value: recentProfitToDisplay,\n        usdValue: convertedRecentProfitToDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AprColumn, {\n        name: columns[1].name,\n        value: earningsPercentageToDisplay,\n        modalHandler: handleOpenRoiModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TotalStakedColumn, {\n        value: totalStakedBalanceToDisplay.toString(),\n        currencySymbol: stakingToken.symbol,\n        onlyDesktop: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EndsInColumn, {\n        value: shouldShowBlockCountdown ? numberWithCommas(blocksToDisplay) : '',\n        onlyDesktop: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pools-table-row__item box-f-jc-e box-f\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames('pools-table-row__item--mob t-box-b', {\n            'pools-table-row__item--mob_active': isOpenDetails\n          }),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: ArrowPurple,\n            alt: \"arrow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pools-table-row__item--pc t-box-none\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"outline-purple\",\n            size: \"smd\",\n            arrow: true,\n            toggle: true,\n            isActive: isOpenDetails,\n            onToggle: handleToggleDetailsClick,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      unmountOnExit: true,\n      mountOnEnter: true,\n      in: isOpenDetails,\n      addEndListener: (node, done) => {\n        node.addEventListener('transitionend', done, false);\n      },\n      classNames: \"show\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pools-table-row__details box-yellow-l\",\n        children: [/*#__PURE__*/_jsxDEV(DetailsLinks, {\n          farmMode: farmMode,\n          pool: pool\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), pool.isFinished && !hasStakedValue ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pools-table-row__buttons box-f-ai-c t-box-b\",\n          children: [/*#__PURE__*/_jsxDEV(RecentProfit, {\n            farmMode: farmMode,\n            tokenStake: stakingToken,\n            earnings: recentProfit,\n            isFinished: pool.isFinished,\n            onCollect: collectHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pools-table-row__details-box\",\n            children: hasConnectedWallet && hasStakedValue ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pools-table-row__details-title text-ssm text-upper text-yellow text-med\",\n                children: [stakingToken.symbol, \" Staked\", ' ', farmMode === PoolFarmingMode.auto && '(compounding)']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"box-f box-f-jc-sb box-f-ai-e\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"pools-table-row__details-staked-values-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"pools-table-row__details-staked-value text-blue-d text-smd\",\n                    children: stakedValueAsString\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-gray text-smd\",\n                    children: [\"~\", convertedStakedValueAsString, \" \", mockData.currencyToConvert]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(StakeUnstakeButtons, {\n                  pool: pool\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(StakingSection, {\n              pool: pool,\n              titleClassName: \"pools-table-row__details-title text-ssm text-upper\",\n              buttonProps: {\n                className: 'pools-table-row__details-box-start-staking-button',\n                size: 'lg'\n              },\n              tokenSymbol: stakingToken.symbol,\n              stakedValue: stakedValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}, \"G7W9kWG+eBZ3z0e4IW62VnkI9o8=\", false, function () {\n  return [useMst, useBlock, useSelectVaultData, useRefineryUsdPrice, useStakedValue, useTotalStaked, useNonAutoVaultEarnings];\n}));\n_c2 = TableRow;\nexport default TableRow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TableRow$observer\");\n$RefreshReg$(_c2, \"TableRow\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/index.tsx"],"names":["React","useMemo","useState","CSSTransition","BigNumber","classNames","observer","Button","AprColumn","EndsInColumn","RecentProfitColumn","TotalStakedColumn","useTotalStaked","useRefineryUsdPrice","useBlock","useMst","getRefineryVaultEarnings","getStakingBalance","useSelectVaultData","useStakedValue","PoolFarmingMode","Precisions","BIG_ZERO","feeFormatter","getBalanceAmount","getFullDisplayBalance","numberWithCommas","getAprData","getPoolBlockInfo","useNonAutoVaultEarnings","StakeUnstakeButtons","StakingSection","DetailsLinks","RecentProfit","TableRowSubtitle","TableRowTitle","mockData","currencyToConvert","TableRow","farmMode","pool","columns","user","modals","pools","fees","performanceFee","globalPerformanceFee","currentBlock","shouldShowBlockCountdown","blocksToDisplay","pricePerFullShare","userData","userShares","refineryAtLastUserAction","earningToken","stakingToken","apr","earningTokenPrice","stakingTokenPrice","tokenUsdPrice","refineryUsdPrice","isOpenDetails","setOpenDetails","toggleDetails","isOpen","handleToggleDetailsClick","handleToggleDetailsKeyDown","e","repeat","key","auto","Number","earningsPercentageToDisplay","autoCompoundFrequency","hasStakedValue","stakedValue","stakingTokenBalance","plus","handleOpenRoiModal","stopPropagation","roi","open","isFarmPage","earningTokenSymbol","symbol","stakingTokenSymbol","toString","totalStakedBalanceToDisplay","stakedValueAsString","balance","decimals","displayDecimals","shortToken","nonAutoVaultEarnings","nonAutoVaultEarningsAsString","collectHandler","poolsCollect","poolId","id","earnings","earningTokenDecimals","fullBalance","hasConnectedWallet","Boolean","address","convertedStakedValue","times","convertedStakedValueAsString","toFixed","fiat","recentProfit","autoRefineryToDisplay","autoRefineryVaultRecentProfit","recentProfitToDisplay","convertedRecentProfit","convertedRecentProfitToDisplay","logoURI","name","ArrowPurple","node","done","addEventListener","isFinished","className","size"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\n\nimport ArrowPurple from '@/assets/img/icons/arrow-btn.svg';\nimport { Button } from '@/components/atoms';\nimport {\n  AprColumn,\n  EndsInColumn,\n  RecentProfitColumn,\n  TotalStakedColumn,\n} from '@/components/sections/Pools/TableRow/Columns';\nimport { useTotalStaked } from '@/hooks/pools/useTotalStaked';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useBlock } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { getRefineryVaultEarnings, getStakingBalance } from '@/store/pools/helpers';\nimport { useSelectVaultData, useStakedValue } from '@/store/pools/hooks';\nimport { IPoolFarmingMode, Pool, PoolFarmingMode, Precisions } from '@/types';\nimport { BIG_ZERO } from '@/utils/constants';\nimport {\n  feeFormatter,\n  getBalanceAmount,\n  getFullDisplayBalance,\n  numberWithCommas,\n} from '@/utils/formatters';\n\nimport { getAprData, getPoolBlockInfo, useNonAutoVaultEarnings } from '../PoolCard/utils';\nimport StakeUnstakeButtons from '../StakeUnstakeButtons';\nimport StakingSection from '../StakingSection';\n\nimport DetailsLinks from './DetailsLinks';\nimport RecentProfit from './RecentProfit';\nimport TableRowSubtitle from './TableRowSubtitle';\nimport TableRowTitle from './TableRowTitle';\n\nimport './TableRow.scss';\n\ninterface ITableRowProps {\n  farmMode: IPoolFarmingMode;\n  pool: Pool;\n  columns: any[];\n}\n\nconst mockData = {\n  currencyToConvert: 'USD',\n};\n\nconst TableRow: React.FC<ITableRowProps> = observer(({ farmMode, pool, columns }) => {\n  const {\n    user,\n    modals,\n    pools: {\n      fees: { performanceFee: globalPerformanceFee },\n    },\n  } = useMst();\n  const [currentBlock] = useBlock();\n  const {\n    shouldShowBlockCountdown,\n    // blocksUntilStart,\n    // blocksRemaining,\n    // hasPoolStarted,\n    blocksToDisplay,\n  } = getPoolBlockInfo(pool, currentBlock);\n  const {\n    pricePerFullShare,\n    userData: { userShares, refineryAtLastUserAction },\n  } = useSelectVaultData();\n  const { earningToken, stakingToken, apr, earningTokenPrice, stakingTokenPrice } = pool;\n  const { tokenUsdPrice: refineryUsdPrice } = useRefineryUsdPrice();\n\n  const [isOpenDetails, setOpenDetails] = useState(false);\n\n  const toggleDetails = () => {\n    setOpenDetails((isOpen) => !isOpen);\n  };\n  const handleToggleDetailsClick = () => {\n    toggleDetails();\n  };\n  const handleToggleDetailsKeyDown = (e: React.KeyboardEvent): void => {\n    if (e.repeat) return;\n    if (e.key === 'Enter') {\n      toggleDetails();\n    }\n  };\n\n  const performanceFee =\n    farmMode === PoolFarmingMode.auto ? Number(feeFormatter(globalPerformanceFee)) : 0;\n  const { apr: earningsPercentageToDisplay, autoCompoundFrequency } = getAprData(\n    pool,\n    performanceFee,\n  );\n\n  const { hasStakedValue, stakedValue } = useStakedValue(farmMode, pool);\n  const stakingTokenBalance = stakedValue.plus(getStakingBalance(pool));\n\n  const handleOpenRoiModal = (e: React.MouseEvent | React.KeyboardEvent): void => {\n    e.stopPropagation();\n    modals.roi.open({\n      isFarmPage: false,\n      autoCompoundFrequency,\n      performanceFee,\n      apr: apr || 0,\n      earningTokenSymbol: earningToken.symbol,\n      earningTokenPrice: earningTokenPrice || 0,\n      stakingTokenSymbol: stakingToken.symbol,\n      stakingTokenPrice: Number(stakingTokenPrice),\n      stakingTokenBalance: stakingTokenBalance.toString(),\n    });\n  };\n\n  const { totalStakedBalanceToDisplay } = useTotalStaked(pool, farmMode);\n\n  const stakedValueAsString = useMemo(\n    () =>\n      getFullDisplayBalance({\n        balance: stakedValue,\n        decimals: pool.stakingToken.decimals,\n        displayDecimals: Precisions.shortToken,\n      }).toString(),\n    [stakedValue, pool.stakingToken.decimals],\n  );\n\n  const { nonAutoVaultEarnings, nonAutoVaultEarningsAsString } = useNonAutoVaultEarnings(pool);\n\n  const collectHandler = () => {\n    modals.poolsCollect.open({\n      poolId: pool.id,\n      farmMode,\n      earningTokenSymbol: pool.earningToken.symbol,\n      earnings: nonAutoVaultEarningsAsString,\n      earningTokenDecimals: Number(pool.earningToken.decimals),\n      fullBalance: getFullDisplayBalance({\n        balance: nonAutoVaultEarnings,\n        decimals: pool.earningToken.decimals,\n      }).toString(),\n    });\n  };\n\n  const hasConnectedWallet = Boolean(user.address);\n\n  const convertedStakedValue = useMemo(() => {\n    return new BigNumber(stakedValueAsString).times(refineryUsdPrice);\n  }, [stakedValueAsString, refineryUsdPrice]);\n  const convertedStakedValueAsString = useMemo(\n    () => convertedStakedValue.toFixed(Precisions.fiat),\n    [convertedStakedValue],\n  );\n\n  const recentProfit = useMemo(() => {\n    if (farmMode === PoolFarmingMode.auto) {\n      const {\n        // hasAutoEarnings,\n        autoRefineryToDisplay: autoRefineryVaultRecentProfit,\n      } = getRefineryVaultEarnings(\n        user.address,\n        refineryAtLastUserAction || BIG_ZERO,\n        userShares || BIG_ZERO,\n        pricePerFullShare || BIG_ZERO,\n      );\n      return autoRefineryVaultRecentProfit;\n    }\n    return getBalanceAmount(nonAutoVaultEarnings, pool.earningToken.decimals);\n  }, [\n    farmMode,\n    pricePerFullShare,\n    refineryAtLastUserAction,\n    user.address,\n    userShares,\n    nonAutoVaultEarnings,\n    pool.earningToken.decimals,\n  ]);\n  const recentProfitToDisplay = recentProfit.toFixed(Precisions.shortToken);\n\n  const convertedRecentProfit = useMemo(() => {\n    return recentProfit * refineryUsdPrice;\n  }, [recentProfit, refineryUsdPrice]);\n  const convertedRecentProfitToDisplay = convertedRecentProfit.toFixed(Precisions.fiat);\n\n  return (\n    <div className=\"pools-table-row\">\n      <div\n        className=\"pools-table-row__content\"\n        onClick={handleToggleDetailsClick}\n        onKeyDown={handleToggleDetailsKeyDown}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <div className=\"pools-table-row__currencies box-f-ai-c t-box-b\">\n          <div className=\"box pools-table-row__currencies-item\">\n            <img\n              src={earningToken.logoURI}\n              alt=\"currency\"\n              className=\"pools-table-row__currencies-item-image\"\n            />\n          </div>\n          <div className=\"box\">\n            <TableRowTitle farmMode={farmMode} tokenEarn={earningToken} />\n            <TableRowSubtitle\n              farmMode={farmMode}\n              tokenEarn={earningToken}\n              tokenStake={stakingToken}\n            />\n          </div>\n        </div>\n        <RecentProfitColumn\n          name={columns[0].name}\n          value={recentProfitToDisplay}\n          usdValue={convertedRecentProfitToDisplay}\n        />\n        <AprColumn\n          name={columns[1].name}\n          value={earningsPercentageToDisplay}\n          modalHandler={handleOpenRoiModal}\n        />\n        <TotalStakedColumn\n          value={totalStakedBalanceToDisplay.toString()}\n          currencySymbol={stakingToken.symbol}\n          onlyDesktop\n        />\n        <EndsInColumn\n          value={shouldShowBlockCountdown ? numberWithCommas(blocksToDisplay) : ''}\n          onlyDesktop\n        />\n        <div className=\"pools-table-row__item box-f-jc-e box-f\">\n          <div\n            className={classNames('pools-table-row__item--mob t-box-b', {\n              'pools-table-row__item--mob_active': isOpenDetails,\n            })}\n          >\n            <img src={ArrowPurple} alt=\"arrow\" />\n          </div>\n          <div className=\"pools-table-row__item--pc t-box-none\">\n            <Button\n              colorScheme=\"outline-purple\"\n              size=\"smd\"\n              arrow\n              toggle\n              isActive={isOpenDetails}\n              onToggle={handleToggleDetailsClick}\n            >\n              <span>Details</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n      <CSSTransition\n        unmountOnExit\n        mountOnEnter\n        in={isOpenDetails}\n        addEndListener={(node, done) => {\n          node.addEventListener('transitionend', done, false);\n        }}\n        classNames=\"show\"\n      >\n        <div className=\"pools-table-row__details box-yellow-l\">\n          <DetailsLinks farmMode={farmMode} pool={pool} />\n          {pool.isFinished && !hasStakedValue ? null : (\n            <div className=\"pools-table-row__buttons box-f-ai-c t-box-b\">\n              <RecentProfit\n                farmMode={farmMode}\n                tokenStake={stakingToken}\n                earnings={recentProfit}\n                isFinished={pool.isFinished}\n                onCollect={collectHandler}\n              />\n              <div className=\"pools-table-row__details-box\">\n                {hasConnectedWallet && hasStakedValue ? (\n                  <>\n                    <div className=\"pools-table-row__details-title text-ssm text-upper text-yellow text-med\">\n                      {stakingToken.symbol} Staked{' '}\n                      {farmMode === PoolFarmingMode.auto && '(compounding)'}\n                    </div>\n                    <div className=\"box-f box-f-jc-sb box-f-ai-e\">\n                      <div className=\"pools-table-row__details-staked-values-group\">\n                        <div className=\"pools-table-row__details-staked-value text-blue-d text-smd\">\n                          {stakedValueAsString}\n                        </div>\n                        <div className=\"text-gray text-smd\">\n                          ~{convertedStakedValueAsString} {mockData.currencyToConvert}\n                        </div>\n                      </div>\n                      <StakeUnstakeButtons pool={pool} />\n                    </div>\n                  </>\n                ) : (\n                  <StakingSection\n                    pool={pool}\n                    titleClassName=\"pools-table-row__details-title text-ssm text-upper\"\n                    buttonProps={{\n                      className: 'pools-table-row__details-box-start-staking-button',\n                      size: 'lg',\n                    }}\n                    tokenSymbol={stakingToken.symbol}\n                    stakedValue={stakedValue}\n                  />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </CSSTransition>\n    </div>\n  );\n});\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}