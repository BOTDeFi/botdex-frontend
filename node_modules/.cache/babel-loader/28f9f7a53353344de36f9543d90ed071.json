{"ast":null,"code":"import { normalize } from './normalize.js';\nimport { DefinedInfo } from './util/defined-info.js';\nimport { Info } from './util/info.js';\nvar valid = /^data[-\\w.:]+$/i;\nvar dash = /-[a-z]/g;\nvar cap = /[A-Z]/g;\n/**\n * @param {import('./util/schema.js').Schema} schema\n * @param {string} value\n * @returns {import('./util/info.js').Info}\n */\n\nexport function find(schema, value) {\n  var normal = normalize(value);\n  var prop = value;\n  var Type = Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]];\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      prop = datasetToProperty(value);\n    } else {\n      value = datasetToAttribute(value);\n    }\n\n    Type = DefinedInfo;\n  }\n\n  return new Type(prop, value);\n}\n/**\n * @param {string} attribute\n * @returns {string}\n */\n\nfunction datasetToProperty(attribute) {\n  var value = attribute.slice(5).replace(dash, camelcase);\n  return 'data' + value.charAt(0).toUpperCase() + value.slice(1);\n}\n/**\n * @param {string} property\n * @returns {string}\n */\n\n\nfunction datasetToAttribute(property) {\n  var value = property.slice(4);\n\n  if (dash.test(value)) {\n    return property;\n  }\n\n  value = value.replace(cap, kebab);\n\n  if (value.charAt(0) !== '-') {\n    value = '-' + value;\n  }\n\n  return 'data' + value;\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\n\nfunction kebab($0) {\n  return '-' + $0.toLowerCase();\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\n\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase();\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/property-information/lib/find.js"],"names":["normalize","DefinedInfo","Info","valid","dash","cap","find","schema","value","normal","prop","Type","property","length","slice","test","charAt","datasetToProperty","datasetToAttribute","attribute","replace","camelcase","toUpperCase","kebab","$0","toLowerCase"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,gBAAxB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,IAAR,QAAmB,gBAAnB;AAEA,IAAIC,KAAK,GAAG,iBAAZ;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,GAAG,GAAG,QAAV;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6B;AAClC,MAAIC,MAAM,GAAGT,SAAS,CAACQ,KAAD,CAAtB;AACA,MAAIE,IAAI,GAAGF,KAAX;AACA,MAAIG,IAAI,GAAGT,IAAX;;AAEA,MAAIO,MAAM,IAAIF,MAAM,CAACE,MAArB,EAA6B;AAC3B,WAAOF,MAAM,CAACK,QAAP,CAAgBL,MAAM,CAACE,MAAP,CAAcA,MAAd,CAAhB,CAAP;AACD;;AAED,MAAIA,MAAM,CAACI,MAAP,GAAgB,CAAhB,IAAqBJ,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgB,CAAhB,MAAuB,MAA5C,IAAsDX,KAAK,CAACY,IAAN,CAAWP,KAAX,CAA1D,EAA6E;AAC3E;AACA,QAAIA,KAAK,CAACQ,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3BN,MAAAA,IAAI,GAAGO,iBAAiB,CAACT,KAAD,CAAxB;AACD,KAFD,MAEO;AACLA,MAAAA,KAAK,GAAGU,kBAAkB,CAACV,KAAD,CAA1B;AACD;;AAEDG,IAAAA,IAAI,GAAGV,WAAP;AACD;;AAED,SAAO,IAAIU,IAAJ,CAASD,IAAT,EAAeF,KAAf,CAAP;AACD;AAED;AACA;AACA;AACA;;AACA,SAASS,iBAAT,CAA2BE,SAA3B,EAAsC;AACpC,MAAIX,KAAK,GAAGW,SAAS,CAACL,KAAV,CAAgB,CAAhB,EAAmBM,OAAnB,CAA2BhB,IAA3B,EAAiCiB,SAAjC,CAAZ;AACA,SAAO,SAASb,KAAK,CAACQ,MAAN,CAAa,CAAb,EAAgBM,WAAhB,EAAT,GAAyCd,KAAK,CAACM,KAAN,CAAY,CAAZ,CAAhD;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASI,kBAAT,CAA4BN,QAA5B,EAAsC;AACpC,MAAIJ,KAAK,GAAGI,QAAQ,CAACE,KAAT,CAAe,CAAf,CAAZ;;AAEA,MAAIV,IAAI,CAACW,IAAL,CAAUP,KAAV,CAAJ,EAAsB;AACpB,WAAOI,QAAP;AACD;;AAEDJ,EAAAA,KAAK,GAAGA,KAAK,CAACY,OAAN,CAAcf,GAAd,EAAmBkB,KAAnB,CAAR;;AAEA,MAAIf,KAAK,CAACQ,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3BR,IAAAA,KAAK,GAAG,MAAMA,KAAd;AACD;;AAED,SAAO,SAASA,KAAhB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASe,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,MAAMA,EAAE,CAACC,WAAH,EAAb;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASJ,SAAT,CAAmBG,EAAnB,EAAuB;AACrB,SAAOA,EAAE,CAACR,MAAH,CAAU,CAAV,EAAaM,WAAb,EAAP;AACD","sourcesContent":["import {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nvar valid = /^data[-\\w.:]+$/i\nvar dash = /-[a-z]/g\nvar cap = /[A-Z]/g\n\n/**\n * @param {import('./util/schema.js').Schema} schema\n * @param {string} value\n * @returns {import('./util/info.js').Info}\n */\nexport function find(schema, value) {\n  var normal = normalize(value)\n  var prop = value\n  var Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      prop = datasetToProperty(value)\n    } else {\n      value = datasetToAttribute(value)\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} attribute\n * @returns {string}\n */\nfunction datasetToProperty(attribute) {\n  var value = attribute.slice(5).replace(dash, camelcase)\n  return 'data' + value.charAt(0).toUpperCase() + value.slice(1)\n}\n\n/**\n * @param {string} property\n * @returns {string}\n */\nfunction datasetToAttribute(property) {\n  var value = property.slice(4)\n\n  if (dash.test(value)) {\n    return property\n  }\n\n  value = value.replace(cap, kebab)\n\n  if (value.charAt(0) !== '-') {\n    value = '-' + value\n  }\n\n  return 'data' + value\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n"]},"metadata":{},"sourceType":"module"}