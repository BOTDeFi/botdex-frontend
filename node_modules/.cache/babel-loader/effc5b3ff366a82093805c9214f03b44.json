{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport { markdownSpace } from 'micromark-util-character';\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n\n    return ok(code);\n  }\n  /** @type {State} */\n\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n\n    effects.exit(type);\n    return ok(code);\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-factory-space/index.js"],"names":["markdownSpace","factorySpace","effects","ok","type","max","limit","Number","POSITIVE_INFINITY","size","start","code","enter","prefix","consume","exit"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAQA,aAAR,QAA4B,0BAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,EAA/B,EAAmCC,IAAnC,EAAyCC,GAAzC,EAA8C;AACnD,QAAMC,KAAK,GAAGD,GAAG,GAAGA,GAAG,GAAG,CAAT,GAAaE,MAAM,CAACC,iBAArC;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,SAAOC,KAAP;AACA;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIX,aAAa,CAACW,IAAD,CAAjB,EAAyB;AACvBT,MAAAA,OAAO,CAACU,KAAR,CAAcR,IAAd;AACA,aAAOS,MAAM,CAACF,IAAD,CAAb;AACD;;AAED,WAAOR,EAAE,CAACQ,IAAD,CAAT;AACD;AACD;;;AAEA,WAASE,MAAT,CAAgBF,IAAhB,EAAsB;AACpB,QAAIX,aAAa,CAACW,IAAD,CAAb,IAAuBF,IAAI,KAAKH,KAApC,EAA2C;AACzCJ,MAAAA,OAAO,CAACY,OAAR,CAAgBH,IAAhB;AACA,aAAOE,MAAP;AACD;;AAEDX,IAAAA,OAAO,CAACa,IAAR,CAAaX,IAAb;AACA,WAAOD,EAAE,CAACQ,IAAD,CAAT;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}