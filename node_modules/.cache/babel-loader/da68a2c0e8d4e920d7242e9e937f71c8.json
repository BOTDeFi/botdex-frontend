{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { getContractAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { MAX_UINT_256 } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\nconst masterRefinerContractAddress = getContractAddress('MASTER_REFINER');\nconst gasOptions = {\n  gas: 300000\n};\n\nconst useApproveFarm = lpContract => {\n  _s();\n\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice({\n        contract: lpContract,\n        methodName: 'approve',\n        methodArgs: [masterRefinerContractAddress, MAX_UINT_256],\n        options: gasOptions\n      });\n      return tx.status;\n    } catch (error) {\n      clogError('Approve error', error);\n      return false;\n    }\n  }, [lpContract, callWithGasPrice]);\n  return {\n    onApprove: handleApprove\n  };\n};\n\n_s(useApproveFarm, \"Wbf4fUL1rE7ZTq6kuL2VHjxmm5w=\", false, function () {\n  return [useCallWithGasPrice];\n});\n\nexport default useApproveFarm;","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useApprove.ts"],"names":["useCallback","getContractAddress","useCallWithGasPrice","MAX_UINT_256","clogError","masterRefinerContractAddress","gasOptions","gas","useApproveFarm","lpContract","callWithGasPrice","handleApprove","tx","contract","methodName","methodArgs","options","status","error","onApprove"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,MAAMC,4BAA4B,GAAGJ,kBAAkB,CAAC,gBAAD,CAAvD;AACA,MAAMK,UAAU,GAAG;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAnB;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAA0B;AAAA;;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAuBR,mBAAmB,EAAhD;AACA,QAAMS,aAAa,GAAGX,WAAW,CAAC,YAAY;AAC5C,QAAI;AACF,YAAMY,EAAE,GAAG,MAAMF,gBAAgB,CAAC;AAChCG,QAAAA,QAAQ,EAAEJ,UADsB;AAEhCK,QAAAA,UAAU,EAAE,SAFoB;AAGhCC,QAAAA,UAAU,EAAE,CAACV,4BAAD,EAA+BF,YAA/B,CAHoB;AAIhCa,QAAAA,OAAO,EAAEV;AAJuB,OAAD,CAAjC;AAOA,aAAOM,EAAE,CAACK,MAAV;AACD,KATD,CASE,OAAOC,KAAP,EAAc;AACdd,MAAAA,SAAS,CAAC,eAAD,EAAkBc,KAAlB,CAAT;AACA,aAAO,KAAP;AACD;AACF,GAdgC,EAc9B,CAACT,UAAD,EAAaC,gBAAb,CAd8B,CAAjC;AAgBA,SAAO;AAAES,IAAAA,SAAS,EAAER;AAAb,GAAP;AACD,CAnBD;;GAAMH,c;UACyBN,mB;;;AAoB/B,eAAeM,cAAf","sourcesContent":["import { useCallback } from 'react';\nimport { Contract } from 'web3-eth-contract';\n\nimport { getContractAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { MAX_UINT_256 } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\n\nconst masterRefinerContractAddress = getContractAddress('MASTER_REFINER');\nconst gasOptions = { gas: 300000 };\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice({\n        contract: lpContract,\n        methodName: 'approve',\n        methodArgs: [masterRefinerContractAddress, MAX_UINT_256],\n        options: gasOptions,\n      });\n\n      return tx.status;\n    } catch (error) {\n      clogError('Approve error', error);\n      return false;\n    }\n  }, [lpContract, callWithGasPrice]);\n\n  return { onApprove: handleApprove };\n};\n\nexport default useApproveFarm;\n"]},"metadata":{},"sourceType":"module"}