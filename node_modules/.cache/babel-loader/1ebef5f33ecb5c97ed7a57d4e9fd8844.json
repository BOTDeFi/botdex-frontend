{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsEarnedSection/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport { Button, InputNumber } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { tokens } from '@/config/tokens';\nimport { useHarvestFarm } from '@/hooks/farms/useHarvestFarm';\nimport { useMst } from '@/store';\nimport { getBalanceAmount } from '@/utils/formatters';\nimport DetailsSectionTitle from '../DetailsSectionTitle';\nimport { EARNING_TOKEN_SYMBOL } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DetailsEarnedSection = observer(_c = _s(({\n  className,\n  farm\n}) => {\n  _s();\n\n  const {\n    pid,\n    userData\n  } = farm;\n  const {\n    earnings = '0'\n  } = userData || {};\n  const hasEarnings = Boolean(Number(earnings));\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    harvestFarm\n  } = useHarvestFarm(pid);\n  const {\n    user,\n    farms: farmsStore\n  } = useMst();\n  const onHarvest = useCallback(async () => {\n    setPendingTx(true);\n\n    try {\n      await harvestFarm();\n      successNotification('Harvested!', `Your ${EARNING_TOKEN_SYMBOL} earnings have been sent to your wallet!`);\n    } catch (e) {\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      setPendingTx(false);\n    }\n\n    farmsStore.fetchFarmUserDataAsync(user.address, [pid]);\n  }, [farmsStore, harvestFarm, pid, user.address]);\n  const harvestHandler = useMemo(() => {\n    return hasEarnings ? onHarvest : undefined;\n  }, [hasEarnings, onHarvest]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames(className, 'farms-table-row__details-box'),\n    children: [/*#__PURE__*/_jsxDEV(DetailsSectionTitle, {\n      title: `${EARNING_TOKEN_SYMBOL} Earned`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(InputNumber, {\n      colorScheme: \"white\",\n      value: getBalanceAmount(new BigNumber(earnings), tokens.rp1.decimals),\n      inputPrefix: /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"purple\",\n        size: \"ssm\",\n        disabled: !hasEarnings || pendingTx,\n        onClick: harvestHandler,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white text-ssmd\",\n          children: \"Harvest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this),\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n}, \"H2MZO1i9zMyifd8TGtDeLR/Q6w4=\", false, function () {\n  return [useHarvestFarm, useMst];\n}));\n_c2 = DetailsEarnedSection;\nexport default DetailsEarnedSection;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DetailsEarnedSection$observer\");\n$RefreshReg$(_c2, \"DetailsEarnedSection\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsEarnedSection/index.tsx"],"names":["React","useCallback","useMemo","useState","BigNumber","classNames","observer","Button","InputNumber","errorNotification","successNotification","tokens","useHarvestFarm","useMst","getBalanceAmount","DetailsSectionTitle","EARNING_TOKEN_SYMBOL","DetailsEarnedSection","className","farm","pid","userData","earnings","hasEarnings","Boolean","Number","pendingTx","setPendingTx","harvestFarm","user","farms","farmsStore","onHarvest","e","fetchFarmUserDataAsync","address","harvestHandler","undefined","rp1","decimals"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\n\nimport { Button, InputNumber } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { tokens } from '@/config/tokens';\nimport { useHarvestFarm } from '@/hooks/farms/useHarvestFarm';\nimport { useMst } from '@/store';\nimport { FarmWithStakedValue } from '@/types';\nimport { getBalanceAmount } from '@/utils/formatters';\n\nimport DetailsSectionTitle from '../DetailsSectionTitle';\nimport { EARNING_TOKEN_SYMBOL } from '../utils';\n\ninterface IDetailsEarnedSectionProps {\n  className?: string;\n  farm: FarmWithStakedValue;\n}\n\nconst DetailsEarnedSection: React.FC<IDetailsEarnedSectionProps> = observer(\n  ({ className, farm }) => {\n    const { pid, userData } = farm;\n    const { earnings = '0' } = userData || {};\n    const hasEarnings = Boolean(Number(earnings));\n\n    const [pendingTx, setPendingTx] = useState(false);\n    const { harvestFarm } = useHarvestFarm(pid);\n    const { user, farms: farmsStore } = useMst();\n\n    const onHarvest = useCallback(async () => {\n      setPendingTx(true);\n      try {\n        await harvestFarm();\n        successNotification(\n          'Harvested!',\n          `Your ${EARNING_TOKEN_SYMBOL} earnings have been sent to your wallet!`,\n        );\n      } catch (e) {\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        setPendingTx(false);\n      }\n\n      farmsStore.fetchFarmUserDataAsync(user.address, [pid]);\n    }, [farmsStore, harvestFarm, pid, user.address]);\n\n    const harvestHandler = useMemo(() => {\n      return hasEarnings ? onHarvest : undefined;\n    }, [hasEarnings, onHarvest]);\n\n    return (\n      <div className={classNames(className, 'farms-table-row__details-box')}>\n        <DetailsSectionTitle title={`${EARNING_TOKEN_SYMBOL} Earned`} />\n        <InputNumber\n          colorScheme=\"white\"\n          value={getBalanceAmount(new BigNumber(earnings), tokens.rp1.decimals)}\n          inputPrefix={\n            <Button\n              colorScheme=\"purple\"\n              size=\"ssm\"\n              disabled={!hasEarnings || pendingTx}\n              onClick={harvestHandler}\n            >\n              <span className=\"text-white text-ssmd\">Harvest</span>\n            </Button>\n          }\n          readOnly\n        />\n      </div>\n    );\n  },\n);\n\nexport default DetailsEarnedSection;\n"]},"metadata":{},"sourceType":"module"}