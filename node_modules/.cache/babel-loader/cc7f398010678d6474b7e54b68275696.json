{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useStakeFarm } from '@/hooks/farms/useStakeFarm';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { BIG_TEN } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\nexport const useSmartRefinerStake = smartRefinerInitContract => {\n  _s();\n\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const smartRefinerStake = useCallback(async (amount, decimals = 18) => {\n    const value = new BigNumber(amount).times(BIG_TEN.pow(decimals)).toFixed();\n    const tx = await callWithGasPrice({\n      contract: smartRefinerInitContract,\n      methodName: 'deposit',\n      methodArgs: [value],\n      options: {\n        gas: 300000\n      }\n    });\n    return tx.status;\n  }, [callWithGasPrice, smartRefinerInitContract]);\n  return {\n    smartRefinerStake\n  };\n};\n\n_s(useSmartRefinerStake, \"jNG0oq4/fAO3mr/aDImAVYDmhhg=\", false, function () {\n  return [useCallWithGasPrice];\n});\n\nconst useStakePool = poolId => {\n  _s2();\n\n  const {\n    metamaskService\n  } = useWalletConnectorContext();\n  const {\n    user,\n    pools\n  } = useMst();\n  const [foundPool] = poolsConfig.filter(pool => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(getAddress(foundPool.contractAddress), SmartRefinerInitializableAbi);\n  const {\n    smartRefinerStake\n  } = useSmartRefinerStake(smartRefinerInitContract); // const { harvestPool } = useHarvestPoolDeposit(smartRefinerInitContract);\n\n  const masterRefinerContract = getContract('MASTER_REFINER');\n  const {\n    stakeFarm\n  } = useStakeFarm(masterRefinerContract); // const { harvestFarm } = useHarvestFarm(masterRefinerContract, 0);\n\n  const handleStake = useCallback(async (amount, decimals) => {\n    if (poolId === 0) {\n      await stakeFarm(0, amount);\n    } else {\n      await smartRefinerStake(amount, decimals);\n    }\n\n    pools.updateUserStakedBalance(poolId, user.address);\n    pools.updateUserBalance(poolId, user.address);\n  }, [poolId, pools, user.address, smartRefinerStake, stakeFarm]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s2(useStakePool, \"FiUJ8R0w+XcXSumPsgz0I7VGdws=\", false, function () {\n  return [useWalletConnectorContext, useMst, useSmartRefinerStake, useStakeFarm];\n});\n\nexport default useStakePool;\nexport const useNonVaultStake = (poolId, onFinally) => {\n  _s3();\n\n  const {\n    onStake\n  } = useStakePool(poolId);\n  const nonVaultStake = useCallback(async (valueToStake, stakingTokenDecimals, stakingTokenSymbol = '') => {\n    try {\n      await onStake(valueToStake, stakingTokenDecimals);\n      successNotification('Staked!', `Your ${stakingTokenSymbol} funds have been staked in the pool!`);\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      onFinally();\n    }\n  }, [onStake, onFinally]);\n  return {\n    nonVaultStake\n  };\n};\n\n_s3(useNonVaultStake, \"146Z1adShREQAExg+9GdIxo8BzA=\", false, function () {\n  return [useStakePool];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useStakePool.ts"],"names":["useCallback","BigNumber","errorNotification","successNotification","pools","poolsConfig","SmartRefinerInitializable","SmartRefinerInitializableAbi","useStakeFarm","useWalletConnectorContext","getAddress","getContract","useCallWithGasPrice","useMst","BIG_TEN","clogError","useSmartRefinerStake","smartRefinerInitContract","callWithGasPrice","smartRefinerStake","amount","decimals","value","times","pow","toFixed","tx","contract","methodName","methodArgs","options","gas","status","useStakePool","poolId","metamaskService","user","foundPool","filter","pool","id","contractAddress","masterRefinerContract","stakeFarm","handleStake","updateUserStakedBalance","address","updateUserBalance","onStake","useNonVaultStake","onFinally","nonVaultStake","valueToStake","stakingTokenDecimals","stakingTokenSymbol","error"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useStakeFarm } from '@/hooks/farms/useStakeFarm';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { BIG_TEN } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\n\nexport const useSmartRefinerStake = (smartRefinerInitContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const smartRefinerStake = useCallback(\n    async (amount: string, decimals = 18) => {\n      const value = new BigNumber(amount).times(BIG_TEN.pow(decimals)).toFixed();\n      const tx = await callWithGasPrice({\n        contract: smartRefinerInitContract,\n        methodName: 'deposit',\n        methodArgs: [value],\n        options: {\n          gas: 300000,\n        },\n      });\n      return tx.status;\n    },\n    [callWithGasPrice, smartRefinerInitContract],\n  );\n\n  return { smartRefinerStake };\n};\n\nconst useStakePool = (poolId: number) => {\n  const { metamaskService } = useWalletConnectorContext();\n  const { user, pools } = useMst();\n\n  const [foundPool] = poolsConfig.filter((pool) => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n  const { smartRefinerStake } = useSmartRefinerStake(smartRefinerInitContract);\n  // const { harvestPool } = useHarvestPoolDeposit(smartRefinerInitContract);\n\n  const masterRefinerContract = getContract('MASTER_REFINER');\n  const { stakeFarm } = useStakeFarm(masterRefinerContract);\n  // const { harvestFarm } = useHarvestFarm(masterRefinerContract, 0);\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (poolId === 0) {\n        await stakeFarm(0, amount);\n      } else {\n        await smartRefinerStake(amount, decimals);\n      }\n      pools.updateUserStakedBalance(poolId, user.address);\n      pools.updateUserBalance(poolId, user.address);\n    },\n    [poolId, pools, user.address, smartRefinerStake, stakeFarm],\n  );\n\n  return { onStake: handleStake };\n};\n\nexport default useStakePool;\n\nexport const useNonVaultStake = (poolId: number, onFinally: () => void) => {\n  const { onStake } = useStakePool(poolId);\n\n  const nonVaultStake = useCallback(\n    async (valueToStake: string, stakingTokenDecimals: number, stakingTokenSymbol = '') => {\n      try {\n        await onStake(valueToStake, stakingTokenDecimals);\n        successNotification(\n          'Staked!',\n          `Your ${stakingTokenSymbol} funds have been staked in the pool!`,\n        );\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [onStake, onFinally],\n  );\n\n  return { nonVaultStake };\n};\n"]},"metadata":{},"sourceType":"module"}