{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\n\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde;\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n\n  if (single === null || single === undefined) {\n    single = true;\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n    /** @type {Token} */\n\n    let strikethrough;\n    /** @type {Token} */\n\n    let text;\n    /** @type {number} */\n\n    let open;\n    /** @type {Event[]} */\n\n    let nextEvents; // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        open = index; // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open && // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n            strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n            text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }; // Opening.\n\n            nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]]; // Between.\n\n            splice(nextEvents, nextEvents.length, 0, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context)); // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n\n    index = -1;\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data';\n      }\n    }\n\n    return events;\n  }\n  /** @type {Tokenizer} */\n\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      if (code !== 126 || previous === 126 && events[events.length - 1][1].type !== 'characterEscape') {\n        return nok(code);\n      }\n\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n    /** @type {State} */\n\n\n    function more(code) {\n      const before = classifyCharacter(previous);\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js"],"names":["splice","classifyCharacter","resolveAll","gfmStrikethrough","options","single","singleTilde","tokenizer","tokenize","tokenizeStrikethrough","resolveAllStrikethrough","undefined","text","insideSpan","null","attentionMarkers","events","context","index","strikethrough","open","nextEvents","length","type","_close","_open","end","offset","start","Object","assign","parser","constructs","slice","effects","ok","nok","previous","size","code","enter","more","before","consume","token","exit","after","Boolean"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n    /** @type {Token} */\n\n    let strikethrough\n    /** @type {Token} */\n\n    let text\n    /** @type {number} */\n\n    let open\n    /** @type {Event[]} */\n\n    let nextEvents // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        code !== 126 ||\n        (previous === 126 &&\n          events[events.length - 1][1].type !== 'characterEscape')\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}