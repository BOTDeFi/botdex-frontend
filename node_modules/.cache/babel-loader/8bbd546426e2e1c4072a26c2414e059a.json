{"ast":null,"code":"/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\nvar isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n    mathceil = Math.ceil,\n    mathfloor = Math.floor,\n    bignumberError = '[BigNumber Error] ',\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n    BASE = 1e14,\n    LOG_BASE = 14,\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,\n    // 2^53 - 1\n// MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\nPOWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n    SQRT_BASE = 1e7,\n    // EDITABLE\n// The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n// the arguments to toExponential, toFixed, toFormat, and toPrecision.\nMAX = 1E9; // 0 to MAX_INT32\n\n/*\r\n * Create and return a BigNumber constructor.\r\n */\n\nfunction clone(configObject) {\n  var div,\n      convertBase,\n      parseNumeric,\n      P = BigNumber.prototype = {\n    constructor: BigNumber,\n    toString: null,\n    valueOf: null\n  },\n      ONE = new BigNumber(1),\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n  // The default values below must be integers within the inclusive ranges stated.\n  // The values can also be changed at run-time using BigNumber.set.\n  // The maximum number of decimal places for operations involving division.\n  DECIMAL_PLACES = 20,\n      // 0 to MAX\n  // The rounding mode used when rounding to the above decimal places, and when using\n  // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n  // UP         0 Away from zero.\n  // DOWN       1 Towards zero.\n  // CEIL       2 Towards +Infinity.\n  // FLOOR      3 Towards -Infinity.\n  // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n  // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n  // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n  // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n  // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n  ROUNDING_MODE = 4,\n      // 0 to 8\n  // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n  // The exponent value at and beneath which toString returns exponential notation.\n  // Number type: -7\n  TO_EXP_NEG = -7,\n      // 0 to -MAX\n  // The exponent value at and above which toString returns exponential notation.\n  // Number type: 21\n  TO_EXP_POS = 21,\n      // 0 to MAX\n  // RANGE : [MIN_EXP, MAX_EXP]\n  // The minimum exponent value, beneath which underflow to zero occurs.\n  // Number type: -324  (5e-324)\n  MIN_EXP = -1e7,\n      // -1 to -MAX\n  // The maximum exponent value, above which overflow to Infinity occurs.\n  // Number type:  308  (1.7976931348623157e+308)\n  // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n  MAX_EXP = 1e7,\n      // 1 to MAX\n  // Whether to use cryptographically-secure random number generation, if available.\n  CRYPTO = false,\n      // true or false\n  // The modulo mode used when calculating the modulus: a mod n.\n  // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n  // The remainder (r) is calculated as: r = a - n * q.\n  //\n  // UP        0 The remainder is positive if the dividend is negative, else is negative.\n  // DOWN      1 The remainder has the same sign as the dividend.\n  //             This modulo mode is commonly known as 'truncated division' and is\n  //             equivalent to (a % n) in JavaScript.\n  // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n  // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n  // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n  //             The remainder is always positive.\n  //\n  // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n  // modes are commonly used for the modulus operation.\n  // Although the other rounding modes can also be used, they may not give useful results.\n  MODULO_MODE = 1,\n      // 0 to 9\n  // The maximum number of significant digits of the result of the exponentiatedBy operation.\n  // If POW_PRECISION is 0, there will be unlimited significant digits.\n  POW_PRECISION = 0,\n      // 0 to MAX\n  // The format specification used by the BigNumber.prototype.toFormat method.\n  FORMAT = {\n    prefix: '',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    groupSeparator: ',',\n    decimalSeparator: '.',\n    fractionGroupSize: 0,\n    fractionGroupSeparator: '\\xA0',\n    // non-breaking space\n    suffix: ''\n  },\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n  // '-', '.', whitespace, or repeated character.\n  // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n  ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n  // CONSTRUCTOR\n\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\n\n  function BigNumber(v, b) {\n    var alphabet,\n        c,\n        caseChanged,\n        e,\n        i,\n        isNum,\n        len,\n        str,\n        x = this; // Enable constructor call without `new`.\n\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n    if (b == null) {\n      if (v && v._isBigNumber === true) {\n        x.s = v.s;\n\n        if (!v.c || v.e > MAX_EXP) {\n          x.c = x.e = null;\n        } else if (v.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        } else {\n          x.e = v.e;\n          x.c = v.c.slice();\n        }\n\n        return;\n      }\n\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\n        // Use `1 / n` to handle minus zero also.\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n        if (v === ~~v) {\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n          if (e > MAX_EXP) {\n            x.c = x.e = null;\n          } else {\n            x.e = e;\n            x.c = [v];\n          }\n\n          return;\n        }\n\n        str = String(v);\n      } else {\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n      } // Decimal point?\n\n\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n      if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        // Integer.\n        e = str.length;\n      }\n    } else {\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n      intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n      // also rounding to DECIMAL_PLACES as with other bases.\n\n      if (b == 10) {\n        x = new BigNumber(v);\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n      }\n\n      str = String(v);\n\n      if (isNum = typeof v == 'number') {\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n          throw Error(tooManyDigits + v);\n        }\n      } else {\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n      }\n\n      alphabet = ALPHABET.slice(0, b);\n      e = i = 0; // Check that str is a valid base b number.\n      // Don't use RegExp, so alphabet can contain special characters.\n\n      for (len = str.length; i < len; i++) {\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n          if (c == '.') {\n            // If '.' is not the first character and it has not be found before.\n            if (i > e) {\n              e = len;\n              continue;\n            }\n          } else if (!caseChanged) {\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n              caseChanged = true;\n              i = -1;\n              e = 0;\n              continue;\n            }\n          }\n\n          return parseNumeric(x, String(v), isNum, b);\n        }\n      } // Prevent later check for length on converted number.\n\n\n      isNum = false;\n      str = convertBase(str, b, 10, x.s); // Decimal point?\n\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n    } // Determine leading zeros.\n\n\n    for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n    for (len = str.length; str.charCodeAt(--len) === 48;);\n\n    if (str = str.slice(i, ++len)) {\n      len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n      if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n        throw Error(tooManyDigits + x.s * v);\n      } // Overflow?\n\n\n      if ((e = e - i - 1) > MAX_EXP) {\n        // Infinity.\n        x.c = x.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        x.c = [x.e = 0];\n      } else {\n        x.e = e;\n        x.c = []; // Transform base\n        // e is the base 10 exponent.\n        // i is where to slice str to get the first element of the coefficient array.\n\n        i = (e + 1) % LOG_BASE;\n        if (e < 0) i += LOG_BASE; // i < 1\n\n        if (i < len) {\n          if (i) x.c.push(+str.slice(0, i));\n\n          for (len -= LOG_BASE; i < len;) {\n            x.c.push(+str.slice(i, i += LOG_BASE));\n          }\n\n          i = LOG_BASE - (str = str.slice(i)).length;\n        } else {\n          i -= len;\n        }\n\n        for (; i--; str += '0');\n\n        x.c.push(+str);\n      }\n    } else {\n      // Zero.\n      x.c = [x.e = 0];\n    }\n  } // CONSTRUCTOR PROPERTIES\n\n\n  BigNumber.clone = clone;\n  BigNumber.ROUND_UP = 0;\n  BigNumber.ROUND_DOWN = 1;\n  BigNumber.ROUND_CEIL = 2;\n  BigNumber.ROUND_FLOOR = 3;\n  BigNumber.ROUND_HALF_UP = 4;\n  BigNumber.ROUND_HALF_DOWN = 5;\n  BigNumber.ROUND_HALF_EVEN = 6;\n  BigNumber.ROUND_HALF_CEIL = 7;\n  BigNumber.ROUND_HALF_FLOOR = 8;\n  BigNumber.EUCLID = 9;\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\n\n  BigNumber.config = BigNumber.set = function (obj) {\n    var p, v;\n\n    if (obj != null) {\n      if (typeof obj == 'object') {\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          DECIMAL_PLACES = v;\n        } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 8, p);\n          ROUNDING_MODE = v;\n        } // EXPONENTIAL_AT {number|number[]}\n        // Integer, -MAX to MAX inclusive or\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n          v = obj[p];\n\n          if (v && v.pop) {\n            intCheck(v[0], -MAX, 0, p);\n            intCheck(v[1], 0, MAX, p);\n            TO_EXP_NEG = v[0];\n            TO_EXP_POS = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n          }\n        } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'RANGE')) {\n          v = obj[p];\n\n          if (v && v.pop) {\n            intCheck(v[0], -MAX, -1, p);\n            intCheck(v[1], 1, MAX, p);\n            MIN_EXP = v[0];\n            MAX_EXP = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n\n            if (v) {\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n            } else {\n              throw Error(bignumberError + p + ' cannot be zero: ' + v);\n            }\n          }\n        } // CRYPTO {boolean} true or false.\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\n        // '[BigNumber Error] crypto unavailable'\n\n\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\n          v = obj[p];\n\n          if (v === !!v) {\n            if (v) {\n              if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                CRYPTO = v;\n              } else {\n                CRYPTO = !v;\n                throw Error(bignumberError + 'crypto unavailable');\n              }\n            } else {\n              CRYPTO = v;\n            }\n          } else {\n            throw Error(bignumberError + p + ' not true or false: ' + v);\n          }\n        } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 9, p);\n          MODULO_MODE = v;\n        } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          POW_PRECISION = v;\n        } // FORMAT {object}\n        // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\n          v = obj[p];\n          if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n        } // ALPHABET {string}\n        // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\n          v = obj[p]; // Disallow if only one character,\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n          if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n            ALPHABET = v;\n          } else {\n            throw Error(bignumberError + p + ' invalid: ' + v);\n          }\n        }\n      } else {\n        // '[BigNumber Error] Object expected: {v}'\n        throw Error(bignumberError + 'Object expected: ' + obj);\n      }\n    }\n\n    return {\n      DECIMAL_PLACES: DECIMAL_PLACES,\n      ROUNDING_MODE: ROUNDING_MODE,\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n      RANGE: [MIN_EXP, MAX_EXP],\n      CRYPTO: CRYPTO,\n      MODULO_MODE: MODULO_MODE,\n      POW_PRECISION: POW_PRECISION,\n      FORMAT: FORMAT,\n      ALPHABET: ALPHABET\n    };\n  };\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\n\n\n  BigNumber.isBigNumber = function (v) {\n    if (!v || v._isBigNumber !== true) return false;\n    if (!BigNumber.DEBUG) return true;\n    var i,\n        n,\n        c = v.c,\n        e = v.e,\n        s = v.s;\n\n    out: if ({}.toString.call(c) == '[object Array]') {\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n        // If the first element is zero, the BigNumber value must be zero.\n        if (c[0] === 0) {\n          if (e === 0 && c.length === 1) return true;\n          break out;\n        } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n        i = (e + 1) % LOG_BASE;\n        if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n        if (String(c[0]).length == i) {\n          for (i = 0; i < c.length; i++) {\n            n = c[i];\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n          } // Last element cannot be zero, unless it is the only element.\n\n\n          if (n !== 0) return true;\n        }\n      } // Infinity/NaN\n\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n      return true;\n    }\n\n    throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n  };\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\n\n\n  BigNumber.maximum = BigNumber.max = function () {\n    return maxOrMin(arguments, P.lt);\n  };\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\n\n\n  BigNumber.minimum = BigNumber.min = function () {\n    return maxOrMin(arguments, P.gt);\n  };\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\n\n\n  BigNumber.random = function () {\n    var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n    // Check if Math.random() produces more than 32 bits of randomness.\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n    var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n      return mathfloor(Math.random() * pow2_53);\n    } : function () {\n      return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n    };\n    return function (dp) {\n      var a,\n          b,\n          e,\n          k,\n          v,\n          i = 0,\n          c = [],\n          rand = new BigNumber(ONE);\n      if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n      k = mathceil(dp / LOG_BASE);\n\n      if (CRYPTO) {\n        // Browsers supporting crypto.getRandomValues.\n        if (crypto.getRandomValues) {\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n          for (; i < k;) {\n            // 53 bits:\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n            //                                     11111 11111111 11111111\n            // 0x20000 is 2^21.\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n            // 0 <= v < 9007199254740992\n            // Probability that v >= 9e15, is\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n            if (v >= 9e15) {\n              b = crypto.getRandomValues(new Uint32Array(2));\n              a[i] = b[0];\n              a[i + 1] = b[1];\n            } else {\n              // 0 <= v <= 8999999999999999\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 2;\n            }\n          }\n\n          i = k / 2; // Node.js supporting crypto.randomBytes.\n        } else if (crypto.randomBytes) {\n          // buffer\n          a = crypto.randomBytes(k *= 7);\n\n          for (; i < k;) {\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n            // 0 <= v < 9007199254740992\n            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n            if (v >= 9e15) {\n              crypto.randomBytes(7).copy(a, i);\n            } else {\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 7;\n            }\n          }\n\n          i = k / 7;\n        } else {\n          CRYPTO = false;\n          throw Error(bignumberError + 'crypto unavailable');\n        }\n      } // Use Math.random.\n\n\n      if (!CRYPTO) {\n        for (; i < k;) {\n          v = random53bitInt();\n          if (v < 9e15) c[i++] = v % 1e14;\n        }\n      }\n\n      k = c[--i];\n      dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n      if (k && dp) {\n        v = POWS_TEN[LOG_BASE - dp];\n        c[i] = mathfloor(k / v) * v;\n      } // Remove trailing elements which are zero.\n\n\n      for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n      if (i < 0) {\n        c = [e = 0];\n      } else {\n        // Remove leading elements which are zero and adjust exponent accordingly.\n        for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n        if (i < LOG_BASE) e -= LOG_BASE - i;\n      }\n\n      rand.e = e;\n      rand.c = c;\n      return rand;\n    };\n  }();\n  /*\r\n  * Return a BigNumber whose value is the sum of the arguments.\r\n  *\r\n  * arguments {number|string|BigNumber}\r\n  */\n\n\n  BigNumber.sum = function () {\n    var i = 1,\n        args = arguments,\n        sum = new BigNumber(args[0]);\n\n    for (; i < args.length;) sum = sum.plus(args[i++]);\n\n    return sum;\n  }; // PRIVATE FUNCTIONS\n  // Called by BigNumber and BigNumber.prototype.toString.\n\n\n  convertBase = function () {\n    var decimal = '0123456789';\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\n\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\n      var j,\n          arr = [0],\n          arrL,\n          i = 0,\n          len = str.length;\n\n      for (; i < len;) {\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n        arr[0] += alphabet.indexOf(str.charAt(i++));\n\n        for (j = 0; j < arr.length; j++) {\n          if (arr[j] > baseOut - 1) {\n            if (arr[j + 1] == null) arr[j + 1] = 0;\n            arr[j + 1] += arr[j] / baseOut | 0;\n            arr[j] %= baseOut;\n          }\n        }\n      }\n\n      return arr.reverse();\n    } // Convert a numeric string of baseIn to a numeric string of baseOut.\n    // If the caller is toString, we are converting from base 10 to baseOut.\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\n      var alphabet,\n          d,\n          e,\n          k,\n          r,\n          x,\n          xc,\n          y,\n          i = str.indexOf('.'),\n          dp = DECIMAL_PLACES,\n          rm = ROUNDING_MODE; // Non-integer.\n\n      if (i >= 0) {\n        k = POW_PRECISION; // Unlimited precision.\n\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n        y.e = y.c.length;\n      } // Convert the number as integer.\n\n\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n      e = k = xc.length; // Remove trailing zeros.\n\n      for (; xc[--k] == 0; xc.pop()); // Zero?\n\n\n      if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e; // The sign is needed for correct rounding.\n\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      } // xc now represents str converted to baseOut.\n      // THe index of the rounding digit.\n\n\n      d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n      i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\n      // such as 0.00001.\n\n      if (d < 1 || !xc[0]) {\n        // 1^-dp or 0\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n      } else {\n        // Truncate xc to the required number of decimal places.\n        xc.length = d; // Round up?\n\n        if (r) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n\n            if (!d) {\n              ++e;\n              xc = [1].concat(xc);\n            }\n          }\n        } // Determine trailing zeros.\n\n\n        for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.\n\n\n        str = toFixedPoint(str, e, alphabet.charAt(0));\n      } // The caller will add the sign.\n\n\n      return str;\n    };\n  }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n  div = function () {\n    // Assume non-zero x and k.\n    function multiply(x, k, base) {\n      var m,\n          temp,\n          xlo,\n          xhi,\n          carry = 0,\n          i = x.length,\n          klo = k % SQRT_BASE,\n          khi = k / SQRT_BASE | 0;\n\n      for (x = x.slice(); i--;) {\n        xlo = x[i] % SQRT_BASE;\n        xhi = x[i] / SQRT_BASE | 0;\n        m = khi * xlo + xhi * klo;\n        temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n        x[i] = temp % base;\n      }\n\n      if (carry) x = [carry].concat(x);\n      return x;\n    }\n\n    function compare(a, b, aL, bL) {\n      var i, cmp;\n\n      if (aL != bL) {\n        cmp = aL > bL ? 1 : -1;\n      } else {\n        for (i = cmp = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            cmp = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      return cmp;\n    }\n\n    function subtract(a, b, aL, base) {\n      var i = 0; // Subtract b from a.\n\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      } // Remove leading zeros.\n\n\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\n    } // x: dividend, y: divisor.\n\n\n    return function (x, y, dp, rm, base) {\n      var cmp,\n          e,\n          i,\n          more,\n          n,\n          prod,\n          prodL,\n          q,\n          qc,\n          rem,\n          remL,\n          rem0,\n          xi,\n          xL,\n          yc0,\n          yL,\n          yz,\n          s = x.s == y.s ? 1 : -1,\n          xc = x.c,\n          yc = y.c; // Either NaN, Infinity or 0?\n\n      if (!xc || !xc[0] || !yc || !yc[0]) {\n        return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n        xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n      }\n\n      q = new BigNumber(s);\n      qc = q.c = [];\n      e = x.e - y.e;\n      s = dp + e + 1;\n\n      if (!base) {\n        base = BASE;\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n        s = s / LOG_BASE | 0;\n      } // Result exponent may be one less then the current value of e.\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n      if (yc[i] > (xc[i] || 0)) e--;\n\n      if (s < 0) {\n        qc.push(1);\n        more = true;\n      } else {\n        xL = xc.length;\n        yL = yc.length;\n        i = 0;\n        s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n        n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n        if (n > 1) {\n          yc = multiply(yc, n, base);\n          xc = multiply(xc, n, base);\n          yL = yc.length;\n          xL = xc.length;\n        }\n\n        xi = yL;\n        rem = xc.slice(0, yL);\n        remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n        for (; remL < yL; rem[remL++] = 0);\n\n        yz = yc.slice();\n        yz = [0].concat(yz);\n        yc0 = yc[0];\n        if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n        do {\n          n = 0; // Compare divisor and remainder.\n\n          cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n          if (cmp < 0) {\n            // Calculate trial digit, n.\n            rem0 = rem[0];\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n            n = mathfloor(rem0 / yc0); //  Algorithm:\n            //  product = divisor multiplied by trial digit (n).\n            //  Compare product and remainder.\n            //  If product is greater than remainder:\n            //    Subtract divisor from product, decrement trial digit.\n            //  Subtract product from remainder.\n            //  If product was less than remainder at the last compare:\n            //    Compare new remainder and divisor.\n            //    If remainder is greater than divisor:\n            //      Subtract divisor from remainder, increment trial digit.\n\n            if (n > 1) {\n              // n may be > base only when base is 3.\n              if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n              prod = multiply(yc, n, base);\n              prodL = prod.length;\n              remL = rem.length; // Compare product and remainder.\n              // If product > remainder then trial digit n too high.\n              // n is 1 too high about 5% of the time, and is not known to have\n              // ever been more than 1 too high.\n\n              while (compare(prod, rem, prodL, remL) == 1) {\n                n--; // Subtract divisor from product.\n\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                prodL = prod.length;\n                cmp = 1;\n              }\n            } else {\n              // n is 0 or 1, cmp is -1.\n              // If n is 0, there is no need to compare yc and rem again below,\n              // so change cmp to 1 to avoid it.\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\n              if (n == 0) {\n                // divisor < remainder, so n must be at least 1.\n                cmp = n = 1;\n              } // product = divisor\n\n\n              prod = yc.slice();\n              prodL = prod.length;\n            }\n\n            if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n            subtract(rem, prod, remL, base);\n            remL = rem.length; // If product was < remainder.\n\n            if (cmp == -1) {\n              // Compare divisor and new remainder.\n              // If divisor < new remainder, subtract divisor from remainder.\n              // Trial digit n too low.\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\n              while (compare(yc, rem, yL, remL) < 1) {\n                n++; // Subtract divisor from remainder.\n\n                subtract(rem, yL < remL ? yz : yc, remL, base);\n                remL = rem.length;\n              }\n            }\n          } else if (cmp === 0) {\n            n++;\n            rem = [0];\n          } // else cmp === 1 and n will be 0\n          // Add the next digit, n, to the result array.\n\n\n          qc[i++] = n; // Update the remainder.\n\n          if (rem[0]) {\n            rem[remL++] = xc[xi] || 0;\n          } else {\n            rem = [xc[xi]];\n            remL = 1;\n          }\n        } while ((xi++ < xL || rem[0] != null) && s--);\n\n        more = rem[0] != null; // Leading zero?\n\n        if (!qc[0]) qc.splice(0, 1);\n      }\n\n      if (base == BASE) {\n        // To calculate q.e, first get the number of digits of qc[0].\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n      } else {\n        q.e = e;\n        q.r = +more;\n      }\n\n      return q;\n    };\n  }();\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\n\n\n  function format(n, i, rm, id) {\n    var c0, e, ne, len, str;\n    if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n    if (!n.c) return n.toString();\n    c0 = n.c[0];\n    ne = n.e;\n\n    if (i == null) {\n      str = coeffToString(n.c);\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n    } else {\n      n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n      e = n.e;\n      str = coeffToString(n.c);\n      len = str.length; // toPrecision returns exponential notation if the number of significant digits\n      // specified is less than the number of digits necessary to represent the integer\n      // part of the value in fixed-point notation.\n      // Exponential notation.\n\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n        // Append zeros?\n        for (; len < i; str += '0', len++);\n\n        str = toExponential(str, e); // Fixed-point notation.\n      } else {\n        i -= ne;\n        str = toFixedPoint(str, e, '0'); // Append zeros?\n\n        if (e + 1 > len) {\n          if (--i > 0) for (str += '.'; i--; str += '0');\n        } else {\n          i += e - len;\n\n          if (i > 0) {\n            if (e + 1 == len) str += '.';\n\n            for (; i--; str += '0');\n          }\n        }\n      }\n    }\n\n    return n.s < 0 && c0 ? '-' + str : str;\n  } // Handle BigNumber.max and BigNumber.min.\n\n\n  function maxOrMin(args, method) {\n    var n,\n        i = 1,\n        m = new BigNumber(args[0]);\n\n    for (; i < args.length; i++) {\n      n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n      if (!n.s) {\n        m = n;\n        break;\n      } else if (method.call(m, n)) {\n        m = n;\n      }\n    }\n\n    return m;\n  }\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\n\n\n  function normalise(n, c, e) {\n    var i = 1,\n        j = c.length; // Remove trailing zeros.\n\n    for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n    for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n      // Infinity.\n      n.c = n.e = null; // Underflow?\n    } else if (e < MIN_EXP) {\n      // Zero.\n      n.c = [n.e = 0];\n    } else {\n      n.e = e;\n      n.c = c;\n    }\n\n    return n;\n  } // Handle values that fail the validity test in BigNumber.\n\n\n  parseNumeric = function () {\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n        dotAfter = /^([^.]+)\\.$/,\n        dotBefore = /^\\.([^.]+)$/,\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n    return function (x, str, isNum, b) {\n      var base,\n          s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n      if (isInfinityOrNaN.test(s)) {\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n      } else {\n        if (!isNum) {\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n          s = s.replace(basePrefix, function (m, p1, p2) {\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n            return !b || b == base ? p1 : m;\n          });\n\n          if (b) {\n            base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n          }\n\n          if (str != s) return new BigNumber(s, base);\n        } // '[BigNumber Error] Not a number: {n}'\n        // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n        if (BigNumber.DEBUG) {\n          throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n        } // NaN\n\n\n        x.s = null;\n      }\n\n      x.c = x.e = null;\n    };\n  }();\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\n\n\n  function round(x, sd, rm, r) {\n    var d,\n        i,\n        j,\n        k,\n        n,\n        ni,\n        rd,\n        xc = x.c,\n        pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n    if (xc) {\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\n      // ni is the index of n within x.c.\n      // d is the number of digits of n.\n      // i is the index of rd within n including leading zeros.\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\n      out: {\n        // Get the number of digits of the first element of xc.\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n        i = sd - d; // If the rounding digit is in the first element of xc...\n\n        if (i < 0) {\n          i += LOG_BASE;\n          j = sd;\n          n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n          rd = n / pows10[d - j - 1] % 10 | 0;\n        } else {\n          ni = mathceil((i + 1) / LOG_BASE);\n\n          if (ni >= xc.length) {\n            if (r) {\n              // Needed by sqrt.\n              for (; xc.length <= ni; xc.push(0));\n\n              n = rd = 0;\n              d = 1;\n              i %= LOG_BASE;\n              j = i - LOG_BASE + 1;\n            } else {\n              break out;\n            }\n          } else {\n            n = k = xc[ni]; // Get the number of digits of n.\n\n            for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n            i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n            // The number of leading zeros of n is given by LOG_BASE - d.\n\n            j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n          }\n        }\n\n        r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n        r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n        (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n        if (sd < 1 || !xc[0]) {\n          xc.length = 0;\n\n          if (r) {\n            // Convert sd to decimal places.\n            sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n            x.e = -sd || 0;\n          } else {\n            // Zero.\n            xc[0] = x.e = 0;\n          }\n\n          return x;\n        } // Remove excess digits.\n\n\n        if (i == 0) {\n          xc.length = ni;\n          k = 1;\n          ni--;\n        } else {\n          xc.length = ni + 1;\n          k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n          // j > 0 means i > number of leading zeros of n.\n\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n        } // Round up?\n\n\n        if (r) {\n          for (;;) {\n            // If the digit to be rounded up is in the first element of xc...\n            if (ni == 0) {\n              // i will be the length of xc[0] before k is added.\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n              j = xc[0] += k;\n\n              for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n              if (i != k) {\n                x.e++;\n                if (xc[0] == BASE) xc[0] = 1;\n              }\n\n              break;\n            } else {\n              xc[ni] += k;\n              if (xc[ni] != BASE) break;\n              xc[ni--] = 0;\n              k = 1;\n            }\n          }\n        } // Remove trailing zeros.\n\n\n        for (i = xc.length; xc[--i] === 0; xc.pop());\n      } // Overflow? Infinity.\n\n\n      if (x.e > MAX_EXP) {\n        x.c = x.e = null; // Underflow? Zero.\n      } else if (x.e < MIN_EXP) {\n        x.c = [x.e = 0];\n      }\n    }\n\n    return x;\n  }\n\n  function valueOf(n) {\n    var str,\n        e = n.e;\n    if (e === null) return n.toString();\n    str = coeffToString(n.c);\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n    return n.s < 0 ? '-' + str : str;\n  } // PROTOTYPE/INSTANCE METHODS\n\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\n\n\n  P.absoluteValue = P.abs = function () {\n    var x = new BigNumber(this);\n    if (x.s < 0) x.s = 1;\n    return x;\n  };\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\n\n\n  P.comparedTo = function (y, b) {\n    return compare(this, new BigNumber(y, b));\n  };\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n\n\n  P.decimalPlaces = P.dp = function (dp, rm) {\n    var c,\n        n,\n        v,\n        x = this;\n\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(new BigNumber(x), dp + x.e + 1, rm);\n    }\n\n    if (!(c = x.c)) return null;\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n    if (n < 0) n = 0;\n    return n;\n  };\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\n\n\n  P.dividedBy = P.div = function (y, b) {\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n  };\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\n\n\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\n    return div(this, new BigNumber(y, b), 0, 1);\n  };\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\n\n\n  P.exponentiatedBy = P.pow = function (n, m) {\n    var half,\n        isModExp,\n        i,\n        k,\n        more,\n        nIsBig,\n        nIsNeg,\n        nIsOdd,\n        y,\n        x = this;\n    n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n    if (n.c && !n.isInteger()) {\n      throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n    }\n\n    if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n    nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n      // The sign of the result of pow when x is negative depends on the evenness of n.\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n      return m ? y.mod(m) : y;\n    }\n\n    nIsNeg = n.s < 0;\n\n    if (m) {\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n      if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n    ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n    : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n      // If x is negative and n is odd, k = -0, else k = 0.\n      k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n      if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n      return new BigNumber(nIsNeg ? 1 / k : k);\n    } else if (POW_PRECISION) {\n      // Truncating each coefficient array to a length of k after each multiplication\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\n      // i.e. there will be a minimum of 28 guard digits retained.\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\n    }\n\n    if (nIsBig) {\n      half = new BigNumber(0.5);\n      if (nIsNeg) n.s = 1;\n      nIsOdd = isOdd(n);\n    } else {\n      i = Math.abs(+valueOf(n));\n      nIsOdd = i % 2;\n    }\n\n    y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n    for (;;) {\n      if (nIsOdd) {\n        y = y.times(x);\n        if (!y.c) break;\n\n        if (k) {\n          if (y.c.length > k) y.c.length = k;\n        } else if (isModExp) {\n          y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (i) {\n        i = mathfloor(i / 2);\n        if (i === 0) break;\n        nIsOdd = i % 2;\n      } else {\n        n = n.times(half);\n        round(n, n.e + 1, 1);\n\n        if (n.e > 14) {\n          nIsOdd = isOdd(n);\n        } else {\n          i = +valueOf(n);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        }\n      }\n\n      x = x.times(x);\n\n      if (k) {\n        if (x.c && x.c.length > k) x.c.length = k;\n      } else if (isModExp) {\n        x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n      }\n    }\n\n    if (isModExp) return y;\n    if (nIsNeg) y = ONE.div(y);\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n  };\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\n\n\n  P.integerValue = function (rm) {\n    var n = new BigNumber(this);\n    if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n    return round(n, n.e + 1, rm);\n  };\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n\n\n  P.isEqualTo = P.eq = function (y, b) {\n    return compare(this, new BigNumber(y, b)) === 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\n\n\n  P.isFinite = function () {\n    return !!this.c;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n\n\n  P.isGreaterThan = P.gt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) > 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\n\n\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\n\n\n  P.isInteger = function () {\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n\n\n  P.isLessThan = P.lt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) < 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\n\n\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\n\n\n  P.isNaN = function () {\n    return !this.s;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\n\n\n  P.isNegative = function () {\n    return this.s < 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\n\n\n  P.isPositive = function () {\n    return this.s > 0;\n  };\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\n\n\n  P.isZero = function () {\n    return !!this.c && this.c[0] == 0;\n  };\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\n\n\n  P.minus = function (y, b) {\n    var i,\n        j,\n        t,\n        xLTy,\n        x = this,\n        a = x.s;\n    y = new BigNumber(y, b);\n    b = y.s; // Either NaN?\n\n    if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n\n    if (!xe || !ye) {\n      // Either Infinity?\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n      if (!xc[0] || !yc[0]) {\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n        ROUNDING_MODE == 3 ? -0 : 0);\n      }\n    }\n\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice(); // Determine which is the bigger number.\n\n    if (a = xe - ye) {\n      if (xLTy = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse(); // Prepend zeros to equalise exponents.\n\n      for (b = a; b--; t.push(0));\n\n      t.reverse();\n    } else {\n      // Exponents equal. Check digit by digit.\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xLTy = xc[b] < yc[b];\n          break;\n        }\n      }\n    } // x < y? Point xc to the array of the bigger number.\n\n\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n    b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n    if (b > 0) for (; b--; xc[i++] = 0);\n    b = BASE - 1; // Subtract yc from xc.\n\n    for (; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i]; xc[i] = b);\n\n        --xc[i];\n        xc[j] += BASE;\n      }\n\n      xc[j] -= yc[j];\n    } // Remove leading zeros and adjust exponent accordingly.\n\n\n    for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n    if (!xc[0]) {\n      // Following IEEE 754 (2008) 6.3,\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\n      y.c = [y.e = 0];\n      return y;\n    } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n    // for finite x and y.\n\n\n    return normalise(y, xc, ye);\n  };\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\n\n\n  P.modulo = P.mod = function (y, b) {\n    var q,\n        s,\n        x = this;\n    y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n    if (!x.c || !y.s || y.c && !y.c[0]) {\n      return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n    } else if (!y.c || x.c && !x.c[0]) {\n      return new BigNumber(x);\n    }\n\n    if (MODULO_MODE == 9) {\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // r = x - qy    where  0 <= r < abs(y)\n      s = y.s;\n      y.s = 1;\n      q = div(x, y, 0, 3);\n      y.s = s;\n      q.s *= s;\n    } else {\n      q = div(x, y, 0, MODULO_MODE);\n    }\n\n    y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n    return y;\n  };\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\n\n\n  P.multipliedBy = P.times = function (y, b) {\n    var c,\n        e,\n        i,\n        j,\n        k,\n        m,\n        xcL,\n        xlo,\n        xhi,\n        ycL,\n        ylo,\n        yhi,\n        zc,\n        base,\n        sqrtBase,\n        x = this,\n        xc = x.c,\n        yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n    if (!xc || !yc || !xc[0] || !yc[0]) {\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n        y.c = y.e = y.s = null;\n      } else {\n        y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n        if (!xc || !yc) {\n          y.c = y.e = null; // Return ±0 if either is ±0.\n        } else {\n          y.c = [0];\n          y.e = 0;\n        }\n      }\n\n      return y;\n    }\n\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n    y.s *= x.s;\n    xcL = xc.length;\n    ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n    base = BASE;\n    sqrtBase = SQRT_BASE;\n\n    for (i = ycL; --i >= 0;) {\n      c = 0;\n      ylo = yc[i] % sqrtBase;\n      yhi = yc[i] / sqrtBase | 0;\n\n      for (k = xcL, j = i + k; j > i;) {\n        xlo = xc[--k] % sqrtBase;\n        xhi = xc[k] / sqrtBase | 0;\n        m = yhi * xlo + xhi * ylo;\n        xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n        zc[j--] = xlo % base;\n      }\n\n      zc[j] = c;\n    }\n\n    if (c) {\n      ++e;\n    } else {\n      zc.splice(0, 1);\n    }\n\n    return normalise(y, zc, e);\n  };\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\n\n\n  P.negated = function () {\n    var x = new BigNumber(this);\n    x.s = -x.s || null;\n    return x;\n  };\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\n\n\n  P.plus = function (y, b) {\n    var t,\n        x = this,\n        a = x.s;\n    y = new BigNumber(y, b);\n    b = y.s; // Either NaN?\n\n    if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.minus(y);\n    }\n\n    var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n\n    if (!xe || !ye) {\n      // Return ±Infinity if either ±Infinity.\n      if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n    }\n\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n    if (a = xe - ye) {\n      if (a > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        a = -a;\n        t = xc;\n      }\n\n      t.reverse();\n\n      for (; a--; t.push(0));\n\n      t.reverse();\n    }\n\n    a = xc.length;\n    b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n    for (a = 0; b;) {\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n    }\n\n    if (a) {\n      xc = [a].concat(xc);\n      ++ye;\n    } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    // ye = MAX_EXP + 1 possible\n\n\n    return normalise(y, xc, ye);\n  };\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\n\n\n  P.precision = P.sd = function (sd, rm) {\n    var c,\n        n,\n        v,\n        x = this;\n\n    if (sd != null && sd !== !!sd) {\n      intCheck(sd, 1, MAX);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(new BigNumber(x), sd, rm);\n    }\n\n    if (!(c = x.c)) return null;\n    v = c.length - 1;\n    n = v * LOG_BASE + 1;\n\n    if (v = c[v]) {\n      // Subtract the number of trailing zeros of the last element.\n      for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n      for (v = c[0]; v >= 10; v /= 10, n++);\n    }\n\n    if (sd && x.e + 1 > n) n = x.e + 1;\n    return n;\n  };\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\n\n\n  P.shiftedBy = function (k) {\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n    return this.times('1e' + k);\n  };\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\n\n\n  P.squareRoot = P.sqrt = function () {\n    var m,\n        n,\n        r,\n        rep,\n        t,\n        x = this,\n        c = x.c,\n        s = x.s,\n        e = x.e,\n        dp = DECIMAL_PLACES + 4,\n        half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n    if (s !== 1 || !c || !c[0]) {\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n    } // Initial estimate.\n\n\n    s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n    if (s == 0 || s == 1 / 0) {\n      n = coeffToString(c);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(+n);\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new BigNumber(n);\n    } else {\n      r = new BigNumber(s + '');\n    } // Check for zero.\n    // r could be zero if MIN_EXP is changed after the this value was created.\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n    // coeffToString to throw.\n\n\n    if (r.c[0]) {\n      e = r.e;\n      s = e + dp;\n      if (s < 3) s = 0; // Newton-Raphson iteration.\n\n      for (;;) {\n        t = r;\n        r = half.times(t.plus(div(x, t, dp, 1)));\n\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n          // The exponent of r may here be one less than the final result exponent,\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n          // are indexed correctly.\n          if (r.e < e) --s;\n          n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n          // iteration.\n\n          if (n == '9999' || !rep && n == '4999') {\n            // On the first iteration only, check to see if rounding up gives the\n            // exact result as the nines may infinitely repeat.\n            if (!rep) {\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n              if (t.times(t).eq(x)) {\n                r = t;\n                break;\n              }\n            }\n\n            dp += 4;\n            s += 4;\n            rep = 1;\n          } else {\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n            // result. If not, then there are further digits and m will be truthy.\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n              // Truncate to the first rounding digit.\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\n              m = !r.times(r).eq(x);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n\n\n  P.toExponential = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp++;\n    }\n\n    return format(this, dp, rm, 1);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n\n\n  P.toFixed = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp = dp + this.e + 1;\n    }\n\n    return format(this, dp, rm);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\n\n\n  P.toFormat = function (dp, rm, format) {\n    var str,\n        x = this;\n\n    if (format == null) {\n      if (dp != null && rm && typeof rm == 'object') {\n        format = rm;\n        rm = null;\n      } else if (dp && typeof dp == 'object') {\n        format = dp;\n        dp = rm = null;\n      } else {\n        format = FORMAT;\n      }\n    } else if (typeof format != 'object') {\n      throw Error(bignumberError + 'Argument not an object: ' + format);\n    }\n\n    str = x.toFixed(dp, rm);\n\n    if (x.c) {\n      var i,\n          arr = str.split('.'),\n          g1 = +format.groupSize,\n          g2 = +format.secondaryGroupSize,\n          groupSeparator = format.groupSeparator || '',\n          intPart = arr[0],\n          fractionPart = arr[1],\n          isNeg = x.s < 0,\n          intDigits = isNeg ? intPart.slice(1) : intPart,\n          len = intDigits.length;\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n      if (g1 > 0 && len > 0) {\n        i = len % g1 || g1;\n        intPart = intDigits.substr(0, i);\n\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n        if (isNeg) intPart = '-' + intPart;\n      }\n\n      str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n    }\n\n    return (format.prefix || '') + str + (format.suffix || '');\n  };\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\n\n\n  P.toFraction = function (md) {\n    var d,\n        d0,\n        d1,\n        d2,\n        e,\n        exp,\n        n,\n        n0,\n        n1,\n        q,\n        r,\n        s,\n        x = this,\n        xc = x.c;\n\n    if (md != null) {\n      n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n        throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n      }\n    }\n\n    if (!xc) return new BigNumber(x);\n    d = new BigNumber(ONE);\n    n1 = d0 = new BigNumber(ONE);\n    d1 = n0 = new BigNumber(ONE);\n    s = coeffToString(xc); // Determine initial denominator.\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n    e = d.e = s.length - x.e - 1;\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n    md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n    exp = MAX_EXP;\n    MAX_EXP = 1 / 0;\n    n = new BigNumber(s); // n0 = d1 = 0\n\n    n0.c[0] = 0;\n\n    for (;;) {\n      q = div(n, d, 0, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.comparedTo(md) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      n1 = n0.plus(q.times(d2 = n1));\n      n0 = d2;\n      d = n.minus(q.times(d2 = d));\n      n = d2;\n    }\n\n    d2 = div(md.minus(d0), d1, 0, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n    e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n    MAX_EXP = exp;\n    return r;\n  };\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\n\n\n  P.toNumber = function () {\n    return +valueOf(this);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\n\n\n  P.toPrecision = function (sd, rm) {\n    if (sd != null) intCheck(sd, 1, MAX);\n    return format(this, sd, rm, 2);\n  };\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\n\n\n  P.toString = function (b) {\n    var str,\n        n = this,\n        s = n.s,\n        e = n.e; // Infinity or NaN?\n\n    if (e === null) {\n      if (s) {\n        str = 'Infinity';\n        if (s < 0) str = '-' + str;\n      } else {\n        str = 'NaN';\n      }\n    } else {\n      if (b == null) {\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n      } else if (b === 10) {\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\n      } else {\n        intCheck(b, 2, ALPHABET.length, 'Base');\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n      }\n\n      if (s < 0 && n.c[0]) str = '-' + str;\n    }\n\n    return str;\n  };\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\n\n\n  P.valueOf = P.toJSON = function () {\n    return valueOf(this);\n  };\n\n  P._isBigNumber = true;\n  P[Symbol.toStringTag] = 'BigNumber'; // Node.js v10.12.0+\n\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\n  if (configObject != null) BigNumber.set(configObject);\n  return BigNumber;\n} // PRIVATE HELPER FUNCTIONS\n// These functions don't need access to variables,\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\nfunction bitFloor(n) {\n  var i = n | 0;\n  return n > 0 || n === i ? i : i - 1;\n} // Return a coefficient array as a string of base 10 digits.\n\n\nfunction coeffToString(a) {\n  var s,\n      z,\n      i = 1,\n      j = a.length,\n      r = a[0] + '';\n\n  for (; i < j;) {\n    s = a[i++] + '';\n    z = LOG_BASE - s.length;\n\n    for (; z--; s = '0' + s);\n\n    r += s;\n  } // Determine trailing zeros.\n\n\n  for (j = r.length; r.charCodeAt(--j) === 48;);\n\n  return r.slice(0, j + 1 || 1);\n} // Compare the value of BigNumbers x and y.\n\n\nfunction compare(x, y) {\n  var a,\n      b,\n      xc = x.c,\n      yc = y.c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e; // Either NaN?\n\n  if (!i || !j) return null;\n  a = xc && !xc[0];\n  b = yc && !yc[0]; // Either zero?\n\n  if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n  if (i != j) return i;\n  a = i < 0;\n  b = k == l; // Either Infinity?\n\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n  if (!b) return k > l ^ a ? 1 : -1;\n  j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\n}\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\n\n\nfunction intCheck(n, min, max, name) {\n  if (n < min || n > max || n !== mathfloor(n)) {\n    throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n  }\n} // Assumes finite n.\n\n\nfunction isOdd(n) {\n  var k = n.c.length - 1;\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n}\n\nfunction toExponential(str, e) {\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n}\n\nfunction toFixedPoint(str, e, z) {\n  var len, zs; // Negative exponent?\n\n  if (e < 0) {\n    // Prepend zeros.\n    for (zs = z + '.'; ++e; zs += z);\n\n    str = zs + str; // Positive exponent\n  } else {\n    len = str.length; // Append zeros.\n\n    if (++e > len) {\n      for (zs = z, e -= len; --e; zs += z);\n\n      str += zs;\n    } else if (e < len) {\n      str = str.slice(0, e) + '.' + str.slice(e);\n    }\n  }\n\n  return str;\n} // EXPORT\n\n\nexport var BigNumber = clone();\nexport default BigNumber;","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/bignumber.js/bignumber.mjs"],"names":["isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","BigNumber","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","b","alphabet","c","caseChanged","e","i","isNum","len","str","x","_isBigNumber","s","slice","String","test","charCodeAt","indexOf","replace","search","substring","length","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","pop","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","n","out","call","maximum","max","maxOrMin","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","k","rand","Uint32Array","copy","splice","sum","args","plus","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","reverse","sign","callerIsToString","d","r","xc","y","rm","pow","toFixedPoint","coeffToString","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","id","c0","ne","toExponential","method","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","sd","ni","rd","pows10","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","Symbol","toStringTag","for","z","l","name","zs"],"mappings":"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","sourcesContent":["/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if only one character,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n"]},"metadata":{},"sourceType":"module"}