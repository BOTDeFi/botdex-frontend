{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Pools/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport cn from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport { ReactComponent as CardViewIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!@/assets/img/icons/card-view.svg\";\nimport { ReactComponent as ListViewIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!@/assets/img/icons/list-view.svg\";\nimport { Button } from '@/components/atoms';\nimport { CollectModal, ItemsController, StakeUnstakeModal } from '@/components/organisms';\nimport { PoolCard, PoolsPreview, PoolTable } from '@/components/sections/Pools';\nimport { getAprData } from '@/components/sections/Pools/PoolCard/utils';\nimport useRefresh from '@/hooks/useRefresh';\nimport { getAddress } from '@/services/web3/contractHelpers';\nimport { useMst } from '@/store';\nimport { getFarmMode, getRefineryVaultEarnings } from '@/store/pools/helpers';\nimport { usePools, useSelectVaultData } from '@/store/pools/hooks';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { feeFormatter } from '@/utils/formatters';\nimport { clog } from '@/utils/logger';\nimport './Pools.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar PoolsContentView;\n\n(function (PoolsContentView) {\n  PoolsContentView[\"list\"] = \"list\";\n  PoolsContentView[\"card\"] = \"card\";\n})(PoolsContentView || (PoolsContentView = {}));\n\nconst ListCardViewButtons = ({\n  view,\n  onChange\n}) => {\n  const prefixContainer = [{\n    key: 'list-view-mode',\n    icon: ListViewIcon,\n    handler: () => onChange(true),\n    activeClassCondition: view === PoolsContentView.list,\n    title: 'List View'\n  }, {\n    key: 'card-view-mode',\n    icon: CardViewIcon,\n    handler: () => onChange(false),\n    activeClassCondition: view === PoolsContentView.card,\n    title: 'Card View'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pools__i-contr-prefix box-f-ai-c\",\n    children: prefixContainer.map(item => {\n      const {\n        key,\n        handler,\n        activeClassCondition,\n        title\n      } = item;\n      return /*#__PURE__*/_jsxDEV(Button, {\n        className: \"pools__i-contr-button\",\n        title: title,\n        colorScheme: \"white\",\n        size: \"ssm\",\n        onClick: handler,\n        children: /*#__PURE__*/_jsxDEV(item.icon, {\n          className: cn('pools__i-contr-icon', {\n            'pools__i-contr-icon_active': activeClassCondition\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ListCardViewButtons;\n\nconst PoolsContent = ({\n  view,\n  content\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pools__content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `pools__content-${view}-view`,\n      children: [view === PoolsContentView.list && /*#__PURE__*/_jsxDEV(PoolTable, {\n        data: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 44\n      }, this), view === PoolsContentView.card && content.map(pool => {\n        const farmMode = getFarmMode(pool);\n        return /*#__PURE__*/_jsxDEV(PoolCard, {\n          farmMode: farmMode,\n          pool: pool\n        }, pool.isAutoVault ? 'auto-pool' : pool.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = PoolsContent;\nvar FilterBy;\n\n(function (FilterBy) {\n  FilterBy[\"name\"] = \"name\";\n  FilterBy[\"stakedOnly\"] = \"stakedOnly\";\n  FilterBy[\"poolsType\"] = \"poolsType\";\n})(FilterBy || (FilterBy = {}));\n\nvar PoolsType;\n\n(function (PoolsType) {\n  PoolsType[\"live\"] = \"live\";\n  PoolsType[\"finished\"] = \"finished\";\n})(PoolsType || (PoolsType = {}));\n\nvar SortOptions; // type ISortOptions = keyof typeof SortOptions;\n\n(function (SortOptions) {\n  SortOptions[\"hot\"] = \"Hot\";\n  SortOptions[\"apr\"] = \"APR\";\n  SortOptions[\"earned\"] = \"Earned\";\n  SortOptions[\"totalStaked\"] = \"Total staked\";\n})(SortOptions || (SortOptions = {}));\n\nconst Pools = observer(_c3 = _s(() => {\n  _s();\n\n  const {\n    user,\n    pools: poolsStore\n  } = useMst();\n  const {\n    pools: poolsWithoutAutoVault\n  } = usePools();\n  const {\n    totalRefineryInVault,\n    pricePerFullShare,\n    userData: {\n      refineryAtLastUserAction,\n      userShares\n    },\n    fees: {\n      performanceFee\n    }\n  } = useSelectVaultData(); // const [filteredPools, setFilteredPools] = useState(poolsWithoutAutoVault);\n\n  const [appliedFilters, setAppliedFilters] = useState(new Map());\n  const [isListView, setIsListView] = useState(localStorage['refinery-finance-pools-view'] === PoolsContentView.list); // const [poolsTypeFilter, setPoolsTypeFilter] = useState(PoolsType.live);\n\n  const [sortOption, setSortOption] = useState(SortOptions.hot);\n  const filter = useCallback(() => {\n    return [...appliedFilters.values()].reduce((acc, filterFunc) => {\n      return acc.filter(filterFunc);\n    }, poolsWithoutAutoVault);\n  }, [appliedFilters, poolsWithoutAutoVault]);\n  const sort = useCallback(array => {\n    let sortFunc;\n\n    switch (sortOption) {\n      case SortOptions.apr:\n        {\n          const performanceFeeAsDecimal = feeFormatter(Number(performanceFee));\n\n          const getAprValue = pool => {\n            // Ternary is needed to prevent pools without APR getting top spot\n            return pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0;\n          };\n\n          sortFunc = (pool1, pool2) => getAprValue(pool2) - getAprValue(pool1);\n\n          break;\n        }\n\n      case SortOptions.earned:\n        {\n          const getPoolEarnedValue = pool => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0;\n            }\n\n            const tokenEarnings = pool.isAutoVault ? new BigNumber(getRefineryVaultEarnings(user.address, refineryAtLastUserAction || BIG_ZERO, userShares || BIG_ZERO, pricePerFullShare || BIG_ZERO).autoRefineryToDisplay) : pool.userData.pendingReward;\n            return tokenEarnings.times(pool.earningTokenPrice).toNumber();\n          };\n\n          sortFunc = (pool1, pool2) => getPoolEarnedValue(pool2) - getPoolEarnedValue(pool1);\n\n          break;\n        }\n\n      case SortOptions.totalStaked:\n        {\n          const getPoolTotalStaked = pool => {\n            var _pool$totalStaked;\n\n            return pool.isAutoVault ? (totalRefineryInVault === null || totalRefineryInVault === void 0 ? void 0 : totalRefineryInVault.toNumber()) || 0 : ((_pool$totalStaked = pool.totalStaked) === null || _pool$totalStaked === void 0 ? void 0 : _pool$totalStaked.toNumber()) || 0;\n          };\n\n          sortFunc = (pool1, pool2) => getPoolTotalStaked(pool2) - getPoolTotalStaked(pool1);\n\n          break;\n        }\n\n      case SortOptions.hot:\n      default:\n        {\n          sortFunc = () => 0;\n\n          break;\n        }\n    }\n\n    return [...array].sort(sortFunc);\n  }, [sortOption, totalRefineryInVault, performanceFee, pricePerFullShare, refineryAtLastUserAction, user.address, userShares]);\n  const filteredPools = useMemo(() => sort(filter()), [sort, filter]);\n  const pools = useMemo(() => {\n    const refinerPool = filteredPools.find(pool => pool.id === 0);\n    let refinerAutoVault;\n\n    if (refinerPool) {\n      refinerAutoVault = { ...refinerPool,\n        isAutoVault: true\n      };\n      return [refinerAutoVault, ...filteredPools];\n    }\n\n    return filteredPools;\n  }, [filteredPools]);\n\n  const handleSwitchView = value => {\n    localStorage['refinery-finance-pools-view'] = value ? PoolsContentView.list : PoolsContentView.card;\n    setIsListView(value);\n  };\n\n  const filterByStakedOnly = (value, isStaked) => {\n    if (!isStaked) return true; // show all\n\n    return !Number.isNaN(value.toNumber()) && value.gt(0);\n  };\n\n  const filterByName = (whereToFind, toBeFound) => {\n    return whereToFind.split(' ').some(value => {\n      return value.toUpperCase().startsWith(toBeFound.toUpperCase());\n    });\n  };\n\n  const handleStakedSwitchChange = isStaked => {\n    setAppliedFilters(new Map([...appliedFilters, [FilterBy.stakedOnly, ({\n      userData\n    }) => filterByStakedOnly((userData === null || userData === void 0 ? void 0 : userData.stakedBalance) ? userData.stakedBalance : BIG_ZERO, isStaked)]]));\n  };\n\n  const searchByTokenAddress = (stakingToken, earningToken, value) => {\n    return filterByName(`${getAddress(stakingToken.address)} ${getAddress(earningToken.address)}`, value);\n  };\n\n  const searchByTokenSymbol = (stakingToken, earningToken, value) => {\n    return filterByName(`${stakingToken.symbol} ${earningToken.symbol}`, value);\n  };\n\n  const handleSearch = value => {\n    const validatedValue = String(value);\n    setAppliedFilters(new Map([...appliedFilters, [FilterBy.name, ({\n      stakingToken,\n      earningToken\n    }) => {\n      if (validatedValue.startsWith('0x')) {\n        return searchByTokenAddress(stakingToken, earningToken, validatedValue);\n      }\n\n      return searchByTokenSymbol(stakingToken, earningToken, validatedValue);\n    }]]));\n  };\n\n  const handleRadioGroupChange = e => {\n    // setPoolsTypeFilter(e.target.value);\n    const selectedTab = e.target.value;\n    const isOpenedLiveTab = PoolsType.live === selectedTab;\n    setAppliedFilters(new Map([...appliedFilters, [FilterBy.poolsType, ({\n      isFinished = false\n    }) => {\n      if (isOpenedLiveTab) return !isFinished;\n      return isFinished;\n    }]]));\n  };\n\n  const handleSortSelectChange = selected => {\n    const {\n      value\n    } = selected;\n    setSortOption(value);\n    clog(value);\n  };\n\n  useEffect(() => {\n    // Live Pools filter\n    const selectedTab = PoolsType.live;\n    const isOpenedLiveTab = PoolsType.live === selectedTab; // Is Staked Only filter\n\n    const isStaked = false;\n    setAppliedFilters(new Map([[FilterBy.poolsType, ({\n      isFinished = false\n    }) => {\n      if (isOpenedLiveTab) return !isFinished;\n      return isFinished;\n    }], [FilterBy.stakedOnly, ({\n      userData\n    }) => filterByStakedOnly((userData === null || userData === void 0 ? void 0 : userData.stakedBalance) ? userData.stakedBalance : BIG_ZERO, isStaked)]]));\n  }, []);\n  const {\n    slowRefresh,\n    fastRefresh\n  } = useRefresh(); // <-- Fetch Vault Data -->\n\n  useEffect(() => {\n    poolsStore.fetchVaultPublicData();\n  }, [poolsStore, fastRefresh]);\n  useEffect(() => {\n    if (user.address) {\n      poolsStore.fetchVaultUserData(user.address);\n    }\n  }, [poolsStore, user.address, fastRefresh]);\n  useEffect(() => {\n    poolsStore.fetchVaultFees();\n  }, [poolsStore]); // <-- Fetch Pools Data -->\n\n  useEffect(() => {\n    poolsStore.fetchPoolsPublicData();\n  }, [poolsStore, slowRefresh]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"pools\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(PoolsPreview, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ItemsController, {\n          prefixContainer: /*#__PURE__*/_jsxDEV(ListCardViewButtons, {\n            view: isListView ? PoolsContentView.list : PoolsContentView.card,\n            onChange: handleSwitchView\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this),\n          radioGroupOptions: [{\n            text: 'Live',\n            value: PoolsType.live\n          }, {\n            text: 'Finished',\n            value: PoolsType.finished\n          }],\n          radioGroupClassName: \"pools__i-contr\",\n          sortOptions: ['Hot', 'APR', 'Earned', 'Total staked'],\n          searchPlaceholder: \"Search Pools\",\n          searchDelay: 300,\n          onSearchChange: handleSearch,\n          onStakedSwitchChange: handleStakedSwitchChange,\n          onRadioGroupChange: handleRadioGroupChange,\n          onSortSelectChange: handleSortSelectChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PoolsContent, {\n          view: isListView ? PoolsContentView.list : PoolsContentView.card,\n          content: pools\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StakeUnstakeModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CollectModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}, \"S26igbS0VAKYplOuVKTdM+f1coc=\", false, function () {\n  return [useMst, usePools, useSelectVaultData, useRefresh];\n}));\n_c4 = Pools;\nexport default Pools;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ListCardViewButtons\");\n$RefreshReg$(_c2, \"PoolsContent\");\n$RefreshReg$(_c3, \"Pools$observer\");\n$RefreshReg$(_c4, \"Pools\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Pools/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","BigNumber","cn","observer","Button","CollectModal","ItemsController","StakeUnstakeModal","PoolCard","PoolsPreview","PoolTable","getAprData","useRefresh","getAddress","useMst","getFarmMode","getRefineryVaultEarnings","usePools","useSelectVaultData","BIG_ZERO","feeFormatter","clog","PoolsContentView","ListCardViewButtons","view","onChange","prefixContainer","key","icon","ListViewIcon","handler","activeClassCondition","list","title","CardViewIcon","card","map","item","PoolsContent","content","pool","farmMode","isAutoVault","id","FilterBy","PoolsType","SortOptions","Pools","user","pools","poolsStore","poolsWithoutAutoVault","totalRefineryInVault","pricePerFullShare","userData","refineryAtLastUserAction","userShares","fees","performanceFee","appliedFilters","setAppliedFilters","Map","isListView","setIsListView","localStorage","sortOption","setSortOption","hot","filter","values","reduce","acc","filterFunc","sort","array","sortFunc","apr","performanceFeeAsDecimal","Number","getAprValue","pool1","pool2","earned","getPoolEarnedValue","earningTokenPrice","tokenEarnings","address","autoRefineryToDisplay","pendingReward","times","toNumber","totalStaked","getPoolTotalStaked","filteredPools","refinerPool","find","refinerAutoVault","handleSwitchView","value","filterByStakedOnly","isStaked","isNaN","gt","filterByName","whereToFind","toBeFound","split","some","toUpperCase","startsWith","handleStakedSwitchChange","stakedOnly","stakedBalance","searchByTokenAddress","stakingToken","earningToken","searchByTokenSymbol","symbol","handleSearch","validatedValue","String","name","handleRadioGroupChange","e","selectedTab","target","isOpenedLiveTab","live","poolsType","isFinished","handleSortSelectChange","selected","slowRefresh","fastRefresh","fetchVaultPublicData","fetchVaultUserData","fetchVaultFees","fetchPoolsPublicData","text","finished"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport { SwitchClickEventHandler } from 'antd/lib/switch';\nimport BigNumber from 'bignumber.js/bignumber';\nimport cn from 'classnames';\nimport { observer } from 'mobx-react-lite';\n\nimport { ReactComponent as CardViewIcon } from '@/assets/img/icons/card-view.svg';\nimport { ReactComponent as ListViewIcon } from '@/assets/img/icons/list-view.svg';\nimport { Button } from '@/components/atoms';\nimport { CollectModal, ItemsController, StakeUnstakeModal } from '@/components/organisms';\nimport { PoolCard, PoolsPreview, PoolTable } from '@/components/sections/Pools';\nimport { getAprData } from '@/components/sections/Pools/PoolCard/utils';\nimport useRefresh from '@/hooks/useRefresh';\nimport { getAddress } from '@/services/web3/contractHelpers';\nimport { useMst } from '@/store';\nimport { getFarmMode, getRefineryVaultEarnings } from '@/store/pools/helpers';\nimport { usePools, useSelectVaultData } from '@/store/pools/hooks';\nimport { Pool, Token } from '@/types';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { feeFormatter } from '@/utils/formatters';\nimport { clog } from '@/utils/logger';\n\nimport './Pools.scss';\n\nenum PoolsContentView {\n  list = 'list',\n  card = 'card',\n}\ninterface IPoolsContent {\n  view: PoolsContentView;\n  content: Pool[];\n}\n\nconst ListCardViewButtons: React.FC<{\n  view: PoolsContentView;\n  onChange: (value: boolean) => void;\n}> = ({ view, onChange }) => {\n  const prefixContainer = [\n    {\n      key: 'list-view-mode',\n      icon: ListViewIcon,\n      handler: () => onChange(true),\n      activeClassCondition: view === PoolsContentView.list,\n      title: 'List View',\n    },\n    {\n      key: 'card-view-mode',\n      icon: CardViewIcon,\n      handler: () => onChange(false),\n      activeClassCondition: view === PoolsContentView.card,\n      title: 'Card View',\n    },\n  ];\n\n  return (\n    <div className=\"pools__i-contr-prefix box-f-ai-c\">\n      {prefixContainer.map((item) => {\n        const { key, handler, activeClassCondition, title } = item;\n        return (\n          <Button\n            key={key}\n            className=\"pools__i-contr-button\"\n            title={title}\n            colorScheme=\"white\"\n            size=\"ssm\"\n            onClick={handler}\n          >\n            <item.icon\n              className={cn('pools__i-contr-icon', {\n                'pools__i-contr-icon_active': activeClassCondition,\n              })}\n            />\n          </Button>\n        );\n      })}\n    </div>\n  );\n};\n\nconst PoolsContent: React.FC<IPoolsContent> = ({ view, content }) => {\n  return (\n    <div className=\"pools__content\">\n      <div className={`pools__content-${view}-view`}>\n        {view === PoolsContentView.list && <PoolTable data={content} />}\n        {view === PoolsContentView.card &&\n          content.map((pool) => {\n            const farmMode = getFarmMode(pool);\n            return (\n              <PoolCard\n                key={pool.isAutoVault ? 'auto-pool' : pool.id}\n                farmMode={farmMode}\n                pool={pool}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nenum FilterBy {\n  name = 'name',\n  stakedOnly = 'stakedOnly',\n  poolsType = 'poolsType',\n}\ntype IFilterBy = keyof typeof FilterBy;\ntype IFilterFunc = (pool: Pool) => boolean | typeof Array.prototype.filter;\n\nenum PoolsType {\n  live = 'live',\n  finished = 'finished',\n}\ntype IPoolsType = keyof typeof PoolsType;\n\nenum SortOptions {\n  hot = 'Hot',\n  apr = 'APR',\n  earned = 'Earned',\n  totalStaked = 'Total staked',\n}\n\n// type ISortOptions = keyof typeof SortOptions;\n\nconst Pools: React.FC = observer(() => {\n  const { user, pools: poolsStore } = useMst();\n  const { pools: poolsWithoutAutoVault } = usePools();\n  const {\n    totalRefineryInVault,\n    pricePerFullShare,\n    userData: { refineryAtLastUserAction, userShares },\n    fees: { performanceFee },\n  } = useSelectVaultData();\n  // const [filteredPools, setFilteredPools] = useState(poolsWithoutAutoVault);\n  const [appliedFilters, setAppliedFilters] = useState<Map<IFilterBy, IFilterFunc>>(new Map());\n  const [isListView, setIsListView] = useState(\n    localStorage['refinery-finance-pools-view'] === PoolsContentView.list,\n  );\n  // const [poolsTypeFilter, setPoolsTypeFilter] = useState(PoolsType.live);\n  const [sortOption, setSortOption] = useState(SortOptions.hot);\n\n  const filter = useCallback(() => {\n    return [...appliedFilters.values()].reduce((acc, filterFunc) => {\n      return acc.filter(filterFunc);\n    }, poolsWithoutAutoVault);\n  }, [appliedFilters, poolsWithoutAutoVault]);\n\n  const sort = useCallback(\n    (array: typeof poolsWithoutAutoVault) => {\n      let sortFunc: (pool1: typeof array[0], pool2: typeof array[0]) => number;\n      switch (sortOption) {\n        case SortOptions.apr: {\n          const performanceFeeAsDecimal = feeFormatter(Number(performanceFee));\n          const getAprValue = (pool: Pool) => {\n            // Ternary is needed to prevent pools without APR getting top spot\n            return pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0;\n          };\n          sortFunc = (pool1, pool2) => getAprValue(pool2) - getAprValue(pool1);\n          break;\n        }\n        case SortOptions.earned: {\n          const getPoolEarnedValue = (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0;\n            }\n            const tokenEarnings = pool.isAutoVault\n              ? new BigNumber(\n                  getRefineryVaultEarnings(\n                    user.address,\n                    refineryAtLastUserAction || BIG_ZERO,\n                    userShares || BIG_ZERO,\n                    pricePerFullShare || BIG_ZERO,\n                  ).autoRefineryToDisplay,\n                )\n              : pool.userData.pendingReward;\n            return tokenEarnings.times(pool.earningTokenPrice).toNumber();\n          };\n          sortFunc = (pool1, pool2) => getPoolEarnedValue(pool2) - getPoolEarnedValue(pool1);\n          break;\n        }\n        case SortOptions.totalStaked: {\n          const getPoolTotalStaked = (pool: Pool) => {\n            return pool.isAutoVault\n              ? totalRefineryInVault?.toNumber() || 0\n              : pool.totalStaked?.toNumber() || 0;\n          };\n          sortFunc = (pool1, pool2) => getPoolTotalStaked(pool2) - getPoolTotalStaked(pool1);\n          break;\n        }\n        case SortOptions.hot:\n        default: {\n          sortFunc = () => 0;\n          break;\n        }\n      }\n      return [...array].sort(sortFunc);\n    },\n    [\n      sortOption,\n      totalRefineryInVault,\n      performanceFee,\n      pricePerFullShare,\n      refineryAtLastUserAction,\n      user.address,\n      userShares,\n    ],\n  );\n\n  const filteredPools = useMemo(() => sort(filter()), [sort, filter]);\n\n  const pools = useMemo(() => {\n    const refinerPool = filteredPools.find((pool) => pool.id === 0);\n    let refinerAutoVault: Pool;\n    if (refinerPool) {\n      refinerAutoVault = { ...refinerPool, isAutoVault: true };\n      return [refinerAutoVault, ...filteredPools];\n    }\n    return filteredPools;\n  }, [filteredPools]);\n\n  const handleSwitchView = (value: boolean) => {\n    localStorage['refinery-finance-pools-view'] = value\n      ? PoolsContentView.list\n      : PoolsContentView.card;\n    setIsListView(value);\n  };\n\n  const filterByStakedOnly = (value: BigNumber, isStaked: boolean) => {\n    if (!isStaked) return true; // show all\n    return !Number.isNaN(value.toNumber()) && value.gt(0);\n  };\n\n  const filterByName = (whereToFind: string, toBeFound: string) => {\n    return whereToFind.split(' ').some((value) => {\n      return value.toUpperCase().startsWith(toBeFound.toUpperCase());\n    });\n  };\n\n  const handleStakedSwitchChange: SwitchClickEventHandler = (isStaked) => {\n    setAppliedFilters(\n      new Map([\n        ...appliedFilters,\n        [\n          FilterBy.stakedOnly,\n          ({ userData }) =>\n            filterByStakedOnly(\n              userData?.stakedBalance ? userData.stakedBalance : BIG_ZERO,\n              isStaked,\n            ),\n        ],\n      ]),\n    );\n  };\n\n  const searchByTokenAddress = (stakingToken: Token, earningToken: Token, value: string) => {\n    return filterByName(\n      `${getAddress(stakingToken.address)} ${getAddress(earningToken.address)}`,\n      value,\n    );\n  };\n  const searchByTokenSymbol = (stakingToken: Token, earningToken: Token, value: string) => {\n    return filterByName(`${stakingToken.symbol} ${earningToken.symbol}`, value);\n  };\n\n  const handleSearch = (value: string | number) => {\n    const validatedValue = String(value);\n    setAppliedFilters(\n      new Map([\n        ...appliedFilters,\n        [\n          FilterBy.name,\n          ({ stakingToken, earningToken }) => {\n            if (validatedValue.startsWith('0x')) {\n              return searchByTokenAddress(stakingToken, earningToken, validatedValue);\n            }\n            return searchByTokenSymbol(stakingToken, earningToken, validatedValue);\n          },\n        ],\n      ]),\n    );\n  };\n\n  const handleRadioGroupChange = (e: RadioChangeEvent) => {\n    // setPoolsTypeFilter(e.target.value);\n    const selectedTab: IPoolsType = e.target.value;\n    const isOpenedLiveTab = PoolsType.live === selectedTab;\n\n    setAppliedFilters(\n      new Map([\n        ...appliedFilters,\n        [\n          FilterBy.poolsType,\n          ({ isFinished = false }) => {\n            if (isOpenedLiveTab) return !isFinished;\n            return isFinished;\n          },\n        ],\n      ]),\n    );\n  };\n\n  const handleSortSelectChange = (selected: any) => {\n    const { value } = selected;\n    setSortOption(value as SortOptions);\n    clog(value);\n  };\n\n  useEffect(() => {\n    // Live Pools filter\n    const selectedTab: IPoolsType = PoolsType.live;\n    const isOpenedLiveTab = PoolsType.live === selectedTab;\n    // Is Staked Only filter\n    const isStaked = false;\n    setAppliedFilters(\n      new Map([\n        [\n          FilterBy.poolsType,\n          ({ isFinished = false }) => {\n            if (isOpenedLiveTab) return !isFinished;\n            return isFinished;\n          },\n        ],\n        [\n          FilterBy.stakedOnly,\n          ({ userData }) =>\n            filterByStakedOnly(\n              userData?.stakedBalance ? userData.stakedBalance : BIG_ZERO,\n              isStaked,\n            ),\n        ],\n      ]),\n    );\n  }, []);\n\n  const { slowRefresh, fastRefresh } = useRefresh();\n\n  // <-- Fetch Vault Data -->\n  useEffect(() => {\n    poolsStore.fetchVaultPublicData();\n  }, [poolsStore, fastRefresh]);\n\n  useEffect(() => {\n    if (user.address) {\n      poolsStore.fetchVaultUserData(user.address);\n    }\n  }, [poolsStore, user.address, fastRefresh]);\n\n  useEffect(() => {\n    poolsStore.fetchVaultFees();\n  }, [poolsStore]);\n\n  // <-- Fetch Pools Data -->\n  useEffect(() => {\n    poolsStore.fetchPoolsPublicData();\n  }, [poolsStore, slowRefresh]);\n\n  return (\n    <>\n      <main className=\"pools\">\n        <div className=\"row\">\n          <PoolsPreview />\n          <ItemsController\n            prefixContainer={\n              <ListCardViewButtons\n                view={isListView ? PoolsContentView.list : PoolsContentView.card}\n                onChange={handleSwitchView}\n              />\n            }\n            radioGroupOptions={[\n              {\n                text: 'Live',\n                value: PoolsType.live,\n              },\n              {\n                text: 'Finished',\n                value: PoolsType.finished,\n              },\n            ]}\n            radioGroupClassName=\"pools__i-contr\"\n            sortOptions={['Hot', 'APR', 'Earned', 'Total staked']}\n            searchPlaceholder=\"Search Pools\"\n            searchDelay={300}\n            onSearchChange={handleSearch}\n            onStakedSwitchChange={handleStakedSwitchChange}\n            onRadioGroupChange={handleRadioGroupChange}\n            onSortSelectChange={handleSortSelectChange}\n          />\n          <PoolsContent\n            view={isListView ? PoolsContentView.list : PoolsContentView.card}\n            content={pools}\n          />\n        </div>\n      </main>\n      <StakeUnstakeModal />\n      <CollectModal />\n    </>\n  );\n});\n\nexport default Pools;\n"]},"metadata":{},"sourceType":"module"}