{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/apolloClient.tsx\";\nimport React from 'react';\nimport { ApolloClient, ApolloLink, ApolloProvider as OriginalApolloProvider, HttpLink, InMemoryCache } from '@apollo/client';\nimport { SNAPSHOT_API, VOTING_API } from '@/config/constants/dao';\nimport { TRADE_API } from '@/config/constants/trade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ServicesEndpoints; // @see https://github.com/apollographql/apollo-client/issues/84#issuecomment-763833895\n// @see https://www.apollographql.com/docs/react/api/link/introduction/#providing-to-apollo-client\n\n(function (ServicesEndpoints) {\n  ServicesEndpoints[\"rfExchange\"] = \"dao-exchange\";\n  ServicesEndpoints[\"rfPairs\"] = \"refinery-finance-pairs\";\n  ServicesEndpoints[\"snapshot\"] = \"snapshot\";\n})(ServicesEndpoints || (ServicesEndpoints = {}));\n\nconst rfExchangeGql = new HttpLink({\n  uri: TRADE_API\n});\nconst rfPairsGql = new HttpLink({\n  uri: VOTING_API\n});\nconst snapshotGql = new HttpLink({\n  uri: SNAPSHOT_API\n}); // TODO: How to handle multi endpoints in the application?\n\nexport const apolloClient = new ApolloClient({\n  link: ApolloLink.split(operation => operation.getContext().serviceName === ServicesEndpoints.rfPairs, rfPairsGql, ApolloLink.split(operation => operation.getContext().serviceName === ServicesEndpoints.snapshot, snapshotGql, rfExchangeGql)),\n  cache: new InMemoryCache()\n});\nexport const ApolloProvider = ({\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(OriginalApolloProvider, {\n    client: apolloClient,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n_c = ApolloProvider;\nexport const getRfPairsContext = () => ({\n  context: {\n    serviceName: ServicesEndpoints.rfPairs\n  }\n});\nexport const getSnapshotContext = () => ({\n  context: {\n    serviceName: ServicesEndpoints.snapshot\n  }\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"ApolloProvider\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/apolloClient.tsx"],"names":["React","ApolloClient","ApolloLink","ApolloProvider","OriginalApolloProvider","HttpLink","InMemoryCache","SNAPSHOT_API","VOTING_API","TRADE_API","ServicesEndpoints","rfExchangeGql","uri","rfPairsGql","snapshotGql","apolloClient","link","split","operation","getContext","serviceName","rfPairs","snapshot","cache","children","getRfPairsContext","context","getSnapshotContext"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,YADF,EAEEC,UAFF,EAGEC,cAAc,IAAIC,sBAHpB,EAIEC,QAJF,EAKEC,aALF,QAMO,gBANP;AAQA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,wBAAzC;AACA,SAASC,SAAT,QAA0B,0BAA1B;;AAEA,WAAYC,iBAAZ,C,CAMA;AACA;;WAPYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAQZ,MAAMC,aAAa,GAAG,IAAIN,QAAJ,CAAa;AAAEO,EAAAA,GAAG,EAAEH;AAAP,CAAb,CAAtB;AACA,MAAMI,UAAU,GAAG,IAAIR,QAAJ,CAAa;AAAEO,EAAAA,GAAG,EAAEJ;AAAP,CAAb,CAAnB;AACA,MAAMM,WAAW,GAAG,IAAIT,QAAJ,CAAa;AAAEO,EAAAA,GAAG,EAAEL;AAAP,CAAb,CAApB,C,CAEA;;AACA,OAAO,MAAMQ,YAAY,GAAG,IAAId,YAAJ,CAAiB;AAC3Ce,EAAAA,IAAI,EAAEd,UAAU,CAACe,KAAX,CACHC,SAAD,IAAeA,SAAS,CAACC,UAAV,GAAuBC,WAAvB,KAAuCV,iBAAiB,CAACW,OADpE,EAEJR,UAFI,EAGJX,UAAU,CAACe,KAAX,CACGC,SAAD,IAAeA,SAAS,CAACC,UAAV,GAAuBC,WAAvB,KAAuCV,iBAAiB,CAACY,QAD1E,EAEER,WAFF,EAGEH,aAHF,CAHI,CADqC;AAU3CY,EAAAA,KAAK,EAAE,IAAIjB,aAAJ;AAVoC,CAAjB,CAArB;AAiBP,OAAO,MAAMH,cAAwB,GAAG,CAAC;AAAEqB,EAAAA;AAAF,CAAD,KAAkB;AACxD,sBAAO,QAAC,sBAAD;AAAwB,IAAA,MAAM,EAAET,YAAhC;AAAA,cAA+CS;AAA/C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFM;KAAMrB,c;AAIb,OAAO,MAAMsB,iBAAiB,GAAG,OAA4B;AAC3DC,EAAAA,OAAO,EAAE;AAAEN,IAAAA,WAAW,EAAEV,iBAAiB,CAACW;AAAjC;AADkD,CAA5B,CAA1B;AAGP,OAAO,MAAMM,kBAAkB,GAAG,OAA4B;AAC5DD,EAAAA,OAAO,EAAE;AAAEN,IAAAA,WAAW,EAAEV,iBAAiB,CAACY;AAAjC;AADmD,CAA5B,CAA3B","sourcesContent":["import React from 'react';\nimport {\n  ApolloClient,\n  ApolloLink,\n  ApolloProvider as OriginalApolloProvider,\n  HttpLink,\n  InMemoryCache,\n} from '@apollo/client';\n\nimport { SNAPSHOT_API, VOTING_API } from '@/config/constants/dao';\nimport { TRADE_API } from '@/config/constants/trade';\n\nexport enum ServicesEndpoints {\n  rfExchange = 'dao-exchange',\n  rfPairs = 'refinery-finance-pairs',\n  snapshot = 'snapshot',\n}\n\n// @see https://github.com/apollographql/apollo-client/issues/84#issuecomment-763833895\n// @see https://www.apollographql.com/docs/react/api/link/introduction/#providing-to-apollo-client\nconst rfExchangeGql = new HttpLink({ uri: TRADE_API });\nconst rfPairsGql = new HttpLink({ uri: VOTING_API });\nconst snapshotGql = new HttpLink({ uri: SNAPSHOT_API });\n\n// TODO: How to handle multi endpoints in the application?\nexport const apolloClient = new ApolloClient({\n  link: ApolloLink.split(\n    (operation) => operation.getContext().serviceName === ServicesEndpoints.rfPairs,\n    rfPairsGql,\n    ApolloLink.split(\n      (operation) => operation.getContext().serviceName === ServicesEndpoints.snapshot,\n      snapshotGql,\n      rfExchangeGql,\n    ),\n  ),\n  cache: new InMemoryCache(),\n});\n\ninterface IContextServiceName {\n  context: { serviceName: ServicesEndpoints };\n}\n\nexport const ApolloProvider: React.FC = ({ children }) => {\n  return <OriginalApolloProvider client={apolloClient}>{children}</OriginalApolloProvider>;\n};\n\nexport const getRfPairsContext = (): IContextServiceName => ({\n  context: { serviceName: ServicesEndpoints.rfPairs },\n});\nexport const getSnapshotContext = (): IContextServiceName => ({\n  context: { serviceName: ServicesEndpoints.snapshot },\n});\n"]},"metadata":{},"sourceType":"module"}