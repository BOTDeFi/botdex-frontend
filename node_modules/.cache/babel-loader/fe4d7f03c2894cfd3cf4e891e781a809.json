{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport CalcImg from \"@/assets/img/icons/calc.svg\";\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useMst } from '@/store';\nimport { getStakingBalance } from '@/store/pools/helpers';\nimport { useStakedValue } from '@/store/pools/hooks';\nimport { PoolFarmingMode, Precisions } from '@/types';\nimport { feeFormatter, getFullDisplayBalance } from '@/utils/formatters';\nimport 'antd/lib/select/style/css';\nimport StakeUnstakeButtons from '../StakeUnstakeButtons';\nimport StakingSection from '../StakingSection';\nimport AutoVaultRecentProfitSection from './AutoVaultRecentProfitSection';\nimport CardFooter from './CardFooter';\nimport CardSubtitle from './CardSubtitle';\nimport CardTitle from './CardTitle';\nimport EarnedSection from './EarnedSection';\nimport { getAprData } from './utils';\nimport './PoolCard.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockData = {\n  currencyToConvert: 'USD'\n};\nconst PoolCard = observer(_c = _s(({\n  className,\n  farmMode,\n  pool\n}) => {\n  _s();\n\n  const {\n    modals,\n    user,\n    pools: {\n      fees: {\n        performanceFee: globalPerformanceFee\n      }\n    }\n  } = useMst();\n  const {\n    earningToken,\n    stakingToken,\n    apr,\n    earningTokenPrice,\n    stakingTokenPrice,\n    isFinished\n  } = pool;\n  const {\n    tokenUsdPrice: refineryUsdPrice\n  } = useRefineryUsdPrice();\n  const performanceFee = farmMode === PoolFarmingMode.auto ? Number(feeFormatter(globalPerformanceFee)) : 0;\n  const {\n    apr: earningsPercentageToDisplay,\n    autoCompoundFrequency\n  } = getAprData(pool, performanceFee);\n  const {\n    hasStakedValue,\n    stakedValue\n  } = useStakedValue(farmMode, pool);\n  const stakingTokenBalance = stakedValue.plus(getStakingBalance(pool));\n\n  const handleOpenApr = e => {\n    e.stopPropagation();\n    modals.roi.open({\n      isFarmPage: false,\n      autoCompoundFrequency,\n      performanceFee,\n      apr: apr || 0,\n      earningTokenSymbol: earningToken.symbol,\n      earningTokenPrice: earningTokenPrice || 0,\n      stakingTokenSymbol: stakingToken.symbol,\n      stakingTokenPrice: Number(stakingTokenPrice),\n      stakingTokenBalance: stakingTokenBalance.toString()\n    });\n  };\n\n  const stakedValueAsString = useMemo(() => getFullDisplayBalance({\n    balance: stakedValue,\n    decimals: stakingToken.decimals,\n    displayDecimals: Precisions.shortToken\n  }).toString(), [stakedValue, stakingToken.decimals]);\n  const hasConnectedWallet = Boolean(user.address);\n  const convertedStakedValue = useMemo(() => {\n    return new BigNumber(stakedValueAsString).times(refineryUsdPrice);\n  }, [stakedValueAsString, refineryUsdPrice]);\n  const convertedStakedValueAsString = useMemo(() => convertedStakedValue.toFixed(Precisions.fiat), [convertedStakedValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames('p-card box-shadow', className),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-card__head box-f-ai-c box-f-jc-sb\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          className: \"p-card__title\",\n          farmMode: farmMode,\n          tokenStake: stakingToken,\n          tokenEarn: earningToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n          className: \"p-card__subtitle\",\n          farmMode: farmMode,\n          tokenStake: stakingToken,\n          tokenEarn: earningToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-card__icons\",\n        children: [earningToken && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: earningToken.logoURI,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: stakingToken.logoURI,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), isFinished && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-card__badge_finished box-black text-white\",\n        children: \"Finished\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-card__apr p-card__box box-f-ai-c box-f-jc-sb\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-smd text-black text-upper\",\n        children: farmMode === PoolFarmingMode.auto ? 'apy' : 'apr'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-card__apr-percent box-pointer\",\n        onClick: handleOpenApr,\n        onKeyDown: handleOpenApr,\n        role: \"button\",\n        tabIndex: 0,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-smd\",\n          children: [earningsPercentageToDisplay, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: CalcImg,\n          alt: \"calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-card__box p-card__content\",\n      children: [farmMode === PoolFarmingMode.auto && /*#__PURE__*/_jsxDEV(AutoVaultRecentProfitSection, {\n        hasStakedValue: Boolean(hasStakedValue),\n        stakingTokenSymbol: stakingToken.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), farmMode !== PoolFarmingMode.auto && /*#__PURE__*/_jsxDEV(EarnedSection, {\n        pool: pool,\n        farmMode: farmMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 47\n      }, this), hasConnectedWallet && hasStakedValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-card__staked\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-smd text-black\",\n          children: [stakingToken.symbol, \" Staked \", farmMode === PoolFarmingMode.auto && '(compounding)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-f box-f-jc-sb box-f-ai-e\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-card__staked-value text-blue-d text-smd\",\n              children: stakedValueAsString\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray text-smd\",\n              children: [\"~\", convertedStakedValueAsString, \" \", mockData.currencyToConvert]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StakeUnstakeButtons, {\n            pool: pool\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(StakingSection, {\n        pool: pool,\n        titleClassName: \"p-card__unlock-text text-smd text-capitalize\",\n        buttonProps: {\n          className: 'p-card__unlock-btn'\n        },\n        tokenSymbol: stakingToken.symbol,\n        stakedValue: stakedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      farmMode: farmMode,\n      pool: pool\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}, \"vlyuOLRh3rvMsCJ9Cg5OWbeZ9gw=\", false, function () {\n  return [useMst, useRefineryUsdPrice, useStakedValue];\n}));\n_c2 = PoolCard;\nexport default PoolCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PoolCard$observer\");\n$RefreshReg$(_c2, \"PoolCard\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/index.tsx"],"names":["React","useMemo","BigNumber","classNames","observer","useRefineryUsdPrice","useMst","getStakingBalance","useStakedValue","PoolFarmingMode","Precisions","feeFormatter","getFullDisplayBalance","StakeUnstakeButtons","StakingSection","AutoVaultRecentProfitSection","CardFooter","CardSubtitle","CardTitle","EarnedSection","getAprData","mockData","currencyToConvert","PoolCard","className","farmMode","pool","modals","user","pools","fees","performanceFee","globalPerformanceFee","earningToken","stakingToken","apr","earningTokenPrice","stakingTokenPrice","isFinished","tokenUsdPrice","refineryUsdPrice","auto","Number","earningsPercentageToDisplay","autoCompoundFrequency","hasStakedValue","stakedValue","stakingTokenBalance","plus","handleOpenApr","e","stopPropagation","roi","open","isFarmPage","earningTokenSymbol","symbol","stakingTokenSymbol","toString","stakedValueAsString","balance","decimals","displayDecimals","shortToken","hasConnectedWallet","Boolean","address","convertedStakedValue","times","convertedStakedValueAsString","toFixed","fiat","logoURI","CalcImg"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\n\nimport CalcImg from '@/assets/img/icons/calc.svg';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useMst } from '@/store';\nimport { getStakingBalance } from '@/store/pools/helpers';\nimport { useStakedValue } from '@/store/pools/hooks';\nimport { IPoolFarmingMode, Pool, PoolFarmingMode, Precisions } from '@/types';\nimport { feeFormatter, getFullDisplayBalance } from '@/utils/formatters';\n\nimport 'antd/lib/select/style/css';\n\nimport StakeUnstakeButtons from '../StakeUnstakeButtons';\nimport StakingSection from '../StakingSection';\n\nimport AutoVaultRecentProfitSection from './AutoVaultRecentProfitSection';\nimport CardFooter from './CardFooter';\nimport CardSubtitle from './CardSubtitle';\nimport CardTitle from './CardTitle';\nimport EarnedSection from './EarnedSection';\nimport { getAprData } from './utils';\n\nimport './PoolCard.scss';\n\nexport interface IPoolCard {\n  className?: string;\n  farmMode: IPoolFarmingMode;\n  pool: Pool;\n}\n\nconst mockData = {\n  currencyToConvert: 'USD',\n};\n\nconst PoolCard: React.FC<IPoolCard> = observer(({ className, farmMode, pool }) => {\n  const {\n    modals,\n    user,\n    pools: {\n      fees: { performanceFee: globalPerformanceFee },\n    },\n  } = useMst();\n  const {\n    earningToken,\n    stakingToken,\n    apr,\n    earningTokenPrice,\n    stakingTokenPrice,\n    isFinished,\n  } = pool;\n  const { tokenUsdPrice: refineryUsdPrice } = useRefineryUsdPrice();\n\n  const performanceFee =\n    farmMode === PoolFarmingMode.auto ? Number(feeFormatter(globalPerformanceFee)) : 0;\n  const { apr: earningsPercentageToDisplay, autoCompoundFrequency } = getAprData(\n    pool,\n    performanceFee,\n  );\n\n  const { hasStakedValue, stakedValue } = useStakedValue(farmMode, pool);\n  const stakingTokenBalance = stakedValue.plus(getStakingBalance(pool));\n\n  const handleOpenApr = (e: any): void => {\n    e.stopPropagation();\n    modals.roi.open({\n      isFarmPage: false,\n      autoCompoundFrequency,\n      performanceFee,\n      apr: apr || 0,\n      earningTokenSymbol: earningToken.symbol,\n      earningTokenPrice: earningTokenPrice || 0,\n      stakingTokenSymbol: stakingToken.symbol,\n      stakingTokenPrice: Number(stakingTokenPrice),\n      stakingTokenBalance: stakingTokenBalance.toString(),\n    });\n  };\n\n  const stakedValueAsString = useMemo(\n    () =>\n      getFullDisplayBalance({\n        balance: stakedValue,\n        decimals: stakingToken.decimals,\n        displayDecimals: Precisions.shortToken,\n      }).toString(),\n    [stakedValue, stakingToken.decimals],\n  );\n\n  const hasConnectedWallet = Boolean(user.address);\n\n  const convertedStakedValue = useMemo(() => {\n    return new BigNumber(stakedValueAsString).times(refineryUsdPrice);\n  }, [stakedValueAsString, refineryUsdPrice]);\n  const convertedStakedValueAsString = useMemo(\n    () => convertedStakedValue.toFixed(Precisions.fiat),\n    [convertedStakedValue],\n  );\n\n  return (\n    <div className={classNames('p-card box-shadow', className)}>\n      <div className=\"p-card__head box-f-ai-c box-f-jc-sb\">\n        <div>\n          <CardTitle\n            className=\"p-card__title\"\n            farmMode={farmMode}\n            tokenStake={stakingToken}\n            tokenEarn={earningToken}\n          />\n          <CardSubtitle\n            className=\"p-card__subtitle\"\n            farmMode={farmMode}\n            tokenStake={stakingToken}\n            tokenEarn={earningToken}\n          />\n        </div>\n        <div className=\"p-card__icons\">\n          {earningToken && <img src={earningToken.logoURI} alt=\"\" />}\n          <img src={stakingToken.logoURI} alt=\"\" />\n        </div>\n        {isFinished && <div className=\"p-card__badge_finished box-black text-white\">Finished</div>}\n      </div>\n      <div className=\"p-card__apr p-card__box box-f-ai-c box-f-jc-sb\">\n        <span className=\"text-smd text-black text-upper\">\n          {farmMode === PoolFarmingMode.auto ? 'apy' : 'apr'}\n        </span>\n        <div\n          className=\"p-card__apr-percent box-pointer\"\n          onClick={handleOpenApr}\n          onKeyDown={handleOpenApr}\n          role=\"button\"\n          tabIndex={0}\n        >\n          <span className=\"text-smd\">{earningsPercentageToDisplay}%</span>\n          <img src={CalcImg} alt=\"calculator\" />\n        </div>\n      </div>\n      <div className=\"p-card__box p-card__content\">\n        {farmMode === PoolFarmingMode.auto && (\n          <AutoVaultRecentProfitSection\n            hasStakedValue={Boolean(hasStakedValue)}\n            stakingTokenSymbol={stakingToken.symbol}\n          />\n        )}\n        {farmMode !== PoolFarmingMode.auto && <EarnedSection pool={pool} farmMode={farmMode} />}\n        {hasConnectedWallet && hasStakedValue ? (\n          <div className=\"p-card__staked\">\n            <div className=\"text-smd text-black\">\n              {stakingToken.symbol} Staked {farmMode === PoolFarmingMode.auto && '(compounding)'}\n            </div>\n            <div className=\"box-f box-f-jc-sb box-f-ai-e\">\n              <div>\n                <div className=\"p-card__staked-value text-blue-d text-smd\">\n                  {stakedValueAsString}\n                </div>\n                <div className=\"text-gray text-smd\">\n                  ~{convertedStakedValueAsString} {mockData.currencyToConvert}\n                </div>\n              </div>\n              <StakeUnstakeButtons pool={pool} />\n            </div>\n          </div>\n        ) : (\n          <StakingSection\n            pool={pool}\n            titleClassName=\"p-card__unlock-text text-smd text-capitalize\"\n            buttonProps={{\n              className: 'p-card__unlock-btn',\n            }}\n            tokenSymbol={stakingToken.symbol}\n            stakedValue={stakedValue}\n          />\n        )}\n      </div>\n      <CardFooter farmMode={farmMode} pool={pool} />\n    </div>\n  );\n});\n\nexport default PoolCard;\n"]},"metadata":{},"sourceType":"module"}