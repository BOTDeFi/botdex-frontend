{"ast":null,"code":"import keys from './keys.js'; // Internal helper to generate functions for escaping and unescaping strings\n// to/from HTML interpolation.\n\nexport default function createEscaper(map) {\n  var escaper = function (match) {\n    return map[match];\n  }; // Regexes for identifying a key that needs to be escaped.\n\n\n  var source = '(?:' + keys(map).join('|') + ')';\n  var testRegexp = RegExp(source);\n  var replaceRegexp = RegExp(source, 'g');\n  return function (string) {\n    string = string == null ? '' : '' + string;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n  };\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/underscore/modules/_createEscaper.js"],"names":["keys","createEscaper","map","escaper","match","source","join","testRegexp","RegExp","replaceRegexp","string","test","replace"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB,C,CAEA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACzC,MAAIC,OAAO,GAAG,UAASC,KAAT,EAAgB;AAC5B,WAAOF,GAAG,CAACE,KAAD,CAAV;AACD,GAFD,CADyC,CAIzC;;;AACA,MAAIC,MAAM,GAAG,QAAQL,IAAI,CAACE,GAAD,CAAJ,CAAUI,IAAV,CAAe,GAAf,CAAR,GAA8B,GAA3C;AACA,MAAIC,UAAU,GAAGC,MAAM,CAACH,MAAD,CAAvB;AACA,MAAII,aAAa,GAAGD,MAAM,CAACH,MAAD,EAAS,GAAT,CAA1B;AACA,SAAO,UAASK,MAAT,EAAiB;AACtBA,IAAAA,MAAM,GAAGA,MAAM,IAAI,IAAV,GAAiB,EAAjB,GAAsB,KAAKA,MAApC;AACA,WAAOH,UAAU,CAACI,IAAX,CAAgBD,MAAhB,IAA0BA,MAAM,CAACE,OAAP,CAAeH,aAAf,EAA8BN,OAA9B,CAA1B,GAAmEO,MAA1E;AACD,GAHD;AAID","sourcesContent":["import keys from './keys.js';\n\n// Internal helper to generate functions for escaping and unescaping strings\n// to/from HTML interpolation.\nexport default function createEscaper(map) {\n  var escaper = function(match) {\n    return map[match];\n  };\n  // Regexes for identifying a key that needs to be escaped.\n  var source = '(?:' + keys(map).join('|') + ')';\n  var testRegexp = RegExp(source);\n  var replaceRegexp = RegExp(source, 'g');\n  return function(string) {\n    string = string == null ? '' : '' + string;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}