{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/StakeUnstakeModal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\nimport UnknownImg from \"@/assets/img/currency/unknown.svg\";\nimport { Button, InputNumber, Slider } from '@/components/atoms';\nimport { Modal } from '@/components/molecules';\nimport { useNonVaultStake } from '@/hooks/pools/useStakePool';\nimport { useVaultStake } from '@/hooks/pools/useStakeVault';\nimport { useNonVaultUnstake } from '@/hooks/pools/useUnstakePool';\nimport { useVaultUnstake } from '@/hooks/pools/useUnstakeVault';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useMst } from '@/store';\nimport { Precisions } from '@/types';\nimport { getTokenUsdPrice } from '@/utils';\nimport { BIG_ZERO, DEFAULT_TOKEN_POWER } from '@/utils/constants';\nimport { getBalanceAmountBN, getDecimalAmount } from '@/utils/formatters';\nimport { clog } from '@/utils/logger';\nimport './StakeUnstakeModal.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockData = {\n  additionalCurrency: 'USD'\n};\nconst MAX_PERCENTAGE = 100;\nconst percentBoundariesButtons = [{\n  value: 25,\n  name: '25%'\n}, {\n  value: 50,\n  name: '50%'\n}, {\n  value: 75,\n  name: '75%'\n}, {\n  value: MAX_PERCENTAGE,\n  name: 'Max'\n}];\nconst StakeUnstakeModal = observer(_c = _s(() => {\n  _s();\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const [percent, setPercent] = useState(MAX_PERCENTAGE / 4);\n  const [inputValue, setInputValue] = useState(BIG_ZERO);\n  const {\n    tokenUsdPrice\n  } = useRefineryUsdPrice();\n  const {\n    modals\n  } = useMst();\n  const modal = modals.stakeUnstake;\n  const {\n    maxStakingValue: maxStakingValueRaw,\n    stakingToken,\n    poolId,\n    isAutoVault,\n    isStaking\n  } = modal;\n  const maxStakingValueBN = useMemo(() => getBalanceAmountBN(new BigNumber(maxStakingValueRaw), stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals), [maxStakingValueRaw, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals]);\n  const calculateValueByPercent = useCallback(newPercentValue => maxStakingValueBN.times(newPercentValue).dividedBy(MAX_PERCENTAGE), [maxStakingValueBN]);\n\n  const calculatePercentByValue = newValue => newValue.times(MAX_PERCENTAGE).dividedBy(maxStakingValueBN).toNumber();\n\n  const validateInputValue = useCallback(value => {\n    return new BigNumber(new BigNumber(value).toFixed(stakingToken ? stakingToken.decimals : DEFAULT_TOKEN_POWER));\n  }, [stakingToken]);\n  const updateInputValue = useCallback(newValue => {\n    setInputValue(validateInputValue(newValue));\n  }, [validateInputValue]);\n  const updateValueByPercent = useCallback(newPercent => {\n    updateInputValue(calculateValueByPercent(newPercent));\n  }, [updateInputValue, calculateValueByPercent]);\n\n  const updatePercentByValue = newValue => {\n    const validatedValue = validateInputValue(newValue);\n    setPercent(calculatePercentByValue(validatedValue));\n  };\n\n  const handleValueChange = newValue => {\n    if (newValue === null) return;\n    updateInputValue(newValue);\n    updatePercentByValue(newValue);\n  };\n\n  const handlePercentChange = newPercentValue => {\n    if (percent === newPercentValue) return;\n    setPercent(newPercentValue);\n    updateValueByPercent(newPercentValue);\n  };\n\n  const onTxFinished = () => {\n    setPendingTx(false);\n  };\n\n  const {\n    vaultStake\n  } = useVaultStake(onTxFinished);\n  const {\n    vaultUnstake\n  } = useVaultUnstake(onTxFinished);\n  const {\n    nonVaultStake\n  } = useNonVaultStake(poolId, onTxFinished);\n  const {\n    nonVaultUnstake\n  } = useNonVaultUnstake(poolId, onTxFinished);\n  const handleStake = useCallback(async () => {\n    if (isAutoVault) {\n      const valueToStakeDecimal = getDecimalAmount(inputValue, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals);\n      await vaultStake(valueToStakeDecimal);\n    } else {\n      await nonVaultStake(inputValue.toFixed(), (stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals) || DEFAULT_TOKEN_POWER, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.symbol);\n    }\n  }, [isAutoVault, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.symbol, inputValue, vaultStake, nonVaultStake]);\n  const handleUnstake = useCallback(async () => {\n    if (isAutoVault) {\n      const valueToUnstakeDecimal = getDecimalAmount(inputValue, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals);\n      await vaultUnstake(valueToUnstakeDecimal);\n    } else {\n      await nonVaultUnstake(inputValue.toFixed(), (stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals) || DEFAULT_TOKEN_POWER, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.symbol);\n    }\n  }, [isAutoVault, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.decimals, stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.symbol, inputValue, vaultUnstake, nonVaultUnstake]);\n\n  const handleConfirm = async () => {\n    clog(inputValue);\n    setPendingTx(true);\n\n    if (isStaking) {\n      await handleStake();\n    } else {\n      await handleUnstake();\n    }\n\n    modal.close();\n  };\n\n  useEffect(() => {\n    updateValueByPercent(percent);\n  }, [percent, updateValueByPercent]);\n  useEffect(() => {\n    // for any 'location' changes with opened modal\n    return () => {\n      modal.close();\n    };\n  }, [modal]);\n  const inputValueAsString = useMemo(() => inputValue.toFixed(), [inputValue]);\n  const inputValueUsdToDisplay = useMemo(() => getTokenUsdPrice(inputValue, tokenUsdPrice), [inputValue, tokenUsdPrice]);\n  const balanceToDisplay = useMemo(() => maxStakingValueBN.toFixed(Precisions.shortToken), [maxStakingValueBN]);\n  const isNotEnoughBalanceToStake = maxStakingValueRaw === 0;\n  const hasValidationErrors = isNotEnoughBalanceToStake || inputValue.eq(0) || inputValue.isNaN();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isVisible: modal.isOpen,\n    className: \"stake-unstake-modal\",\n    handleCancel: modal.close,\n    width: 390,\n    closeIcon: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stake-unstake-modal__content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stake-unstake-modal__title text-smd text-bold text-black\",\n        children: isStaking ? 'Stake in Pool' : 'Unstake'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stake-unstake-modal__subtitle box-f-ai-c box-f-jc-sb\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-black text-med text\",\n          children: isStaking ? 'Stake' : 'Unstake'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-f-ai-c stake-unstake-modal__currency text-smd text-black\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"stake-unstake-modal__currency-icon\",\n            src: (stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.logoURI) || UnknownImg,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputNumber, {\n        className: \"stake-unstake-modal__input\",\n        value: inputValueAsString,\n        colorScheme: \"outline\",\n        inputSize: \"md\",\n        inputPrefix: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-ssm text-gray\",\n          children: [\"~\", inputValueUsdToDisplay, \" \", mockData.additionalCurrency]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this),\n        prefixPosition: \"button\",\n        min: 0,\n        max: maxStakingValueBN.toFixed(),\n        stringMode: true // to support high precision decimals\n        ,\n        onChange: handleValueChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stake-unstake-modal__balance text-right\",\n        children: [\"Balance: \", balanceToDisplay]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: percent,\n        onChange: handlePercentChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-f-ai-c box-f-jc-sb stake-unstake-modal__btns\",\n        children: percentBoundariesButtons.map(({\n          value,\n          name = value\n        }) => {\n          const percentChangeHandler = () => handlePercentChange(value);\n\n          return /*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"yellow-l\",\n            size: \"smd\",\n            onClick: percentChangeHandler,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-ssmd\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this)\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"stake-unstake-modal__btn\",\n        loading: pendingTx,\n        disabled: hasValidationErrors,\n        onClick: hasValidationErrors ? undefined : handleConfirm,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white text-bold text-smd\",\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), isStaking && /*#__PURE__*/_jsxDEV(Button, {\n        className: \"stake-unstake-modal__btn stake-unstake-modal__btn-get-currency\",\n        colorScheme: \"outline-purple\",\n        link: \"/trade/swap\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-bold text-smd\",\n          children: \"Get RP1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}, \"pBw38FSn47VfGiSd5F+39QNrxdQ=\", false, function () {\n  return [useRefineryUsdPrice, useMst, useVaultStake, useVaultUnstake, useNonVaultStake, useNonVaultUnstake];\n}));\n_c2 = StakeUnstakeModal;\nexport default StakeUnstakeModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StakeUnstakeModal$observer\");\n$RefreshReg$(_c2, \"StakeUnstakeModal\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/StakeUnstakeModal/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","BigNumber","observer","Button","InputNumber","Slider","Modal","useNonVaultStake","useVaultStake","useNonVaultUnstake","useVaultUnstake","useRefineryUsdPrice","useMst","Precisions","getTokenUsdPrice","BIG_ZERO","DEFAULT_TOKEN_POWER","getBalanceAmountBN","getDecimalAmount","clog","mockData","additionalCurrency","MAX_PERCENTAGE","percentBoundariesButtons","value","name","StakeUnstakeModal","pendingTx","setPendingTx","percent","setPercent","inputValue","setInputValue","tokenUsdPrice","modals","modal","stakeUnstake","maxStakingValue","maxStakingValueRaw","stakingToken","poolId","isAutoVault","isStaking","maxStakingValueBN","decimals","calculateValueByPercent","newPercentValue","times","dividedBy","calculatePercentByValue","newValue","toNumber","validateInputValue","toFixed","updateInputValue","updateValueByPercent","newPercent","updatePercentByValue","validatedValue","handleValueChange","handlePercentChange","onTxFinished","vaultStake","vaultUnstake","nonVaultStake","nonVaultUnstake","handleStake","valueToStakeDecimal","symbol","handleUnstake","valueToUnstakeDecimal","handleConfirm","close","inputValueAsString","inputValueUsdToDisplay","balanceToDisplay","shortToken","isNotEnoughBalanceToStake","hasValidationErrors","eq","isNaN","isOpen","logoURI","UnknownImg","map","percentChangeHandler","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\nimport { ValueType } from 'rc-input-number/lib/utils/MiniDecimal';\n\nimport UnknownImg from '@/assets/img/currency/unknown.svg';\nimport { Button, InputNumber, Slider } from '@/components/atoms';\nimport { Modal } from '@/components/molecules';\nimport { useNonVaultStake } from '@/hooks/pools/useStakePool';\nimport { useVaultStake } from '@/hooks/pools/useStakeVault';\nimport { useNonVaultUnstake } from '@/hooks/pools/useUnstakePool';\nimport { useVaultUnstake } from '@/hooks/pools/useUnstakeVault';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useMst } from '@/store';\nimport { Precisions } from '@/types';\nimport { getTokenUsdPrice } from '@/utils';\nimport { BIG_ZERO, DEFAULT_TOKEN_POWER } from '@/utils/constants';\nimport { getBalanceAmountBN, getDecimalAmount } from '@/utils/formatters';\nimport { clog } from '@/utils/logger';\n\nimport './StakeUnstakeModal.scss';\n\nconst mockData = {\n  additionalCurrency: 'USD',\n};\n\nconst MAX_PERCENTAGE = 100;\nconst percentBoundariesButtons = [\n  {\n    value: 25,\n    name: '25%',\n  },\n  {\n    value: 50,\n    name: '50%',\n  },\n  {\n    value: 75,\n    name: '75%',\n  },\n  {\n    value: MAX_PERCENTAGE,\n    name: 'Max',\n  },\n];\n\nconst StakeUnstakeModal: React.FC = observer(() => {\n  const [pendingTx, setPendingTx] = useState(false);\n  const [percent, setPercent] = useState(MAX_PERCENTAGE / 4);\n  const [inputValue, setInputValue] = useState(BIG_ZERO);\n  const { tokenUsdPrice } = useRefineryUsdPrice();\n\n  const { modals } = useMst();\n  const modal = modals.stakeUnstake;\n  const {\n    maxStakingValue: maxStakingValueRaw,\n    stakingToken,\n    poolId,\n    isAutoVault,\n    isStaking,\n  } = modal;\n\n  const maxStakingValueBN = useMemo(\n    () => getBalanceAmountBN(new BigNumber(maxStakingValueRaw), stakingToken?.decimals),\n    [maxStakingValueRaw, stakingToken?.decimals],\n  );\n\n  const calculateValueByPercent = useCallback(\n    (newPercentValue: number) => maxStakingValueBN.times(newPercentValue).dividedBy(MAX_PERCENTAGE),\n    [maxStakingValueBN],\n  );\n  const calculatePercentByValue = (newValue: BigNumber) =>\n    newValue.times(MAX_PERCENTAGE).dividedBy(maxStakingValueBN).toNumber();\n\n  const validateInputValue = useCallback(\n    (value: string | number | BigNumber) => {\n      return new BigNumber(\n        new BigNumber(value).toFixed(stakingToken ? stakingToken.decimals : DEFAULT_TOKEN_POWER),\n      );\n    },\n    [stakingToken],\n  );\n\n  const updateInputValue = useCallback(\n    (newValue: string | number | BigNumber) => {\n      setInputValue(validateInputValue(newValue));\n    },\n    [validateInputValue],\n  );\n\n  const updateValueByPercent = useCallback(\n    (newPercent: number) => {\n      updateInputValue(calculateValueByPercent(newPercent));\n    },\n    [updateInputValue, calculateValueByPercent],\n  );\n  const updatePercentByValue = (newValue: string | number | BigNumber) => {\n    const validatedValue = validateInputValue(newValue);\n    setPercent(calculatePercentByValue(validatedValue));\n  };\n\n  const handleValueChange = (newValue: ValueType | null) => {\n    if (newValue === null) return;\n    updateInputValue(newValue);\n    updatePercentByValue(newValue);\n  };\n\n  const handlePercentChange = (newPercentValue: number) => {\n    if (percent === newPercentValue) return;\n    setPercent(newPercentValue);\n    updateValueByPercent(newPercentValue);\n  };\n\n  const onTxFinished = () => {\n    setPendingTx(false);\n  };\n\n  const { vaultStake } = useVaultStake(onTxFinished);\n  const { vaultUnstake } = useVaultUnstake(onTxFinished);\n\n  const { nonVaultStake } = useNonVaultStake(poolId, onTxFinished);\n  const { nonVaultUnstake } = useNonVaultUnstake(poolId, onTxFinished);\n\n  const handleStake = useCallback(async () => {\n    if (isAutoVault) {\n      const valueToStakeDecimal = getDecimalAmount(inputValue, stakingToken?.decimals);\n      await vaultStake(valueToStakeDecimal);\n    } else {\n      await nonVaultStake(\n        inputValue.toFixed(),\n        stakingToken?.decimals || DEFAULT_TOKEN_POWER,\n        stakingToken?.symbol,\n      );\n    }\n  }, [\n    isAutoVault,\n    stakingToken?.decimals,\n    stakingToken?.symbol,\n    inputValue,\n    vaultStake,\n    nonVaultStake,\n  ]);\n\n  const handleUnstake = useCallback(async () => {\n    if (isAutoVault) {\n      const valueToUnstakeDecimal = getDecimalAmount(inputValue, stakingToken?.decimals);\n      await vaultUnstake(valueToUnstakeDecimal);\n    } else {\n      await nonVaultUnstake(\n        inputValue.toFixed(),\n        stakingToken?.decimals || DEFAULT_TOKEN_POWER,\n        stakingToken?.symbol,\n      );\n    }\n  }, [\n    isAutoVault,\n    stakingToken?.decimals,\n    stakingToken?.symbol,\n    inputValue,\n    vaultUnstake,\n    nonVaultUnstake,\n  ]);\n\n  const handleConfirm = async () => {\n    clog(inputValue);\n    setPendingTx(true);\n    if (isStaking) {\n      await handleStake();\n    } else {\n      await handleUnstake();\n    }\n    modal.close();\n  };\n\n  useEffect(() => {\n    updateValueByPercent(percent);\n  }, [percent, updateValueByPercent]);\n\n  useEffect(() => {\n    // for any 'location' changes with opened modal\n    return () => {\n      modal.close();\n    };\n  }, [modal]);\n\n  const inputValueAsString = useMemo(() => inputValue.toFixed(), [inputValue]);\n  const inputValueUsdToDisplay = useMemo(() => getTokenUsdPrice(inputValue, tokenUsdPrice), [\n    inputValue,\n    tokenUsdPrice,\n  ]);\n  const balanceToDisplay = useMemo(() => maxStakingValueBN.toFixed(Precisions.shortToken), [\n    maxStakingValueBN,\n  ]);\n\n  const isNotEnoughBalanceToStake = maxStakingValueRaw === 0;\n  const hasValidationErrors = isNotEnoughBalanceToStake || inputValue.eq(0) || inputValue.isNaN();\n\n  return (\n    <Modal\n      isVisible={modal.isOpen}\n      className=\"stake-unstake-modal\"\n      handleCancel={modal.close}\n      width={390}\n      closeIcon\n    >\n      <div className=\"stake-unstake-modal__content\">\n        <div className=\"stake-unstake-modal__title text-smd text-bold text-black\">\n          {isStaking ? 'Stake in Pool' : 'Unstake'}\n        </div>\n        <div className=\"stake-unstake-modal__subtitle box-f-ai-c box-f-jc-sb\">\n          <span className=\"text-black text-med text\">{isStaking ? 'Stake' : 'Unstake'}</span>\n          <div className=\"box-f-ai-c stake-unstake-modal__currency text-smd text-black\">\n            <img\n              className=\"stake-unstake-modal__currency-icon\"\n              src={stakingToken?.logoURI || UnknownImg}\n              alt=\"\"\n            />\n            <span>{stakingToken?.symbol}</span>\n          </div>\n        </div>\n        <InputNumber\n          className=\"stake-unstake-modal__input\"\n          value={inputValueAsString}\n          colorScheme=\"outline\"\n          inputSize=\"md\"\n          inputPrefix={\n            <span className=\"text-ssm text-gray\">\n              ~{inputValueUsdToDisplay} {mockData.additionalCurrency}\n            </span>\n          }\n          prefixPosition=\"button\"\n          min={0}\n          max={maxStakingValueBN.toFixed()}\n          stringMode // to support high precision decimals\n          onChange={handleValueChange}\n        />\n        <div className=\"stake-unstake-modal__balance text-right\">Balance: {balanceToDisplay}</div>\n        <Slider value={percent} onChange={handlePercentChange} />\n        <div className=\"box-f-ai-c box-f-jc-sb stake-unstake-modal__btns\">\n          {percentBoundariesButtons.map(({ value, name = value }) => {\n            const percentChangeHandler = () => handlePercentChange(value);\n            return (\n              <Button key={name} colorScheme=\"yellow-l\" size=\"smd\" onClick={percentChangeHandler}>\n                <span className=\"text-ssmd\">{name}</span>\n              </Button>\n            );\n          })}\n        </div>\n        <Button\n          className=\"stake-unstake-modal__btn\"\n          loading={pendingTx}\n          disabled={hasValidationErrors}\n          onClick={hasValidationErrors ? undefined : handleConfirm}\n        >\n          <span className=\"text-white text-bold text-smd\">Confirm</span>\n        </Button>\n        {isStaking && (\n          <Button\n            className=\"stake-unstake-modal__btn stake-unstake-modal__btn-get-currency\"\n            colorScheme=\"outline-purple\"\n            link=\"/trade/swap\"\n          >\n            <span className=\"text-bold text-smd\">Get RP1</span>\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n});\n\nexport default StakeUnstakeModal;\n"]},"metadata":{},"sourceType":"module"}