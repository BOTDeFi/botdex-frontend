{"ast":null,"code":"import optimizeCb from './_optimizeCb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js'; // The cornerstone for collection functions, an `each`\n// implementation, aka `forEach`.\n// Handles raw objects in addition to array-likes. Treats all\n// sparse array-likes as if they were dense.\n\nexport default function each(obj, iteratee, context) {\n  iteratee = optimizeCb(iteratee, context);\n  var i, length;\n\n  if (isArrayLike(obj)) {\n    for (i = 0, length = obj.length; i < length; i++) {\n      iteratee(obj[i], i, obj);\n    }\n  } else {\n    var _keys = keys(obj);\n\n    for (i = 0, length = _keys.length; i < length; i++) {\n      iteratee(obj[_keys[i]], _keys[i], obj);\n    }\n  }\n\n  return obj;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/underscore/modules/each.js"],"names":["optimizeCb","isArrayLike","keys","each","obj","iteratee","context","i","length","_keys"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,IAAT,CAAcC,GAAd,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsC;AACnDD,EAAAA,QAAQ,GAAGL,UAAU,CAACK,QAAD,EAAWC,OAAX,CAArB;AACA,MAAIC,CAAJ,EAAOC,MAAP;;AACA,MAAIP,WAAW,CAACG,GAAD,CAAf,EAAsB;AACpB,SAAKG,CAAC,GAAG,CAAJ,EAAOC,MAAM,GAAGJ,GAAG,CAACI,MAAzB,EAAiCD,CAAC,GAAGC,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChDF,MAAAA,QAAQ,CAACD,GAAG,CAACG,CAAD,CAAJ,EAASA,CAAT,EAAYH,GAAZ,CAAR;AACD;AACF,GAJD,MAIO;AACL,QAAIK,KAAK,GAAGP,IAAI,CAACE,GAAD,CAAhB;;AACA,SAAKG,CAAC,GAAG,CAAJ,EAAOC,MAAM,GAAGC,KAAK,CAACD,MAA3B,EAAmCD,CAAC,GAAGC,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClDF,MAAAA,QAAQ,CAACD,GAAG,CAACK,KAAK,CAACF,CAAD,CAAN,CAAJ,EAAgBE,KAAK,CAACF,CAAD,CAArB,EAA0BH,GAA1B,CAAR;AACD;AACF;;AACD,SAAOA,GAAP;AACD","sourcesContent":["import optimizeCb from './_optimizeCb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// The cornerstone for collection functions, an `each`\n// implementation, aka `forEach`.\n// Handles raw objects in addition to array-likes. Treats all\n// sparse array-likes as if they were dense.\nexport default function each(obj, iteratee, context) {\n  iteratee = optimizeCb(iteratee, context);\n  var i, length;\n  if (isArrayLike(obj)) {\n    for (i = 0, length = obj.length; i < length; i++) {\n      iteratee(obj[i], i, obj);\n    }\n  } else {\n    var _keys = keys(obj);\n    for (i = 0, length = _keys.length; i < length; i++) {\n      iteratee(obj[_keys[i]], _keys[i], obj);\n    }\n  }\n  return obj;\n}\n"]},"metadata":{},"sourceType":"module"}