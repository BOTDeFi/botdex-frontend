{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport { PoolFarmingMode } from '@/types';\nimport { toBigNumber } from '@/utils';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { getBalanceAmount, getBalanceAmountBN, getDecimalAmount, getFullDisplayBalance } from '@/utils/formatters';\nexport const convertSharesToRefinery = (shares, refineryPerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceAmountBN(refineryPerFullShare, decimals);\n  const amountInRefinery = new BigNumber(shares.multipliedBy(sharePriceNumber));\n  const refineryAsBigNumberBalance = getBalanceAmountBN(amountInRefinery, decimals);\n  const refineryAsNumberBalance = refineryAsBigNumberBalance.toNumber();\n  const refineryAsBigNumber = getDecimalAmount(refineryAsBigNumberBalance, decimals);\n  const refineryAsDisplayBalance = getFullDisplayBalance({\n    balance: amountInRefinery,\n    decimals,\n    displayDecimals: decimalsToRound\n  });\n  return {\n    refineryAsNumberBalance,\n    refineryAsBigNumber,\n    refineryAsDisplayBalance\n  };\n};\nexport const convertRefineryToShares = (refinery, refineryPerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceAmount(refineryPerFullShare, decimals);\n  const amountInShares = new BigNumber(refinery.dividedBy(sharePriceNumber));\n  const sharesAsNumberBalance = getBalanceAmount(amountInShares, decimals);\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\n  const sharesAsDisplayBalance = getFullDisplayBalance({\n    balance: amountInShares,\n    decimals,\n    displayDecimals: decimalsToRound\n  });\n  return {\n    sharesAsNumberBalance,\n    sharesAsBigNumber,\n    sharesAsDisplayBalance\n  };\n};\nexport const transformUserData = userData => {\n  return {\n    allowance: toBigNumber(userData === null || userData === void 0 ? void 0 : userData.allowance),\n    stakingTokenBalance: toBigNumber(userData === null || userData === void 0 ? void 0 : userData.stakingTokenBalance),\n    stakedBalance: toBigNumber(userData === null || userData === void 0 ? void 0 : userData.stakedBalance),\n    pendingReward: toBigNumber(userData === null || userData === void 0 ? void 0 : userData.pendingReward)\n  };\n};\nexport const transformPool = pool => {\n  const {\n    totalStaked,\n    stakingLimit,\n    userData,\n    ...rest\n  } = pool;\n  return { ...rest,\n    userData: transformUserData(userData),\n    totalStaked: toBigNumber(totalStaked),\n    stakingLimit: toBigNumber(stakingLimit)\n  };\n};\nexport const getRefineryVaultEarnings = (accountAddress, refineryAtLastUserAction, userShares, pricePerFullShare) => {\n  const hasAutoEarnings = Boolean(accountAddress) && refineryAtLastUserAction && refineryAtLastUserAction.gt(0) && userShares && userShares.gt(0);\n  const {\n    refineryAsBigNumber\n  } = convertSharesToRefinery(userShares, pricePerFullShare);\n  const autoRefineryProfit = refineryAsBigNumber.minus(refineryAtLastUserAction);\n  const autoRefineryToDisplay = autoRefineryProfit.gte(0) ? getBalanceAmount(autoRefineryProfit, 18) : 0; // const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);\n  // const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0;\n\n  return {\n    hasAutoEarnings,\n    autoRefineryToDisplay,\n    autoRefineryProfit\n  };\n};\nexport const getStakingBalance = pool => {\n  const {\n    userData\n  } = pool;\n  return toBigNumber(userData === null || userData === void 0 ? void 0 : userData.stakingTokenBalance);\n};\nexport const getStakedValue = (farmMode, pool, userShares, pricePerFullShare) => {\n  if (farmMode === PoolFarmingMode.auto) {\n    const {\n      refineryAsBigNumber\n    } = convertSharesToRefinery(userShares || BIG_ZERO, pricePerFullShare || BIG_ZERO);\n    return refineryAsBigNumber;\n  }\n\n  const {\n    userData\n  } = pool;\n  return toBigNumber(userData === null || userData === void 0 ? void 0 : userData.stakedBalance);\n};\nexport const getFarmMode = pool => {\n  if (pool.isAutoVault) return PoolFarmingMode.auto;\n  if (pool.id === 0) return PoolFarmingMode.manual;\n  return PoolFarmingMode.earn;\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/helpers.ts"],"names":["BigNumber","PoolFarmingMode","toBigNumber","BIG_ZERO","getBalanceAmount","getBalanceAmountBN","getDecimalAmount","getFullDisplayBalance","convertSharesToRefinery","shares","refineryPerFullShare","decimals","decimalsToRound","sharePriceNumber","amountInRefinery","multipliedBy","refineryAsBigNumberBalance","refineryAsNumberBalance","toNumber","refineryAsBigNumber","refineryAsDisplayBalance","balance","displayDecimals","convertRefineryToShares","refinery","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","transformUserData","userData","allowance","stakingTokenBalance","stakedBalance","pendingReward","transformPool","pool","totalStaked","stakingLimit","rest","getRefineryVaultEarnings","accountAddress","refineryAtLastUserAction","userShares","pricePerFullShare","hasAutoEarnings","Boolean","gt","autoRefineryProfit","minus","autoRefineryToDisplay","gte","getStakingBalance","getStakedValue","farmMode","auto","getFarmMode","isAutoVault","id","manual","earn"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\n\nimport { IPoolFarmingMode, Pool, PoolFarmingMode } from '@/types';\nimport { toBigNumber } from '@/utils';\nimport { BIG_ZERO } from '@/utils/constants';\nimport {\n  getBalanceAmount,\n  getBalanceAmountBN,\n  getDecimalAmount,\n  getFullDisplayBalance,\n} from '@/utils/formatters';\n\ntype UserData =\n  | Pool['userData']\n  | {\n      allowance: number | string;\n      stakingTokenBalance: number | string;\n      stakedBalance: number | string;\n      pendingReward: number | string;\n    };\n\nexport const convertSharesToRefinery = (\n  shares: BigNumber,\n  refineryPerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n): {\n  refineryAsNumberBalance: number;\n  refineryAsBigNumber: BigNumber;\n  refineryAsDisplayBalance: string | number;\n} => {\n  const sharePriceNumber = getBalanceAmountBN(refineryPerFullShare, decimals);\n  const amountInRefinery = new BigNumber(shares.multipliedBy(sharePriceNumber));\n  const refineryAsBigNumberBalance = getBalanceAmountBN(amountInRefinery, decimals);\n  const refineryAsNumberBalance = refineryAsBigNumberBalance.toNumber();\n  const refineryAsBigNumber = getDecimalAmount(refineryAsBigNumberBalance, decimals);\n  const refineryAsDisplayBalance = getFullDisplayBalance({\n    balance: amountInRefinery,\n    decimals,\n    displayDecimals: decimalsToRound,\n  });\n  return { refineryAsNumberBalance, refineryAsBigNumber, refineryAsDisplayBalance };\n};\n\nexport interface IConvertRefineryToSharesResult {\n  sharesAsNumberBalance: number;\n  sharesAsBigNumber: BigNumber;\n  sharesAsDisplayBalance: string | number;\n}\n\nexport const convertRefineryToShares = (\n  refinery: BigNumber,\n  refineryPerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n): IConvertRefineryToSharesResult => {\n  const sharePriceNumber = getBalanceAmount(refineryPerFullShare, decimals);\n  const amountInShares = new BigNumber(refinery.dividedBy(sharePriceNumber));\n  const sharesAsNumberBalance = getBalanceAmount(amountInShares, decimals);\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\n  const sharesAsDisplayBalance = getFullDisplayBalance({\n    balance: amountInShares,\n    decimals,\n    displayDecimals: decimalsToRound,\n  });\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance };\n};\n\nexport const transformUserData = (\n  userData: UserData,\n): {\n  allowance: BigNumber;\n  stakingTokenBalance: BigNumber;\n  stakedBalance: BigNumber;\n  pendingReward: BigNumber;\n} => {\n  return {\n    allowance: toBigNumber(userData?.allowance),\n    stakingTokenBalance: toBigNumber(userData?.stakingTokenBalance),\n    stakedBalance: toBigNumber(userData?.stakedBalance),\n    pendingReward: toBigNumber(userData?.pendingReward),\n  };\n};\n\nexport const transformPool = (pool: Pool): Pool => {\n  const { totalStaked, stakingLimit, userData, ...rest } = pool;\n\n  return {\n    ...rest,\n    userData: transformUserData(userData),\n    totalStaked: toBigNumber(totalStaked),\n    stakingLimit: toBigNumber(stakingLimit),\n  } as Pool;\n};\n\nexport const getRefineryVaultEarnings = (\n  accountAddress: string,\n  refineryAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n): {\n  hasAutoEarnings: boolean;\n  autoRefineryToDisplay: number;\n  autoRefineryProfit: BigNumber;\n} => {\n  const hasAutoEarnings =\n    Boolean(accountAddress) &&\n    refineryAtLastUserAction &&\n    refineryAtLastUserAction.gt(0) &&\n    userShares &&\n    userShares.gt(0);\n  const { refineryAsBigNumber } = convertSharesToRefinery(userShares, pricePerFullShare);\n  const autoRefineryProfit = refineryAsBigNumber.minus(refineryAtLastUserAction);\n  const autoRefineryToDisplay = autoRefineryProfit.gte(0)\n    ? getBalanceAmount(autoRefineryProfit, 18)\n    : 0;\n\n  // const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);\n  // const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0;\n  return { hasAutoEarnings, autoRefineryToDisplay, autoRefineryProfit };\n};\n\nexport const getStakingBalance = (pool: Pool): BigNumber => {\n  const { userData } = pool;\n  return toBigNumber(userData?.stakingTokenBalance);\n};\n\nexport const getStakedValue = (\n  farmMode: IPoolFarmingMode,\n  pool: Pool,\n  userShares: BigNumber | null,\n  pricePerFullShare: BigNumber | null,\n): BigNumber => {\n  if (farmMode === PoolFarmingMode.auto) {\n    const { refineryAsBigNumber } = convertSharesToRefinery(\n      userShares || BIG_ZERO,\n      pricePerFullShare || BIG_ZERO,\n    );\n    return refineryAsBigNumber;\n  }\n  const { userData } = pool;\n  return toBigNumber(userData?.stakedBalance);\n};\n\nexport const getFarmMode = (pool: Pool): IPoolFarmingMode => {\n  if (pool.isAutoVault) return PoolFarmingMode.auto;\n  if (pool.id === 0) return PoolFarmingMode.manual;\n  return PoolFarmingMode.earn;\n};\n"]},"metadata":{},"sourceType":"module"}