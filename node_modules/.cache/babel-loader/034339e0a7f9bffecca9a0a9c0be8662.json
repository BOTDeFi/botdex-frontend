{"ast":null,"code":"import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './from';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = popResultSelector(args);\n\n  var _a = argsArgArrayOrObject(args),\n      sources = _a.args,\n      keys = _a.keys;\n\n  var result = new Observable(function (subscriber) {\n    var length = sources.length;\n\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(length);\n    var remainingCompletions = length;\n    var remainingEmissions = length;\n\n    var _loop_1 = function (sourceIndex) {\n      var hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n\n        values[sourceIndex] = value;\n      }, function () {\n        if (! --remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject(keys, values) : values);\n          }\n\n          subscriber.complete();\n        }\n      }));\n    };\n\n    for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}","map":{"version":3,"sources":["../../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,oBAAT,QAAqC,8BAArC;AACA,SAAS,SAAT,QAA0B,QAA1B;AACA,SAAS,iBAAT,QAAkC,cAAlC;AACA,SAAS,kBAAT,QAAmC,iCAAnC;AACA,SAAS,gBAAT,QAAiC,0BAAjC;AACA,SAAS,YAAT,QAA6B,sBAA7B;AAyIA,OAAM,SAAU,QAAV,GAAkB;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACvB,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAD,CAAxC;;AACM,MAAA,EAAA,GAA0B,oBAAoB,CAAC,IAAD,CAA9C;AAAA,MAAQ,OAAO,GAAA,EAAA,CAAA,IAAf;AAAA,MAAiB,IAAI,GAAA,EAAA,CAAA,IAArB;;AACN,MAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,UAAC,UAAD,EAAW;AAC/B,QAAA,MAAM,GAAK,OAAO,CAAZ,MAAN;;AACR,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,UAAU,CAAC,QAAX;AACA;AACD;;AACD,QAAM,MAAM,GAAG,IAAI,KAAJ,CAAU,MAAV,CAAf;AACA,QAAI,oBAAoB,GAAG,MAA3B;AACA,QAAI,kBAAkB,GAAG,MAAzB;;4BACS,W,EAAW;AAClB,UAAI,QAAQ,GAAG,KAAf;AACA,MAAA,SAAS,CAAC,OAAO,CAAC,WAAD,CAAR,CAAT,CAAgC,SAAhC,CACE,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAM;AACJ,YAAI,CAAC,QAAL,EAAe;AACb,UAAA,QAAQ,GAAG,IAAX;AACA,UAAA,kBAAkB;AACnB;;AACD,QAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,KAAtB;AACD,OARH,EASE,YAAA;AACE,YAAI,CAAC,GAAE,oBAAH,IAA2B,CAAC,QAAhC,EAA0C;AACxC,cAAI,CAAC,kBAAL,EAAyB;AACvB,YAAA,UAAU,CAAC,IAAX,CAAgB,IAAI,GAAG,YAAY,CAAC,IAAD,EAAO,MAAP,CAAf,GAAgC,MAApD;AACD;;AACD,UAAA,UAAU,CAAC,QAAX;AACD;AACF,OAhBH,CADF;;;AAFF,SAAK,IAAI,WAAW,GAAG,CAAvB,EAA0B,WAAW,GAAG,MAAxC,EAAgD,WAAW,EAA3D,EAA6D;cAApD,W;AAsBR;AACF,GAhCc,CAAf;AAiCA,SAAO,cAAc,GAAG,MAAM,CAAC,IAAP,CAAY,gBAAgB,CAAC,cAAD,CAA5B,CAAH,GAAmD,MAAxE;AACD","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './from';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var resultSelector = popResultSelector(args);\n    var _a = argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;\n    var result = new Observable(function (subscriber) {\n        var length = sources.length;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        var values = new Array(length);\n        var remainingCompletions = length;\n        var remainingEmissions = length;\n        var _loop_1 = function (sourceIndex) {\n            var hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, function () {\n                if (!--remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        };\n        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            _loop_1(sourceIndex);\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n//# sourceMappingURL=forkJoin.js.map"]},"metadata":{},"sourceType":"module"}