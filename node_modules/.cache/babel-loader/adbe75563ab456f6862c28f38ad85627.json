{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { getSnapshotContext } from '@/services/apolloClient';\nexport const GET_PROPOSAL = gql`\n  query GetProposal($id: String) {\n    proposal(id: $id) {\n      id\n      ipfs\n      title\n      body\n      choices\n      start\n      end\n      snapshot\n      state\n      author\n      type\n      space {\n        id\n        name\n      }\n    }\n  }\n`;\n/**\n * Get proposal information by its id.\n */\n\nexport const useGetProposal = options => {\n  _s();\n\n  const [func, responseData] = useLazyQuery(GET_PROPOSAL, options);\n  const getProposal = useCallback(id => {\n    func({ ...getSnapshotContext(),\n      variables: {\n        id\n      }\n    });\n  }, [func]);\n  return {\n    getProposal,\n    options: [func, responseData]\n  };\n};\n\n_s(useGetProposal, \"m74LJM8YI06ccHd95Mq+4UujQc4=\", false, function () {\n  return [useLazyQuery];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposal.ts"],"names":["useCallback","gql","useLazyQuery","getSnapshotContext","GET_PROPOSAL","useGetProposal","options","func","responseData","getProposal","id","variables"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,GAAT,EAAgDC,YAAhD,QAAoE,gBAApE;AAEA,SAASC,kBAAT,QAAmC,yBAAnC;AA0BA,OAAO,MAAMC,YAAY,GAAGH,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBO;AAsBP;AACA;AACA;;AACA,OAAO,MAAMI,cAAc,GACzBC,OAD4B,IAKzB;AAAA;;AACH,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBN,YAAY,CACvCE,YADuC,EAEvCE,OAFuC,CAAzC;AAKA,QAAMG,WAAW,GAAGT,WAAW,CAC5BU,EAAD,IAAgB;AACdH,IAAAA,IAAI,CAAC,EACH,GAAGJ,kBAAkB,EADlB;AAEHQ,MAAAA,SAAS,EAAE;AACTD,QAAAA;AADS;AAFR,KAAD,CAAJ;AAMD,GAR4B,EAS7B,CAACH,IAAD,CAT6B,CAA/B;AAYA,SAAO;AAAEE,IAAAA,WAAF;AAAeH,IAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,YAAP;AAAxB,GAAP;AACD,CAxBM;;GAAMH,c;UAMkBH,Y","sourcesContent":["import { useCallback } from 'react';\nimport { gql, LazyQueryHookOptions, QueryTuple, useLazyQuery } from '@apollo/client';\n\nimport { getSnapshotContext } from '@/services/apolloClient';\n\nimport { ISnapshotSpace, ProposalStatus, ProposalVotingSystem } from './types';\n\nexport interface IProposal {\n  id: string;\n  ipfs: string;\n  title: string;\n  body: string;\n  choices: string[];\n  author: string;\n  start: number;\n  end: number;\n  state: ProposalStatus;\n  type: ProposalVotingSystem;\n  snapshot: string;\n  space: ISnapshotSpace;\n}\n\nexport interface IGetProposalResponse {\n  proposal: IProposal;\n}\nexport interface IGetProposalVariables {\n  id: string;\n}\n\nexport const GET_PROPOSAL = gql`\n  query GetProposal($id: String) {\n    proposal(id: $id) {\n      id\n      ipfs\n      title\n      body\n      choices\n      start\n      end\n      snapshot\n      state\n      author\n      type\n      space {\n        id\n        name\n      }\n    }\n  }\n`;\n\n/**\n * Get proposal information by its id.\n */\nexport const useGetProposal = (\n  options?: LazyQueryHookOptions<IGetProposalResponse, IGetProposalVariables>,\n): {\n  getProposal: (id: string) => void;\n  options: QueryTuple<IGetProposalResponse, IGetProposalVariables>; // ReturnType<typeof useLazyQuery>;\n} => {\n  const [func, responseData] = useLazyQuery<IGetProposalResponse, IGetProposalVariables>(\n    GET_PROPOSAL,\n    options,\n  );\n\n  const getProposal = useCallback(\n    (id: string) => {\n      func({\n        ...getSnapshotContext(),\n        variables: {\n          id,\n        },\n      });\n    },\n    [func],\n  );\n\n  return { getProposal, options: [func, responseData] };\n};\n"]},"metadata":{},"sourceType":"module"}