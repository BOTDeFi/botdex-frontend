{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { getSnapshotContext } from '@/services/apolloClient';\n// Response example\n// \"votes\": [\n//   {\n//     \"id\": \"QmcPeDcbcazmAm5rMtfvE7VVAW7xcDA6igrzb1WwQcWhKC\",\n//     \"voter\": \"0xd3D7080FDdC88277C18D6e63Acc86c5437088b41\",\n//     \"created\": 1630457828,\n//     \"choice\": 2,\n//     \"space\": {\n//       \"id\": \"pancake\"\n//     }\n//   }\n// ]\nexport const GET_VOTES = gql`\n  query GetVotes($proposalId: String!) {\n    votes(where: { proposal: $proposalId }) {\n      id\n      voter\n      created\n      choice\n      space {\n        id\n      }\n    }\n  }\n`;\n/**\n * Get votes list for the given proposal by its id.\n */\n\nexport const useGetProposalVotes = options => {\n  _s();\n\n  const [func, responseData] = useLazyQuery(GET_VOTES, options);\n  const getProposalVotes = useCallback(proposalId => {\n    func({ ...getSnapshotContext(),\n      variables: {\n        proposalId\n      }\n    });\n  }, [func]);\n  return {\n    getProposalVotes,\n    options: [func, responseData]\n  };\n};\n\n_s(useGetProposalVotes, \"uoCU4wwWxc/G7bpg/Xq7KZ9chLU=\", false, function () {\n  return [useLazyQuery];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposalVotes.ts"],"names":["useCallback","gql","useLazyQuery","getSnapshotContext","GET_VOTES","useGetProposalVotes","options","func","responseData","getProposalVotes","proposalId","variables"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,GAAT,EAAgDC,YAAhD,QAAoE,gBAApE;AAEA,SAASC,kBAAT,QAAmC,yBAAnC;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,SAAS,GAAGH,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO;AAcP;AACA;AACA;;AACA,OAAO,MAAMI,mBAAmB,GAC9BC,OADiC,IAK9B;AAAA;;AACH,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBN,YAAY,CACvCE,SADuC,EAEvCE,OAFuC,CAAzC;AAKA,QAAMG,gBAAgB,GAAGT,WAAW,CACjCU,UAAD,IAAwB;AACtBH,IAAAA,IAAI,CAAC,EACH,GAAGJ,kBAAkB,EADlB;AAEHQ,MAAAA,SAAS,EAAE;AACTD,QAAAA;AADS;AAFR,KAAD,CAAJ;AAMD,GARiC,EASlC,CAACH,IAAD,CATkC,CAApC;AAYA,SAAO;AAAEE,IAAAA,gBAAF;AAAoBH,IAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,YAAP;AAA7B,GAAP;AACD,CAxBM;;GAAMH,mB;UAMkBH,Y","sourcesContent":["import { useCallback } from 'react';\nimport { gql, LazyQueryHookOptions, QueryTuple, useLazyQuery } from '@apollo/client';\n\nimport { getSnapshotContext } from '@/services/apolloClient';\n\nimport { ISnapshotSpace } from './types';\n\nexport interface IProposalVote {\n  id: string;\n  voter: string;\n  created: number;\n  choice: number;\n  space: ISnapshotSpace;\n}\n\nexport interface IProposalVoteWithVotingPower extends IProposalVote {\n  votingPower: string;\n}\n\nexport interface IGetProposalVotesResponse {\n  votes: IProposalVote[];\n}\nexport interface IGetProposalVotesVariables {\n  proposalId: string;\n}\n\n// Response example\n// \"votes\": [\n//   {\n//     \"id\": \"QmcPeDcbcazmAm5rMtfvE7VVAW7xcDA6igrzb1WwQcWhKC\",\n//     \"voter\": \"0xd3D7080FDdC88277C18D6e63Acc86c5437088b41\",\n//     \"created\": 1630457828,\n//     \"choice\": 2,\n//     \"space\": {\n//       \"id\": \"pancake\"\n//     }\n//   }\n// ]\n\nexport const GET_VOTES = gql`\n  query GetVotes($proposalId: String!) {\n    votes(where: { proposal: $proposalId }) {\n      id\n      voter\n      created\n      choice\n      space {\n        id\n      }\n    }\n  }\n`;\n\n/**\n * Get votes list for the given proposal by its id.\n */\nexport const useGetProposalVotes = (\n  options?: LazyQueryHookOptions<IGetProposalVotesResponse, IGetProposalVotesVariables>,\n): {\n  getProposalVotes: (id: string) => void;\n  options: QueryTuple<IGetProposalVotesResponse, IGetProposalVotesVariables>;\n} => {\n  const [func, responseData] = useLazyQuery<IGetProposalVotesResponse, IGetProposalVotesVariables>(\n    GET_VOTES,\n    options,\n  );\n\n  const getProposalVotes = useCallback(\n    (proposalId: string) => {\n      func({\n        ...getSnapshotContext(),\n        variables: {\n          proposalId,\n        },\n      });\n    },\n    [func],\n  );\n\n  return { getProposalVotes, options: [func, responseData] };\n};\n"]},"metadata":{},"sourceType":"module"}