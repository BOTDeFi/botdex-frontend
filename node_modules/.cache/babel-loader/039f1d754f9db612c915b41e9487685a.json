{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport { Precisions } from '@/types';\nimport { BIG_ZERO } from './constants';\n/**\n * Converts value to BigNumber. If it's `undefined` returns `new BigNumber(0)`\n *\n * If `nullable` is `true` return null when input equals to `null`\n */\n\nexport function toBigNumber(value) {\n  if (value === null) return null;\n  if (value === undefined) return BIG_ZERO;\n  if (BigNumber.isBigNumber(value)) return value;\n  return new BigNumber(value);\n}\n/**\n * Converts tokens amount to usd amount.\n */\n\nexport function getTokenUsdPrice(tokens, tokenUsdPrice, humanFriendly = true) {\n  const tokenUsdPriceAsBigNumber = toBigNumber(tokenUsdPrice);\n  const convertedTokenPrice = tokens.times(tokenUsdPriceAsBigNumber);\n  return humanFriendly ? convertedTokenPrice.toFixed(Precisions.fiat) : convertedTokenPrice;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/index.ts"],"names":["BigNumber","Precisions","BIG_ZERO","toBigNumber","value","undefined","isBigNumber","getTokenUsdPrice","tokens","tokenUsdPrice","humanFriendly","tokenUsdPriceAsBigNumber","convertedTokenPrice","times","toFixed","fiat"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AAEA,SAASC,UAAT,QAA2B,SAA3B;AAEA,SAASC,QAAT,QAAyB,aAAzB;AAEA;AACA;AACA;AACA;AACA;;AAMA,OAAO,SAASC,WAAT,CACLC,KADK,EAEa;AAClB,MAAIA,KAAK,KAAK,IAAd,EAAoB,OAAO,IAAP;AACpB,MAAIA,KAAK,KAAKC,SAAd,EAAyB,OAAOH,QAAP;AACzB,MAAIF,SAAS,CAACM,WAAV,CAAsBF,KAAtB,CAAJ,EAAkC,OAAOA,KAAP;AAClC,SAAO,IAAIJ,SAAJ,CAAcI,KAAd,CAAP;AACD;AAED;AACA;AACA;;AAeA,OAAO,SAASG,gBAAT,CACLC,MADK,EAELC,aAFK,EAGLC,aAAa,GAAG,IAHX,EAIe;AACpB,QAAMC,wBAAwB,GAAGR,WAAW,CAACM,aAAD,CAA5C;AACA,QAAMG,mBAAmB,GAAGJ,MAAM,CAACK,KAAP,CAAaF,wBAAb,CAA5B;AACA,SAAOD,aAAa,GAAGE,mBAAmB,CAACE,OAApB,CAA4Bb,UAAU,CAACc,IAAvC,CAAH,GAAkDH,mBAAtE;AACD","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\n\nimport { Precisions } from '@/types';\n\nimport { BIG_ZERO } from './constants';\n\n/**\n * Converts value to BigNumber. If it's `undefined` returns `new BigNumber(0)`\n *\n * If `nullable` is `true` return null when input equals to `null`\n */\nexport function toBigNumber(value: string | number | BigNumber | undefined): BigNumber;\nexport function toBigNumber(\n  value: string | number | BigNumber | undefined | null,\n  nullable: true,\n): BigNumber | null;\nexport function toBigNumber(\n  value: string | number | BigNumber | undefined | null,\n): BigNumber | null {\n  if (value === null) return null;\n  if (value === undefined) return BIG_ZERO;\n  if (BigNumber.isBigNumber(value)) return value;\n  return new BigNumber(value);\n}\n\n/**\n * Converts tokens amount to usd amount.\n */\nexport function getTokenUsdPrice(\n  tokens: BigNumber,\n  tokenUsdPrice: number | string | BigNumber,\n): string;\nexport function getTokenUsdPrice(\n  tokens: BigNumber,\n  tokenUsdPrice: number | string | BigNumber,\n  humanFriendly: true,\n): string;\nexport function getTokenUsdPrice(\n  tokens: BigNumber,\n  tokenUsdPrice: number | string | BigNumber,\n  humanFriendly: false,\n): BigNumber;\nexport function getTokenUsdPrice(\n  tokens: BigNumber,\n  tokenUsdPrice: number | string | BigNumber,\n  humanFriendly = true,\n): BigNumber | string {\n  const tokenUsdPriceAsBigNumber = toBigNumber(tokenUsdPrice);\n  const convertedTokenPrice = tokens.times(tokenUsdPriceAsBigNumber);\n  return humanFriendly ? convertedTokenPrice.toFixed(Precisions.fiat) : convertedTokenPrice;\n}\n"]},"metadata":{},"sourceType":"module"}