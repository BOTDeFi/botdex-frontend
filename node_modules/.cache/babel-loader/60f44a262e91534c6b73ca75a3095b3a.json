{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\n\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n\n  const columnStart = {};\n  /** @type {Construct[]} */\n\n  const resolveAllConstructs = [];\n  /** @type {Chunk[]} */\n\n  let chunks = [];\n  /** @type {Token[]} */\n\n  let stack = [];\n  /** @type {boolean|undefined} */\n\n  let consumed = true;\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  };\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects);\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode;\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n\n  return context;\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main(); // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n\n    addResult(initialize, 0); // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n  /** @type {TokenizeContext['now']} */\n\n\n  function now() {\n    return Object.assign({}, point);\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n  /** @type {Effects['consume']} */\n\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    } // Not in a string chunk.\n\n\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++; // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    } // Expose the previous character.\n\n\n    context.previous = code; // Mark as consumed.\n\n    consumed = true;\n  }\n  /** @type {Effects['enter']} */\n\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n  /** @type {Effects['exit']} */\n\n\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n\n  function constructFactory(onreturn, fields) {\n    return hook;\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs;\n      /** @type {number} */\n\n      let constructIndex;\n      /** @type {Construct} */\n\n      let currentConstruct;\n      /** @type {Info} */\n\n      let info;\n      return Array.isArray(constructs) ?\n      /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n      ? handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [// To do: add more extension tests.\n\n          /* c8 ignore next 2 */\n          ...(Array.isArray(def) ? def : def ? [def] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n\n        if (list.length === 0) {\n          return bogusState;\n        }\n\n        return handleConstruct(list[constructIndex]);\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n\n      function handleConstruct(construct) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n\n          return construct.tokenize.call( // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n      /** @type {State} */\n\n\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n      /** @type {State} */\n\n\n      function nok(code) {\n        consumed = true;\n        info.restore();\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n\n        return bogusState;\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      restore,\n      from: startEventsIndex\n    };\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Chunk[]} */\n\n  let view;\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex);\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n\n  return view;\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {string[]} */\n\n  const result = [];\n  /** @type {boolean|undefined} */\n\n  let atTab;\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n\n    let value;\n\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = '\\r';\n          break;\n        }\n\n      case -4:\n        {\n          value = '\\n';\n          break;\n        }\n\n      case -3:\n        {\n          value = '\\r' + '\\n';\n          break;\n        }\n\n      case -2:\n        {\n          value = expandTabs ? ' ' : '\\t';\n          break;\n        }\n\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = ' ';\n          break;\n        }\n\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n\n    atTab = chunk === -2;\n    result.push(value);\n  }\n\n  return result.join('');\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark/lib/create-tokenizer.js"],"names":["markdownLineEnding","push","splice","resolveAll","createTokenizer","parser","initialize","from","point","Object","assign","line","column","offset","_index","_bufferIndex","columnStart","resolveAllConstructs","chunks","stack","consumed","effects","consume","enter","exit","attempt","constructFactory","onsuccessfulconstruct","check","onsuccessfulcheck","interrupt","context","previous","code","containerState","events","sliceStream","sliceSerialize","now","defineSkip","write","state","tokenize","call","expectedCode","slice","main","length","addResult","token","expandTabs","serializeChunks","sliceChunks","value","accountForPotentialSkip","chunkIndex","chunk","go","charCodeAt","undefined","type","fields","start","pop","end","construct","info","_","restore","onreturn","hook","constructs","returnState","bogusState","listOfConstructs","constructIndex","currentConstruct","Array","isArray","handleListOfConstructs","handleMapOfConstructs","map","def","all","null","list","handleConstruct","store","partial","name","disable","includes","nok","create","ok","resolve","resolveTo","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","startIndex","startBufferIndex","endIndex","endBufferIndex","view","index","result","atTab","String","fromCharCode","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,kBAAR,QAAiC,0BAAjC;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,wBAA3B;AACA,SAAQC,UAAR,QAAyB,4BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,UAAjC,EAA6CC,IAA7C,EAAmD;AACxD;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CACVH,IAAI,GACAE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,CADA,GAEA;AACEI,IAAAA,IAAI,EAAE,CADR;AAEEC,IAAAA,MAAM,EAAE,CAFV;AAGEC,IAAAA,MAAM,EAAE;AAHV,GAHM,EAQV;AACEC,IAAAA,MAAM,EAAE,CADV;AAEEC,IAAAA,YAAY,EAAE,CAAC;AAFjB,GARU,CAAZ;AAaA;;AAEA,QAAMC,WAAW,GAAG,EAApB;AACA;;AAEA,QAAMC,oBAAoB,GAAG,EAA7B;AACA;;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA;;AAEA,MAAIC,KAAK,GAAG,EAAZ;AACA;;AAEA,MAAIC,QAAQ,GAAG,IAAf;AACA;AACF;AACA;AACA;AACA;;AAEE,QAAMC,OAAO,GAAG;AACdC,IAAAA,OADc;AAEdC,IAAAA,KAFc;AAGdC,IAAAA,IAHc;AAIdC,IAAAA,OAAO,EAAEC,gBAAgB,CAACC,qBAAD,CAJX;AAKdC,IAAAA,KAAK,EAAEF,gBAAgB,CAACG,iBAAD,CALT;AAMdC,IAAAA,SAAS,EAAEJ,gBAAgB,CAACG,iBAAD,EAAoB;AAC7CC,MAAAA,SAAS,EAAE;AADkC,KAApB;AANb,GAAhB;AAUA;AACF;AACA;AACA;AACA;;AAEE,QAAMC,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAE,IADI;AAEdC,IAAAA,IAAI,EAAE,IAFQ;AAGdC,IAAAA,cAAc,EAAE,EAHF;AAIdC,IAAAA,MAAM,EAAE,EAJM;AAKd9B,IAAAA,MALc;AAMd+B,IAAAA,WANc;AAOdC,IAAAA,cAPc;AAQdC,IAAAA,GARc;AASdC,IAAAA,UATc;AAUdC,IAAAA;AAVc,GAAhB;AAYA;AACF;AACA;AACA;AACA;;AAEE,MAAIC,KAAK,GAAGnC,UAAU,CAACoC,QAAX,CAAoBC,IAApB,CAAyBZ,OAAzB,EAAkCV,OAAlC,CAAZ;AACA;AACF;AACA;AACA;AACA;;AAEE,MAAIuB,YAAJ;;AAEA,MAAItC,UAAU,CAACH,UAAf,EAA2B;AACzBc,IAAAA,oBAAoB,CAAChB,IAArB,CAA0BK,UAA1B;AACD;;AAED,SAAOyB,OAAP;AACA;;AAEA,WAASS,KAAT,CAAeK,KAAf,EAAsB;AACpB3B,IAAAA,MAAM,GAAGjB,IAAI,CAACiB,MAAD,EAAS2B,KAAT,CAAb;AACAC,IAAAA,IAAI,GAFgB,CAEb;;AAEP,QAAI5B,MAAM,CAACA,MAAM,CAAC6B,MAAP,GAAgB,CAAjB,CAAN,KAA8B,IAAlC,EAAwC;AACtC,aAAO,EAAP;AACD;;AAEDC,IAAAA,SAAS,CAAC1C,UAAD,EAAa,CAAb,CAAT,CARoB,CAQK;;AAEzByB,IAAAA,OAAO,CAACI,MAAR,GAAiBhC,UAAU,CAACc,oBAAD,EAAuBc,OAAO,CAACI,MAA/B,EAAuCJ,OAAvC,CAA3B;AACA,WAAOA,OAAO,CAACI,MAAf;AACD,GAlGuD,CAkGtD;AACF;AACA;;AAEA;;;AAEA,WAASE,cAAT,CAAwBY,KAAxB,EAA+BC,UAA/B,EAA2C;AACzC,WAAOC,eAAe,CAACf,WAAW,CAACa,KAAD,CAAZ,EAAqBC,UAArB,CAAtB;AACD;AACD;;;AAEA,WAASd,WAAT,CAAqBa,KAArB,EAA4B;AAC1B,WAAOG,WAAW,CAAClC,MAAD,EAAS+B,KAAT,CAAlB;AACD;AACD;;;AAEA,WAASX,GAAT,GAAe;AACb,WAAO7B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,CAAP;AACD;AACD;;;AAEA,WAAS+B,UAAT,CAAoBc,KAApB,EAA2B;AACzBrC,IAAAA,WAAW,CAACqC,KAAK,CAAC1C,IAAP,CAAX,GAA0B0C,KAAK,CAACzC,MAAhC;AACA0C,IAAAA,uBAAuB;AACxB,GA1HuD,CA0HtD;AACF;AACA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,WAASR,IAAT,GAAgB;AACd;AACA,QAAIS,UAAJ;;AAEA,WAAO/C,KAAK,CAACM,MAAN,GAAeI,MAAM,CAAC6B,MAA7B,EAAqC;AACnC,YAAMS,KAAK,GAAGtC,MAAM,CAACV,KAAK,CAACM,MAAP,CAApB,CADmC,CACA;;AAEnC,UAAI,OAAO0C,KAAP,KAAiB,QAArB,EAA+B;AAC7BD,QAAAA,UAAU,GAAG/C,KAAK,CAACM,MAAnB;;AAEA,YAAIN,KAAK,CAACO,YAAN,GAAqB,CAAzB,EAA4B;AAC1BP,UAAAA,KAAK,CAACO,YAAN,GAAqB,CAArB;AACD;;AAED,eACEP,KAAK,CAACM,MAAN,KAAiByC,UAAjB,IACA/C,KAAK,CAACO,YAAN,GAAqByC,KAAK,CAACT,MAF7B,EAGE;AACAU,UAAAA,EAAE,CAACD,KAAK,CAACE,UAAN,CAAiBlD,KAAK,CAACO,YAAvB,CAAD,CAAF;AACD;AACF,OAbD,MAaO;AACL0C,QAAAA,EAAE,CAACD,KAAD,CAAF;AACD;AACF;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAEE,WAASC,EAAT,CAAYxB,IAAZ,EAAkB;AAChBb,IAAAA,QAAQ,GAAGuC,SAAX;AACAf,IAAAA,YAAY,GAAGX,IAAf;AACAQ,IAAAA,KAAK,GAAGA,KAAK,CAACR,IAAD,CAAb;AACD;AACD;;;AAEA,WAASX,OAAT,CAAiBW,IAAjB,EAAuB;AACrB,QAAIjC,kBAAkB,CAACiC,IAAD,CAAtB,EAA8B;AAC5BzB,MAAAA,KAAK,CAACG,IAAN;AACAH,MAAAA,KAAK,CAACI,MAAN,GAAe,CAAf;AACAJ,MAAAA,KAAK,CAACK,MAAN,IAAgBoB,IAAI,KAAK,CAAC,CAAV,GAAc,CAAd,GAAkB,CAAlC;AACAqB,MAAAA,uBAAuB;AACxB,KALD,MAKO,IAAIrB,IAAI,KAAK,CAAC,CAAd,EAAiB;AACtBzB,MAAAA,KAAK,CAACI,MAAN;AACAJ,MAAAA,KAAK,CAACK,MAAN;AACD,KAToB,CASnB;;;AAEF,QAAIL,KAAK,CAACO,YAAN,GAAqB,CAAzB,EAA4B;AAC1BP,MAAAA,KAAK,CAACM,MAAN;AACD,KAFD,MAEO;AACLN,MAAAA,KAAK,CAACO,YAAN,GADK,CACgB;AACrB;AACA;;AAEA,UAAIP,KAAK,CAACO,YAAN,KAAuBG,MAAM,CAACV,KAAK,CAACM,MAAP,CAAN,CAAqBiC,MAAhD,EAAwD;AACtDvC,QAAAA,KAAK,CAACO,YAAN,GAAqB,CAAC,CAAtB;AACAP,QAAAA,KAAK,CAACM,MAAN;AACD;AACF,KAtBoB,CAsBnB;;;AAEFiB,IAAAA,OAAO,CAACC,QAAR,GAAmBC,IAAnB,CAxBqB,CAwBG;;AAExBb,IAAAA,QAAQ,GAAG,IAAX;AACD;AACD;;;AAEA,WAASG,KAAT,CAAeqC,IAAf,EAAqBC,MAArB,EAA6B;AAC3B;AACA;AACA,UAAMZ,KAAK,GAAGY,MAAM,IAAI,EAAxB;AACAZ,IAAAA,KAAK,CAACW,IAAN,GAAaA,IAAb;AACAX,IAAAA,KAAK,CAACa,KAAN,GAAcxB,GAAG,EAAjB;AACAP,IAAAA,OAAO,CAACI,MAAR,CAAelC,IAAf,CAAoB,CAAC,OAAD,EAAUgD,KAAV,EAAiBlB,OAAjB,CAApB;AACAZ,IAAAA,KAAK,CAAClB,IAAN,CAAWgD,KAAX;AACA,WAAOA,KAAP;AACD;AACD;;;AAEA,WAASzB,IAAT,CAAcoC,IAAd,EAAoB;AAClB,UAAMX,KAAK,GAAG9B,KAAK,CAAC4C,GAAN,EAAd;AACAd,IAAAA,KAAK,CAACe,GAAN,GAAY1B,GAAG,EAAf;AACAP,IAAAA,OAAO,CAACI,MAAR,CAAelC,IAAf,CAAoB,CAAC,MAAD,EAASgD,KAAT,EAAgBlB,OAAhB,CAApB;AACA,WAAOkB,KAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAEE,WAAStB,qBAAT,CAA+BsC,SAA/B,EAA0CC,IAA1C,EAAgD;AAC9ClB,IAAAA,SAAS,CAACiB,SAAD,EAAYC,IAAI,CAAC3D,IAAjB,CAAT;AACD;AACD;AACF;AACA;AACA;AACA;;;AAEE,WAASsB,iBAAT,CAA2BsC,CAA3B,EAA8BD,IAA9B,EAAoC;AAClCA,IAAAA,IAAI,CAACE,OAAL;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAEE,WAAS1C,gBAAT,CAA0B2C,QAA1B,EAAoCR,MAApC,EAA4C;AAC1C,WAAOS,IAAP;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,aAASA,IAAT,CAAcC,UAAd,EAA0BC,WAA1B,EAAuCC,UAAvC,EAAmD;AACjD;AACA,UAAIC,gBAAJ;AACA;;AAEA,UAAIC,cAAJ;AACA;;AAEA,UAAIC,gBAAJ;AACA;;AAEA,UAAIV,IAAJ;AACA,aAAOW,KAAK,CAACC,OAAN,CAAcP,UAAd;AACH;AACAQ,MAAAA,sBAAsB,CAACR,UAAD,CAFnB,GAGH,cAAcA,UAAd,CAAyB;AAAzB,QACAQ,sBAAsB,CAAC,CAACR,UAAD,CAAD,CADtB,GAEAS,qBAAqB,CAACT,UAAD,CALzB;AAMA;AACN;AACA;AACA;AACA;AACA;;AAEM,eAASS,qBAAT,CAA+BC,GAA/B,EAAoC;AAClC,eAAOnB,KAAP;AACA;;AAEA,iBAASA,KAAT,CAAe7B,IAAf,EAAqB;AACnB,gBAAMiD,GAAG,GAAGjD,IAAI,KAAK,IAAT,IAAiBgD,GAAG,CAAChD,IAAD,CAAhC;AACA,gBAAMkD,GAAG,GAAGlD,IAAI,KAAK,IAAT,IAAiBgD,GAAG,CAACG,IAAjC;AACA,gBAAMC,IAAI,GAAG,CACX;;AAEA;AACA,cAAIR,KAAK,CAACC,OAAN,CAAcI,GAAd,IAAqBA,GAArB,GAA2BA,GAAG,GAAG,CAACA,GAAD,CAAH,GAAW,EAA7C,CAJW,EAKX,IAAIL,KAAK,CAACC,OAAN,CAAcK,GAAd,IAAqBA,GAArB,GAA2BA,GAAG,GAAG,CAACA,GAAD,CAAH,GAAW,EAA7C,CALW,CAAb;AAOA,iBAAOJ,sBAAsB,CAACM,IAAD,CAAtB,CAA6BpD,IAA7B,CAAP;AACD;AACF;AACD;AACN;AACA;AACA;AACA;AACA;;;AAEM,eAAS8C,sBAAT,CAAgCM,IAAhC,EAAsC;AACpCX,QAAAA,gBAAgB,GAAGW,IAAnB;AACAV,QAAAA,cAAc,GAAG,CAAjB;;AAEA,YAAIU,IAAI,CAACtC,MAAL,KAAgB,CAApB,EAAuB;AACrB,iBAAO0B,UAAP;AACD;;AAED,eAAOa,eAAe,CAACD,IAAI,CAACV,cAAD,CAAL,CAAtB;AACD;AACD;AACN;AACA;AACA;AACA;AACA;;;AAEM,eAASW,eAAT,CAAyBrB,SAAzB,EAAoC;AAClC,eAAOH,KAAP;AACA;;AAEA,iBAASA,KAAT,CAAe7B,IAAf,EAAqB;AACnB;AACA;AACA;AACA;AACAiC,UAAAA,IAAI,GAAGqB,KAAK,EAAZ;AACAX,UAAAA,gBAAgB,GAAGX,SAAnB;;AAEA,cAAI,CAACA,SAAS,CAACuB,OAAf,EAAwB;AACtBzD,YAAAA,OAAO,CAAC6C,gBAAR,GAA2BX,SAA3B;AACD;;AAED,cACEA,SAAS,CAACwB,IAAV,IACA1D,OAAO,CAAC1B,MAAR,CAAekE,UAAf,CAA0BmB,OAA1B,CAAkCN,IAAlC,CAAuCO,QAAvC,CAAgD1B,SAAS,CAACwB,IAA1D,CAFF,EAGE;AACA,mBAAOG,GAAG,CAAC3D,IAAD,CAAV;AACD;;AAED,iBAAOgC,SAAS,CAACvB,QAAV,CAAmBC,IAAnB,EACL;AACA;AACA;AACAkB,UAAAA,MAAM,GAAGpD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACoF,MAAP,CAAc9D,OAAd,CAAd,EAAsC8B,MAAtC,CAAH,GAAmD9B,OAJpD,EAKLV,OALK,EAMLyE,EANK,EAOLF,GAPK,EAQL3D,IARK,CAAP;AASD;AACF;AACD;;;AAEA,eAAS6D,EAAT,CAAY7D,IAAZ,EAAkB;AAChBb,QAAAA,QAAQ,GAAG,IAAX;AACAiD,QAAAA,QAAQ,CAACO,gBAAD,EAAmBV,IAAnB,CAAR;AACA,eAAOM,WAAP;AACD;AACD;;;AAEA,eAASoB,GAAT,CAAa3D,IAAb,EAAmB;AACjBb,QAAAA,QAAQ,GAAG,IAAX;AACA8C,QAAAA,IAAI,CAACE,OAAL;;AAEA,YAAI,EAAEO,cAAF,GAAmBD,gBAAgB,CAAC3B,MAAxC,EAAgD;AAC9C,iBAAOuC,eAAe,CAACZ,gBAAgB,CAACC,cAAD,CAAjB,CAAtB;AACD;;AAED,eAAOF,UAAP;AACD;AACF;AACF;AACD;AACF;AACA;AACA;AACA;;;AAEE,WAASzB,SAAT,CAAmBiB,SAAnB,EAA8B1D,IAA9B,EAAoC;AAClC,QAAI0D,SAAS,CAAC9D,UAAV,IAAwB,CAACc,oBAAoB,CAAC0E,QAArB,CAA8B1B,SAA9B,CAA7B,EAAuE;AACrEhD,MAAAA,oBAAoB,CAAChB,IAArB,CAA0BgE,SAA1B;AACD;;AAED,QAAIA,SAAS,CAAC8B,OAAd,EAAuB;AACrB7F,MAAAA,MAAM,CACJ6B,OAAO,CAACI,MADJ,EAEJ5B,IAFI,EAGJwB,OAAO,CAACI,MAAR,CAAeY,MAAf,GAAwBxC,IAHpB,EAIJ0D,SAAS,CAAC8B,OAAV,CAAkBhE,OAAO,CAACI,MAAR,CAAeU,KAAf,CAAqBtC,IAArB,CAAlB,EAA8CwB,OAA9C,CAJI,CAAN;AAMD;;AAED,QAAIkC,SAAS,CAAC+B,SAAd,EAAyB;AACvBjE,MAAAA,OAAO,CAACI,MAAR,GAAiB8B,SAAS,CAAC+B,SAAV,CAAoBjE,OAAO,CAACI,MAA5B,EAAoCJ,OAApC,CAAjB;AACD;AACF;AACD;AACF;AACA;AACA;AACA;;;AAEE,WAASwD,KAAT,GAAiB;AACf,UAAMU,UAAU,GAAG3D,GAAG,EAAtB;AACA,UAAM4D,aAAa,GAAGnE,OAAO,CAACC,QAA9B;AACA,UAAMmE,qBAAqB,GAAGpE,OAAO,CAAC6C,gBAAtC;AACA,UAAMwB,gBAAgB,GAAGrE,OAAO,CAACI,MAAR,CAAeY,MAAxC;AACA,UAAMsD,UAAU,GAAGxB,KAAK,CAACtE,IAAN,CAAWY,KAAX,CAAnB;AACA,WAAO;AACLiD,MAAAA,OADK;AAEL7D,MAAAA,IAAI,EAAE6F;AAFD,KAAP;AAIA;AACJ;AACA;AACA;AACA;;AAEI,aAAShC,OAAT,GAAmB;AACjB5D,MAAAA,KAAK,GAAGyF,UAAR;AACAlE,MAAAA,OAAO,CAACC,QAAR,GAAmBkE,aAAnB;AACAnE,MAAAA,OAAO,CAAC6C,gBAAR,GAA2BuB,qBAA3B;AACApE,MAAAA,OAAO,CAACI,MAAR,CAAeY,MAAf,GAAwBqD,gBAAxB;AACAjF,MAAAA,KAAK,GAAGkF,UAAR;AACA/C,MAAAA,uBAAuB;AACxB;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAEE,WAASA,uBAAT,GAAmC;AACjC,QAAI9C,KAAK,CAACG,IAAN,IAAcK,WAAd,IAA6BR,KAAK,CAACI,MAAN,GAAe,CAAhD,EAAmD;AACjDJ,MAAAA,KAAK,CAACI,MAAN,GAAeI,WAAW,CAACR,KAAK,CAACG,IAAP,CAA1B;AACAH,MAAAA,KAAK,CAACK,MAAN,IAAgBG,WAAW,CAACR,KAAK,CAACG,IAAP,CAAX,GAA0B,CAA1C;AACD;AACF;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASyC,WAAT,CAAqBlC,MAArB,EAA6B+B,KAA7B,EAAoC;AAClC,QAAMqD,UAAU,GAAGrD,KAAK,CAACa,KAAN,CAAYhD,MAA/B;AACA,QAAMyF,gBAAgB,GAAGtD,KAAK,CAACa,KAAN,CAAY/C,YAArC;AACA,QAAMyF,QAAQ,GAAGvD,KAAK,CAACe,GAAN,CAAUlD,MAA3B;AACA,QAAM2F,cAAc,GAAGxD,KAAK,CAACe,GAAN,CAAUjD,YAAjC;AACA;;AAEA,MAAI2F,IAAJ;;AAEA,MAAIJ,UAAU,KAAKE,QAAnB,EAA6B;AAC3B;AACAE,IAAAA,IAAI,GAAG,CAACxF,MAAM,CAACoF,UAAD,CAAN,CAAmBzD,KAAnB,CAAyB0D,gBAAzB,EAA2CE,cAA3C,CAAD,CAAP;AACD,GAHD,MAGO;AACLC,IAAAA,IAAI,GAAGxF,MAAM,CAAC2B,KAAP,CAAayD,UAAb,EAAyBE,QAAzB,CAAP;;AAEA,QAAID,gBAAgB,GAAG,CAAC,CAAxB,EAA2B;AACzB;AACAG,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,CAAQ7D,KAAR,CAAc0D,gBAAd,CAAV;AACD;;AAED,QAAIE,cAAc,GAAG,CAArB,EAAwB;AACtB;AACAC,MAAAA,IAAI,CAACzG,IAAL,CAAUiB,MAAM,CAACsF,QAAD,CAAN,CAAiB3D,KAAjB,CAAuB,CAAvB,EAA0B4D,cAA1B,CAAV;AACD;AACF;;AAED,SAAOC,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASvD,eAAT,CAAyBjC,MAAzB,EAAiCgC,UAAjC,EAA6C;AAC3C,MAAIyD,KAAK,GAAG,CAAC,CAAb;AACA;;AAEA,QAAMC,MAAM,GAAG,EAAf;AACA;;AAEA,MAAIC,KAAJ;;AAEA,SAAO,EAAEF,KAAF,GAAUzF,MAAM,CAAC6B,MAAxB,EAAgC;AAC9B,UAAMS,KAAK,GAAGtC,MAAM,CAACyF,KAAD,CAApB;AACA;;AAEA,QAAItD,KAAJ;;AAEA,QAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;AAC7BH,MAAAA,KAAK,GAAGG,KAAR;AACD,KAFD,MAGE,QAAQA,KAAR;AACE,WAAK,CAAC,CAAN;AAAS;AACPH,UAAAA,KAAK,GAAG,IAAR;AACA;AACD;;AAED,WAAK,CAAC,CAAN;AAAS;AACPA,UAAAA,KAAK,GAAG,IAAR;AACA;AACD;;AAED,WAAK,CAAC,CAAN;AAAS;AACPA,UAAAA,KAAK,GAAG,OAAO,IAAf;AACA;AACD;;AAED,WAAK,CAAC,CAAN;AAAS;AACPA,UAAAA,KAAK,GAAGH,UAAU,GAAG,GAAH,GAAS,IAA3B;AACA;AACD;;AAED,WAAK,CAAC,CAAN;AAAS;AACP,cAAI,CAACA,UAAD,IAAe2D,KAAnB,EAA0B;AAC1BxD,UAAAA,KAAK,GAAG,GAAR;AACA;AACD;;AAED;AAAS;AACP;AACAA,UAAAA,KAAK,GAAGyD,MAAM,CAACC,YAAP,CAAoBvD,KAApB,CAAR;AACD;AA9BH;;AAiCFqD,IAAAA,KAAK,GAAGrD,KAAK,KAAK,CAAC,CAAnB;AACAoD,IAAAA,MAAM,CAAC3G,IAAP,CAAYoD,KAAZ;AACD;;AAED,SAAOuD,MAAM,CAACI,IAAP,CAAY,EAAZ,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Construct[]} */\n\n  const resolveAllConstructs = []\n  /** @type {Chunk[]} */\n\n  let chunks = []\n  /** @type {Token[]} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Chunk[]} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {string[]} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n"]},"metadata":{},"sourceType":"module"}