{"ast":null,"code":"import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}","map":{"version":3,"sources":["../../../../src/internal/scheduled/scheduled.ts"],"names":[],"mappings":"AAAA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,mBAAT,QAAoC,6BAApC;AACA,SAAS,SAAT,QAA0B,mBAA1B;AACA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAGA,SAAS,eAAT,QAAgC,yBAAhC;AACA,SAAS,gCAAT,QAAiD,gCAAjD;AACA,SAAS,oBAAT,QAAqC,8BAArC;AACA,SAAS,0BAAT,QAA2C,8BAA3C;AAaA,OAAM,SAAU,SAAV,CAAuB,KAAvB,EAAkD,SAAlD,EAA0E;AAC9E,MAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,QAAI,mBAAmB,CAAC,KAAD,CAAvB,EAAgC;AAC9B,aAAO,kBAAkB,CAAC,KAAD,EAAQ,SAAR,CAAzB;AACD;;AACD,QAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACtB,aAAO,aAAa,CAAC,KAAD,EAAQ,SAAR,CAApB;AACD;;AACD,QAAI,SAAS,CAAC,KAAD,CAAb,EAAsB;AACpB,aAAO,eAAe,CAAC,KAAD,EAAQ,SAAR,CAAtB;AACD;;AACD,QAAI,eAAe,CAAC,KAAD,CAAnB,EAA4B;AAC1B,aAAO,qBAAqB,CAAC,KAAD,EAAQ,SAAR,CAA5B;AACD;;AACD,QAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AACrB,aAAO,gBAAgB,CAAC,KAAD,EAAQ,SAAR,CAAvB;AACD;;AACD,QAAI,oBAAoB,CAAC,KAAD,CAAxB,EAAiC;AAC/B,aAAO,0BAA0B,CAAC,KAAD,EAAQ,SAAR,CAAjC;AACD;AACF;;AACD,QAAM,gCAAgC,CAAC,KAAD,CAAtC;AACD","sourceRoot":"","sourcesContent":["import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n//# sourceMappingURL=scheduled.js.map"]},"metadata":{},"sourceType":"module"}