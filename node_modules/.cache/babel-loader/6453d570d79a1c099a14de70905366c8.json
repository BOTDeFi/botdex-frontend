{"ast":null,"code":"import restArguments from './restArguments.js';\nimport now from './now.js'; // When a sequence of calls of the returned function ends, the argument\n// function is triggered. The end of a sequence is defined by the `wait`\n// parameter. If `immediate` is passed, the argument function will be\n// triggered at the beginning of the sequence instead of at the end.\n\nexport default function debounce(func, wait, immediate) {\n  var timeout, previous, args, result, context;\n\n  var later = function () {\n    var passed = now() - previous;\n\n    if (wait > passed) {\n      timeout = setTimeout(later, wait - passed);\n    } else {\n      timeout = null;\n      if (!immediate) result = func.apply(context, args); // This check is needed because `func` can recursively invoke `debounced`.\n\n      if (!timeout) args = context = null;\n    }\n  };\n\n  var debounced = restArguments(function (_args) {\n    context = this;\n    args = _args;\n    previous = now();\n\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n      if (immediate) result = func.apply(context, args);\n    }\n\n    return result;\n  });\n\n  debounced.cancel = function () {\n    clearTimeout(timeout);\n    timeout = args = context = null;\n  };\n\n  return debounced;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/underscore/modules/debounce.js"],"names":["restArguments","now","debounce","func","wait","immediate","timeout","previous","args","result","context","later","passed","setTimeout","apply","debounced","_args","cancel","clearTimeout"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,GAAP,MAAgB,UAAhB,C,CAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,SAA9B,EAAyC;AACtD,MAAIC,OAAJ,EAAaC,QAAb,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,OAArC;;AAEA,MAAIC,KAAK,GAAG,YAAW;AACrB,QAAIC,MAAM,GAAGX,GAAG,KAAKM,QAArB;;AACA,QAAIH,IAAI,GAAGQ,MAAX,EAAmB;AACjBN,MAAAA,OAAO,GAAGO,UAAU,CAACF,KAAD,EAAQP,IAAI,GAAGQ,MAAf,CAApB;AACD,KAFD,MAEO;AACLN,MAAAA,OAAO,GAAG,IAAV;AACA,UAAI,CAACD,SAAL,EAAgBI,MAAM,GAAGN,IAAI,CAACW,KAAL,CAAWJ,OAAX,EAAoBF,IAApB,CAAT,CAFX,CAGL;;AACA,UAAI,CAACF,OAAL,EAAcE,IAAI,GAAGE,OAAO,GAAG,IAAjB;AACf;AACF,GAVD;;AAYA,MAAIK,SAAS,GAAGf,aAAa,CAAC,UAASgB,KAAT,EAAgB;AAC5CN,IAAAA,OAAO,GAAG,IAAV;AACAF,IAAAA,IAAI,GAAGQ,KAAP;AACAT,IAAAA,QAAQ,GAAGN,GAAG,EAAd;;AACA,QAAI,CAACK,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAGO,UAAU,CAACF,KAAD,EAAQP,IAAR,CAApB;AACA,UAAIC,SAAJ,EAAeI,MAAM,GAAGN,IAAI,CAACW,KAAL,CAAWJ,OAAX,EAAoBF,IAApB,CAAT;AAChB;;AACD,WAAOC,MAAP;AACD,GAT4B,CAA7B;;AAWAM,EAAAA,SAAS,CAACE,MAAV,GAAmB,YAAW;AAC5BC,IAAAA,YAAY,CAACZ,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGE,IAAI,GAAGE,OAAO,GAAG,IAA3B;AACD,GAHD;;AAKA,SAAOK,SAAP;AACD","sourcesContent":["import restArguments from './restArguments.js';\nimport now from './now.js';\n\n// When a sequence of calls of the returned function ends, the argument\n// function is triggered. The end of a sequence is defined by the `wait`\n// parameter. If `immediate` is passed, the argument function will be\n// triggered at the beginning of the sequence instead of at the end.\nexport default function debounce(func, wait, immediate) {\n  var timeout, previous, args, result, context;\n\n  var later = function() {\n    var passed = now() - previous;\n    if (wait > passed) {\n      timeout = setTimeout(later, wait - passed);\n    } else {\n      timeout = null;\n      if (!immediate) result = func.apply(context, args);\n      // This check is needed because `func` can recursively invoke `debounced`.\n      if (!timeout) args = context = null;\n    }\n  };\n\n  var debounced = restArguments(function(_args) {\n    context = this;\n    args = _args;\n    previous = now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n      if (immediate) result = func.apply(context, args);\n    }\n    return result;\n  });\n\n  debounced.cancel = function() {\n    clearTimeout(timeout);\n    timeout = args = context = null;\n  };\n\n  return debounced;\n}\n"]},"metadata":{},"sourceType":"module"}