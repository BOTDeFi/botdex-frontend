{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\n\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n\n  let open;\n  /** @type {Token} */\n\n  let group;\n  /** @type {Token} */\n\n  let text;\n  /** @type {Token} */\n\n  let openingSequence;\n  /** @type {Token} */\n\n  let closingSequence;\n  /** @type {number} */\n\n  let use;\n  /** @type {Event[]} */\n\n  let nextEvents;\n  /** @type {number} */\n\n  let offset; // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index; // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open && // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          } // Number of markers to use from the sequence.\n\n\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = []; // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          } // Opening.\n\n\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]); // Between.\n\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context)); // Closing.\n\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]); // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n\n  index = -1;\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence');\n    marker = code;\n    return sequence(code);\n  }\n  /** @type {State} */\n\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return sequence;\n    }\n\n    const token = effects.exit('attentionSequence');\n    const after = classifyCharacter(code);\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\n\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-core-commonmark/lib/attention.js"],"names":["push","splice","classifyCharacter","resolveAll","attention","name","tokenize","tokenizeAttention","resolveAllAttention","events","context","index","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","length","type","_close","_open","sliceSerialize","charCodeAt","end","start","Object","assign","movePoint","parser","constructs","insideSpan","null","slice","effects","ok","attentionMarkers","previous","before","marker","code","enter","sequence","consume","token","exit","after","includes","close","Boolean","point","column","_bufferIndex"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n"]},"metadata":{},"sourceType":"module"}