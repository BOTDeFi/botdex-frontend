{"ast":null,"code":"/**\n * Given APR returns APY\n * @param apr farm or pool APR as percentage\n * @param compoundFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */\nexport const getApy = ({\n  apr,\n  compoundFrequency = 1,\n  days = 365,\n  performanceFee = 0\n}) => {\n  const daysAsDecimalOfYear = days / 365; // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n\n  const aprAsDecimal = apr / 100; // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n\n  const timesCompounded = 365 * compoundFrequency;\n  let apyAsDecimal = aprAsDecimal * daysAsDecimalOfYear;\n\n  if (timesCompounded > 0) {\n    apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1;\n  }\n\n  if (performanceFee) {\n    const performanceFeeAsDecimal = performanceFee / 100;\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal;\n    apyAsDecimal -= takenAsPerformanceFee;\n  }\n\n  return apyAsDecimal;\n};\nexport const getRoi = ({\n  amountEarned,\n  amountInvested\n}) => {\n  if (amountInvested === 0) {\n    return 0;\n  }\n\n  const percentage = amountEarned / amountInvested * 100;\n  return percentage;\n}; // 1 day, 7 days, 30 days, 1 year, 5 years\n\nconst DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825];\n/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only PR1 rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\n\nexport const getInterestBreakdown = ({\n  principalInUSD,\n  apr,\n  earningTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency; // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n\n  const aprAsDecimal = apr / 100; // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  // and also cause rounding errors\n\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\n  const roundingDecimalsNew = isHighValueToken ? 5 : 3;\n  return DAYS_TO_CALCULATE_AGAINST.map(days => {\n    const daysAsDecimalOfYear = days / 365; // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\n\n    const principal = principalInUSD / earningTokenPrice;\n    let interestEarned = principal * aprAsDecimal * (days / 365);\n\n    if (timesCompounded !== 0) {\n      // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n      const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear); // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\n\n      interestEarned = accruedAmount - principal;\n\n      if (performanceFee) {\n        const performanceFeeAsDecimal = performanceFee / 100;\n        const perfomanceFeeAsAmount = interestEarned * performanceFeeAsDecimal;\n        interestEarned -= perfomanceFeeAsAmount;\n      }\n    }\n\n    return parseFloat(interestEarned.toFixed(roundingDecimalsNew));\n  });\n};\n/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\n\nexport const getPrincipalForInterest = (interest, apr, compoundingFrequency, performanceFee = 0) => {\n  return DAYS_TO_CALCULATE_AGAINST.map(days => {\n    const apyAsDecimal = getApy({\n      apr,\n      compoundFrequency: compoundingFrequency,\n      days,\n      performanceFee\n    }); // console.log('inside', interest, apyAsDecimal)\n    // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\n\n    return parseFloat((interest / apyAsDecimal).toFixed(2));\n  });\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/compoundApy.ts"],"names":["getApy","apr","compoundFrequency","days","performanceFee","daysAsDecimalOfYear","aprAsDecimal","timesCompounded","apyAsDecimal","performanceFeeAsDecimal","takenAsPerformanceFee","getRoi","amountEarned","amountInvested","percentage","DAYS_TO_CALCULATE_AGAINST","getInterestBreakdown","principalInUSD","earningTokenPrice","isHighValueToken","Math","round","roundingDecimalsNew","map","principal","interestEarned","accruedAmount","perfomanceFeeAsAmount","parseFloat","toFixed","getPrincipalForInterest","interest","compoundingFrequency"],"mappings":"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","sourcesContent":["/**\n * Given APR returns APY\n * @param apr farm or pool APR as percentage\n * @param compoundFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */\nexport const getApy = ({\n  apr,\n  compoundFrequency = 1,\n  days = 365,\n  performanceFee = 0,\n}: {\n  apr: number;\n  compoundFrequency?: number;\n  days?: number;\n  performanceFee?: number;\n}): number => {\n  const daysAsDecimalOfYear = days / 365;\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const aprAsDecimal = apr / 100;\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency;\n  let apyAsDecimal = aprAsDecimal * daysAsDecimalOfYear;\n  if (timesCompounded > 0) {\n    apyAsDecimal =\n      (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1;\n  }\n  if (performanceFee) {\n    const performanceFeeAsDecimal = performanceFee / 100;\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal;\n    apyAsDecimal -= takenAsPerformanceFee;\n  }\n  return apyAsDecimal;\n};\n\nexport const getRoi = ({\n  amountEarned,\n  amountInvested,\n}: {\n  amountEarned: number;\n  amountInvested: number;\n}): number => {\n  if (amountInvested === 0) {\n    return 0;\n  }\n  const percentage = (amountEarned / amountInvested) * 100;\n  return percentage;\n};\n\n// 1 day, 7 days, 30 days, 1 year, 5 years\nconst DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825];\n\n/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only PR1 rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getInterestBreakdown = ({\n  principalInUSD,\n  apr,\n  earningTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}: {\n  principalInUSD: number;\n  apr: number;\n  earningTokenPrice: number;\n  compoundFrequency?: number;\n  performanceFee?: number;\n}): number[] => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency;\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const aprAsDecimal = apr / 100;\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  // and also cause rounding errors\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\n  const roundingDecimalsNew = isHighValueToken ? 5 : 3;\n\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const daysAsDecimalOfYear = days / 365;\n    // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\n    const principal = principalInUSD / earningTokenPrice;\n    let interestEarned = principal * aprAsDecimal * (days / 365);\n    if (timesCompounded !== 0) {\n      // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n      const accruedAmount =\n        principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear);\n      // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\n      interestEarned = accruedAmount - principal;\n      if (performanceFee) {\n        const performanceFeeAsDecimal = performanceFee / 100;\n        const perfomanceFeeAsAmount = interestEarned * performanceFeeAsDecimal;\n        interestEarned -= perfomanceFeeAsAmount;\n      }\n    }\n    return parseFloat(interestEarned.toFixed(roundingDecimalsNew));\n  });\n};\n\n/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getPrincipalForInterest = (\n  interest: number,\n  apr: number,\n  compoundingFrequency: number,\n  performanceFee = 0,\n): number[] => {\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const apyAsDecimal = getApy({\n      apr,\n      compoundFrequency: compoundingFrequency,\n      days,\n      performanceFee,\n    });\n    // console.log('inside', interest, apyAsDecimal)\n    // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\n    return parseFloat((interest / apyAsDecimal).toFixed(2));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}