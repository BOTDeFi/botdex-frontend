{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { convertRefineryToShares } from '@/store/pools/helpers';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { clogData, clogError } from '@/utils/logger';\nimport { useUpdateView } from './useUpdateView';\nconst gasOptions = {\n  gas: 380000\n};\nexport const useVaultUnstakeActions = onFinally => {\n  _s();\n\n  const {\n    updateViewByFetchingBlockchainData\n  } = useUpdateView();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const withdraw = useCallback(async (refineryVaultContract, shareStakeToWithdraw) => {\n    clogData('Converted to Shares UNSTAKING VALUE', shareStakeToWithdraw.sharesAsBigNumber.toFixed(0, BigNumber.ROUND_DOWN));\n\n    try {\n      const tx = await callWithGasPrice({\n        contract: refineryVaultContract,\n        methodName: 'withdraw',\n        methodArgs: [shareStakeToWithdraw.sharesAsBigNumber.toFixed(0, BigNumber.ROUND_DOWN)],\n        options: gasOptions\n      });\n\n      if (tx.status) {\n        successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet');\n        updateViewByFetchingBlockchainData();\n      }\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      onFinally();\n    }\n  }, [callWithGasPrice, updateViewByFetchingBlockchainData, onFinally]);\n  const withdrawAll = useCallback(async refineryVaultContract => {\n    try {\n      const tx = await callWithGasPrice({\n        contract: refineryVaultContract,\n        methodName: 'withdrawAll',\n        methodArgs: undefined,\n        options: gasOptions\n      });\n\n      if (tx.status) {\n        successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet');\n        updateViewByFetchingBlockchainData();\n      }\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      onFinally();\n    }\n  }, [callWithGasPrice, updateViewByFetchingBlockchainData, onFinally]);\n  return {\n    withdraw,\n    withdrawAll\n  };\n};\n\n_s(useVaultUnstakeActions, \"sLXhAvIM2ViE8wrS8nHKEYzHCcA=\", false, function () {\n  return [useUpdateView, useCallWithGasPrice];\n});\n\nexport const useVaultUnstake = onFinally => {\n  _s2();\n\n  const refineryVaultContract = getContract('REFINERY_VAULT');\n  const {\n    pricePerFullShare,\n    userData: {\n      userShares\n    }\n  } = useSelectVaultData();\n  const {\n    withdraw,\n    withdrawAll\n  } = useVaultUnstakeActions(onFinally);\n  const vaultUnstake = useCallback(async valueToUnstakeDecimal => {\n    clogData('UNSTAKING VALUE', {\n      valueToUnstakeDecimal,\n      pricePerFullShare,\n      valueToStakeDecimalToFixed: valueToUnstakeDecimal.toFixed(),\n      pricePerFullShareToFixed: pricePerFullShare === null || pricePerFullShare === void 0 ? void 0 : pricePerFullShare.toFixed(),\n      userShares\n    });\n    if (!pricePerFullShare || !userShares) return;\n    const shareStakeToWithdraw = convertRefineryToShares(valueToUnstakeDecimal, pricePerFullShare); // trigger withdrawAll function if the withdrawal will leave 0.000001 RP1 or less\n\n    const triggerWithdrawAllThreshold = convertRefineryToShares(new BigNumber(1000000000000), pricePerFullShare).sharesAsBigNumber;\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);\n    clogData('TEST WITHDRAW ALL', userShares.toFixed(), shareStakeToWithdraw.sharesAsBigNumber.toFixed(), sharesRemaining.toFixed(), triggerWithdrawAllThreshold.toFixed());\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold);\n\n    if (isWithdrawingAll) {\n      await withdrawAll(refineryVaultContract);\n    } else {\n      await withdraw(refineryVaultContract, shareStakeToWithdraw);\n    }\n  }, [refineryVaultContract, pricePerFullShare, userShares, withdraw, withdrawAll]);\n  return {\n    vaultUnstake\n  };\n};\n\n_s2(useVaultUnstake, \"QQywsEOKNCAaId5R2X5LpBlCjag=\", false, function () {\n  return [useSelectVaultData, useVaultUnstakeActions];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUnstakeVault.ts"],"names":["useCallback","BigNumber","errorNotification","successNotification","getContract","useCallWithGasPrice","convertRefineryToShares","useSelectVaultData","clogData","clogError","useUpdateView","gasOptions","gas","useVaultUnstakeActions","onFinally","updateViewByFetchingBlockchainData","callWithGasPrice","withdraw","refineryVaultContract","shareStakeToWithdraw","sharesAsBigNumber","toFixed","ROUND_DOWN","tx","contract","methodName","methodArgs","options","status","error","withdrawAll","undefined","useVaultUnstake","pricePerFullShare","userData","userShares","vaultUnstake","valueToUnstakeDecimal","valueToStakeDecimalToFixed","pricePerFullShareToFixed","triggerWithdrawAllThreshold","sharesRemaining","minus","isWithdrawingAll","lte"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { convertRefineryToShares, IConvertRefineryToSharesResult } from '@/store/pools/helpers';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { clogData, clogError } from '@/utils/logger';\n\nimport { useUpdateView } from './useUpdateView';\n\nconst gasOptions = { gas: 380000 };\n\nexport const useVaultUnstakeActions = (onFinally: () => void) => {\n  const { updateViewByFetchingBlockchainData } = useUpdateView();\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const withdraw = useCallback(\n    async (\n      refineryVaultContract: Contract,\n      shareStakeToWithdraw: IConvertRefineryToSharesResult,\n    ) => {\n      clogData(\n        'Converted to Shares UNSTAKING VALUE',\n        shareStakeToWithdraw.sharesAsBigNumber.toFixed(0, BigNumber.ROUND_DOWN),\n      );\n      try {\n        const tx = await callWithGasPrice({\n          contract: refineryVaultContract,\n          methodName: 'withdraw',\n          methodArgs: [shareStakeToWithdraw.sharesAsBigNumber.toFixed(0, BigNumber.ROUND_DOWN)],\n          options: gasOptions,\n        });\n        if (tx.status) {\n          successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet');\n          updateViewByFetchingBlockchainData();\n        }\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [callWithGasPrice, updateViewByFetchingBlockchainData, onFinally],\n  );\n\n  const withdrawAll = useCallback(\n    async (refineryVaultContract: Contract) => {\n      try {\n        const tx = await callWithGasPrice({\n          contract: refineryVaultContract,\n          methodName: 'withdrawAll',\n          methodArgs: undefined,\n          options: gasOptions,\n        });\n        if (tx.status) {\n          successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet');\n          updateViewByFetchingBlockchainData();\n        }\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [callWithGasPrice, updateViewByFetchingBlockchainData, onFinally],\n  );\n\n  return {\n    withdraw,\n    withdrawAll,\n  };\n};\n\nexport const useVaultUnstake = (onFinally: () => void) => {\n  const refineryVaultContract = getContract('REFINERY_VAULT');\n\n  const {\n    pricePerFullShare,\n    userData: { userShares },\n  } = useSelectVaultData();\n\n  const { withdraw, withdrawAll } = useVaultUnstakeActions(onFinally);\n\n  const vaultUnstake = useCallback(\n    async (valueToUnstakeDecimal: BigNumber) => {\n      clogData('UNSTAKING VALUE', {\n        valueToUnstakeDecimal,\n        pricePerFullShare,\n        valueToStakeDecimalToFixed: valueToUnstakeDecimal.toFixed(),\n        pricePerFullShareToFixed: pricePerFullShare?.toFixed(),\n        userShares,\n      });\n\n      if (!pricePerFullShare || !userShares) return;\n\n      const shareStakeToWithdraw = convertRefineryToShares(\n        valueToUnstakeDecimal,\n        pricePerFullShare,\n      );\n      // trigger withdrawAll function if the withdrawal will leave 0.000001 RP1 or less\n      const triggerWithdrawAllThreshold = convertRefineryToShares(\n        new BigNumber(1000000000000),\n        pricePerFullShare,\n      ).sharesAsBigNumber;\n      const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);\n\n      clogData(\n        'TEST WITHDRAW ALL',\n        userShares.toFixed(),\n        shareStakeToWithdraw.sharesAsBigNumber.toFixed(),\n        sharesRemaining.toFixed(),\n        triggerWithdrawAllThreshold.toFixed(),\n      );\n      const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold);\n\n      if (isWithdrawingAll) {\n        await withdrawAll(refineryVaultContract);\n      } else {\n        await withdraw(refineryVaultContract, shareStakeToWithdraw);\n      }\n    },\n    [refineryVaultContract, pricePerFullShare, userShares, withdraw, withdrawAll],\n  );\n\n  return { vaultUnstake };\n};\n"]},"metadata":{},"sourceType":"module"}