{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Preview/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Skeleton } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { tokens } from '@/config';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { Precisions } from '@/types';\nimport { loadingDataFormatter } from '@/utils/formatters';\nimport { clogError } from '@/utils/logger';\nimport { AutoBountyPopover } from '../Popovers';\nimport './Preview.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gasOptions = {\n  gas: 300000\n};\nconst ClaimBounty = observer(_c = _s(() => {\n  _s();\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    tokenUsdPrice\n  } = useRefineryUsdPrice();\n  const {\n    user,\n    pools: poolsStore\n  } = useMst();\n  const {\n    connect\n  } = useWalletConnectorContext();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const tokenSymbol = tokens.rp1.symbol;\n  const updateViewByFetchingBlockchainData = useCallback(() => {\n    poolsStore.fetchPoolsPublicDataAsync();\n    poolsStore.fetchVaultPublicData();\n  }, [poolsStore]);\n\n  const handleClaimBounty = async () => {\n    setPendingTx(true);\n\n    try {\n      const contract = getContract('REFINERY_VAULT');\n      const tx = await callWithGasPrice({\n        contract,\n        methodName: 'harvest',\n        options: gasOptions\n      });\n\n      if (tx.status) {\n        successNotification('Bounty collected!', `${tokenSymbol} bounty has been sent to your wallet.`);\n        updateViewByFetchingBlockchainData();\n      }\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  const {\n    fees,\n    estimatedRefineryBountyReward\n  } = useSelectVaultData();\n  const displayBountyReward = useMemo(() => loadingDataFormatter(estimatedRefineryBountyReward, {\n    displayDecimals: Precisions.shortToken\n  }), [estimatedRefineryBountyReward]);\n  const displayBountyRewardUsd = useMemo(() => loadingDataFormatter(new BigNumber(estimatedRefineryBountyReward || 0).multipliedBy(tokenUsdPrice), {\n    displayDecimals: Precisions.fiat\n  }), [estimatedRefineryBountyReward, tokenUsdPrice]);\n  const isLoadingBountyData = estimatedRefineryBountyReward === null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pools-preview__bounty box-white box-shadow\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pools-preview__bounty-title box-f-ai-c\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-upper text-ssm text-black\",\n        children: [\"Auto \", tokenSymbol, \" Bounty\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AutoBountyPopover, {\n        symbol: tokenSymbol,\n        fee: fees.callFee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pools-preview__bounty-box box-f-ai-c box-f-jc-sb\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isLoadingBountyData ? /*#__PURE__*/_jsxDEV(Skeleton.Input, {\n          style: {\n            width: 60\n          },\n          size: \"small\",\n          active: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg\",\n          children: displayBountyReward\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pools-preview__bounty-usd text-med text-gray\",\n          children: [\"~\", ' ', isLoadingBountyData ? /*#__PURE__*/_jsxDEV(Skeleton.Input, {\n            style: {\n              width: 40\n            },\n            size: \"small\",\n            active: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this) : displayBountyRewardUsd, ' ', \"USD\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), !user.address ? /*#__PURE__*/_jsxDEV(Button, {\n        className: \"pools-preview__bounty-btn\",\n        onClick: connect,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white text-smd text-bold\",\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        className: \"pools-preview__bounty-btn\",\n        loading: pendingTx,\n        disabled: !(estimatedRefineryBountyReward === null || estimatedRefineryBountyReward === void 0 ? void 0 : estimatedRefineryBountyReward.toNumber()),\n        onClick: (estimatedRefineryBountyReward === null || estimatedRefineryBountyReward === void 0 ? void 0 : estimatedRefineryBountyReward.toNumber()) ? handleClaimBounty : undefined,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white text-smd text-bold\",\n          children: \"Claim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}, \"TTYaKCHLVANyzl53PXTHFFvukS4=\", false, function () {\n  return [useRefineryUsdPrice, useMst, useWalletConnectorContext, useCallWithGasPrice, useSelectVaultData];\n}));\n_c2 = ClaimBounty;\nconst Preview = observer(_c3 = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pools-preview box-f-ai-c box-f-jc-sb\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pools-preview__box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"pools-preview__title h1-lg text-white text-bold\",\n        children: \"Rocket Pools\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pools-preview__subtitle text-white\",\n        children: [\"Simply stake tokens to earn. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 40\n        }, this), \"High APR, low risk.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimBounty, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n});\n_c4 = Preview;\nexport default Preview;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ClaimBounty$observer\");\n$RefreshReg$(_c2, \"ClaimBounty\");\n$RefreshReg$(_c3, \"Preview$observer\");\n$RefreshReg$(_c4, \"Preview\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Preview/index.tsx"],"names":["React","useCallback","useMemo","useState","BigNumber","observer","Button","Skeleton","errorNotification","successNotification","tokens","useRefineryUsdPrice","useWalletConnectorContext","getContract","useCallWithGasPrice","useMst","useSelectVaultData","Precisions","loadingDataFormatter","clogError","AutoBountyPopover","gasOptions","gas","ClaimBounty","pendingTx","setPendingTx","tokenUsdPrice","user","pools","poolsStore","connect","callWithGasPrice","tokenSymbol","rp1","symbol","updateViewByFetchingBlockchainData","fetchPoolsPublicDataAsync","fetchVaultPublicData","handleClaimBounty","contract","tx","methodName","options","status","error","fees","estimatedRefineryBountyReward","displayBountyReward","displayDecimals","shortToken","displayBountyRewardUsd","multipliedBy","fiat","isLoadingBountyData","callFee","width","address","toNumber","undefined","Preview"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iCAAvD;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,yBAAT,QAA0C,4BAA1C;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAAmBC,UAAnB,QAAqC,SAArC;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,SAASC,iBAAT,QAAkC,aAAlC;AAEA,OAAO,gBAAP;;AAEA,MAAMC,UAAU,GAAG;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAnB;AAEA,MAAMC,WAAqB,GAAGlB,QAAQ,SAAC,MAAM;AAAA;;AAC3C,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAAoBf,mBAAmB,EAA7C;AACA,QAAM;AAAEgB,IAAAA,IAAF;AAAQC,IAAAA,KAAK,EAAEC;AAAf,MAA8Bd,MAAM,EAA1C;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAclB,yBAAyB,EAA7C;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAuBjB,mBAAmB,EAAhD;AAEA,QAAMkB,WAAW,GAAGtB,MAAM,CAACuB,GAAP,CAAWC,MAA/B;AAEA,QAAMC,kCAAkC,GAAGlC,WAAW,CAAC,MAAM;AAC3D4B,IAAAA,UAAU,CAACO,yBAAX;AACAP,IAAAA,UAAU,CAACQ,oBAAX;AACD,GAHqD,EAGnD,CAACR,UAAD,CAHmD,CAAtD;;AAKA,QAAMS,iBAAiB,GAAG,YAAY;AACpCb,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAMc,QAAQ,GAAG1B,WAAW,CAAC,gBAAD,CAA5B;AACA,YAAM2B,EAAE,GAAG,MAAMT,gBAAgB,CAAC;AAChCQ,QAAAA,QADgC;AAEhCE,QAAAA,UAAU,EAAE,SAFoB;AAGhCC,QAAAA,OAAO,EAAErB;AAHuB,OAAD,CAAjC;;AAKA,UAAKmB,EAAD,CAAiBG,MAArB,EAA6B;AAC3BlC,QAAAA,mBAAmB,CACjB,mBADiB,EAEhB,GAAEuB,WAAY,uCAFE,CAAnB;AAIAG,QAAAA,kCAAkC;AACnC;AACF,KAdD,CAcE,OAAOS,KAAP,EAAc;AACdzB,MAAAA,SAAS,CAACyB,KAAD,CAAT;AACApC,MAAAA,iBAAiB,CACf,OADe,EAEf,oFAFe,CAAjB;AAID,KApBD,SAoBU;AACRiB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAzBD;;AA2BA,QAAM;AAAEoB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAA0C9B,kBAAkB,EAAlE;AAEA,QAAM+B,mBAAmB,GAAG7C,OAAO,CACjC,MACEgB,oBAAoB,CAAC4B,6BAAD,EAAgC;AAClDE,IAAAA,eAAe,EAAE/B,UAAU,CAACgC;AADsB,GAAhC,CAFW,EAKjC,CAACH,6BAAD,CALiC,CAAnC;AAQA,QAAMI,sBAAsB,GAAGhD,OAAO,CACpC,MACEgB,oBAAoB,CAClB,IAAId,SAAJ,CAAc0C,6BAA6B,IAAI,CAA/C,EAAkDK,YAAlD,CAA+DzB,aAA/D,CADkB,EAElB;AACEsB,IAAAA,eAAe,EAAE/B,UAAU,CAACmC;AAD9B,GAFkB,CAFc,EAQpC,CAACN,6BAAD,EAAgCpB,aAAhC,CARoC,CAAtC;AAWA,QAAM2B,mBAAmB,GAAGP,6BAA6B,KAAK,IAA9D;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,4CAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,wCAAf;AAAA,8BACE;AAAM,QAAA,SAAS,EAAC,gCAAhB;AAAA,4BAAuDd,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,iBAAD;AAAmB,QAAA,MAAM,EAAEA,WAA3B;AAAwC,QAAA,GAAG,EAAEa,IAAI,CAACS;AAAlD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAC,kDAAf;AAAA,8BACE;AAAA,mBACGD,mBAAmB,gBAClB,QAAC,QAAD,CAAU,KAAV;AAAgB,UAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAAvB;AAAsC,UAAA,IAAI,EAAC,OAA3C;AAAmD,UAAA,MAAM;AAAzD;AAAA;AAAA;AAAA;AAAA,gBADkB,gBAGlB;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,oBAA0BR;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAME;AAAK,UAAA,SAAS,EAAC,8CAAf;AAAA,0BACI,GADJ,EAEGM,mBAAmB,gBAClB,QAAC,QAAD,CAAU,KAAV;AAAgB,YAAA,KAAK,EAAE;AAAEE,cAAAA,KAAK,EAAE;AAAT,aAAvB;AAAsC,YAAA,IAAI,EAAC,OAA3C;AAAmD,YAAA,MAAM;AAAzD;AAAA;AAAA;AAAA;AAAA,kBADkB,GAGlBL,sBALJ,EAMK,GANL;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAiBG,CAACvB,IAAI,CAAC6B,OAAN,gBACC,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,2BAAlB;AAA8C,QAAA,OAAO,EAAE1B,OAAvD;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADD,gBAKC,QAAC,MAAD;AACE,QAAA,SAAS,EAAC,2BADZ;AAEE,QAAA,OAAO,EAAEN,SAFX;AAGE,QAAA,QAAQ,EAAE,EAACsB,6BAAD,aAACA,6BAAD,uBAACA,6BAA6B,CAAEW,QAA/B,EAAD,CAHZ;AAIE,QAAA,OAAO,EAAE,CAAAX,6BAA6B,SAA7B,IAAAA,6BAA6B,WAA7B,YAAAA,6BAA6B,CAAEW,QAA/B,MAA4CnB,iBAA5C,GAAgEoB,SAJ3E;AAAA,+BAME;AAAM,UAAA,SAAS,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,cAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CAxGqC;AAAA,UAEV/C,mBAFU,EAGAI,MAHA,EAIhBH,yBAJgB,EAKPE,mBALO,EAyCYE,kBAzCZ;AAAA,GAAtC;MAAMO,W;AA0GN,MAAMoC,OAAiB,GAAGtD,QAAQ,OAAC,MAAM;AACvC,sBACE;AAAK,IAAA,SAAS,EAAC,sCAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,iDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,oCAAf;AAAA,iEAC+B;AAAA;AAAA;AAAA;AAAA,gBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAbiC,CAAlC;MAAMsD,O;AAeN,eAAeA,OAAf","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\n\nimport { Button, Skeleton } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { tokens } from '@/config';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { IReceipt, Precisions } from '@/types';\nimport { loadingDataFormatter } from '@/utils/formatters';\nimport { clogError } from '@/utils/logger';\n\nimport { AutoBountyPopover } from '../Popovers';\n\nimport './Preview.scss';\n\nconst gasOptions = { gas: 300000 };\n\nconst ClaimBounty: React.FC = observer(() => {\n  const [pendingTx, setPendingTx] = useState(false);\n  const { tokenUsdPrice } = useRefineryUsdPrice();\n  const { user, pools: poolsStore } = useMst();\n  const { connect } = useWalletConnectorContext();\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const tokenSymbol = tokens.rp1.symbol;\n\n  const updateViewByFetchingBlockchainData = useCallback(() => {\n    poolsStore.fetchPoolsPublicDataAsync();\n    poolsStore.fetchVaultPublicData();\n  }, [poolsStore]);\n\n  const handleClaimBounty = async () => {\n    setPendingTx(true);\n    try {\n      const contract = getContract('REFINERY_VAULT');\n      const tx = await callWithGasPrice({\n        contract,\n        methodName: 'harvest',\n        options: gasOptions,\n      });\n      if ((tx as IReceipt).status) {\n        successNotification(\n          'Bounty collected!',\n          `${tokenSymbol} bounty has been sent to your wallet.`,\n        );\n        updateViewByFetchingBlockchainData();\n      }\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  const { fees, estimatedRefineryBountyReward } = useSelectVaultData();\n\n  const displayBountyReward = useMemo(\n    () =>\n      loadingDataFormatter(estimatedRefineryBountyReward, {\n        displayDecimals: Precisions.shortToken,\n      }),\n    [estimatedRefineryBountyReward],\n  );\n\n  const displayBountyRewardUsd = useMemo(\n    () =>\n      loadingDataFormatter(\n        new BigNumber(estimatedRefineryBountyReward || 0).multipliedBy(tokenUsdPrice),\n        {\n          displayDecimals: Precisions.fiat,\n        },\n      ),\n    [estimatedRefineryBountyReward, tokenUsdPrice],\n  );\n\n  const isLoadingBountyData = estimatedRefineryBountyReward === null;\n\n  return (\n    <div className=\"pools-preview__bounty box-white box-shadow\">\n      <div className=\"pools-preview__bounty-title box-f-ai-c\">\n        <span className=\"text-upper text-ssm text-black\">Auto {tokenSymbol} Bounty</span>\n        <AutoBountyPopover symbol={tokenSymbol} fee={fees.callFee} />\n      </div>\n      <div className=\"pools-preview__bounty-box box-f-ai-c box-f-jc-sb\">\n        <div>\n          {isLoadingBountyData ? (\n            <Skeleton.Input style={{ width: 60 }} size=\"small\" active />\n          ) : (\n            <div className=\"text-lg\">{displayBountyReward}</div>\n          )}\n          <div className=\"pools-preview__bounty-usd text-med text-gray\">\n            ~{' '}\n            {isLoadingBountyData ? (\n              <Skeleton.Input style={{ width: 40 }} size=\"small\" active />\n            ) : (\n              displayBountyRewardUsd\n            )}{' '}\n            USD\n          </div>\n        </div>\n        {!user.address ? (\n          <Button className=\"pools-preview__bounty-btn\" onClick={connect}>\n            <span className=\"text-white text-smd text-bold\">Connect Wallet</span>\n          </Button>\n        ) : (\n          <Button\n            className=\"pools-preview__bounty-btn\"\n            loading={pendingTx}\n            disabled={!estimatedRefineryBountyReward?.toNumber()}\n            onClick={estimatedRefineryBountyReward?.toNumber() ? handleClaimBounty : undefined}\n          >\n            <span className=\"text-white text-smd text-bold\">Claim</span>\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n});\n\nconst Preview: React.FC = observer(() => {\n  return (\n    <div className=\"pools-preview box-f-ai-c box-f-jc-sb\">\n      <div className=\"pools-preview__box\">\n        <h1 className=\"pools-preview__title h1-lg text-white text-bold\">Rocket Pools</h1>\n        <div className=\"pools-preview__subtitle text-white\">\n          Simply stake tokens to earn. <br />\n          High APR, low risk.\n        </div>\n      </div>\n      <ClaimBounty />\n    </div>\n  );\n});\n\nexport default Preview;\n"]},"metadata":{},"sourceType":"module"}