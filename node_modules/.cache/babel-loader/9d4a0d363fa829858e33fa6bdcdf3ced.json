{"ast":null,"code":"import { nonEnumerableProps, ObjProto } from './_setup.js';\nimport isFunction from './isFunction.js';\nimport has from './_has.js'; // Internal helper to create a simple lookup structure.\n// `collectNonEnumProps` used to depend on `_.contains`, but this led to\n// circular imports. `emulatedSet` is a one-off solution that only works for\n// arrays of strings.\n\nfunction emulatedSet(keys) {\n  var hash = {};\n\n  for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n\n  return {\n    contains: function (key) {\n      return hash[key];\n    },\n    push: function (key) {\n      hash[key] = true;\n      return keys.push(key);\n    }\n  };\n} // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n// be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n// needed.\n\n\nexport default function collectNonEnumProps(obj, keys) {\n  keys = emulatedSet(keys);\n  var nonEnumIdx = nonEnumerableProps.length;\n  var constructor = obj.constructor;\n  var proto = isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.\n\n  var prop = 'constructor';\n  if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n  while (nonEnumIdx--) {\n    prop = nonEnumerableProps[nonEnumIdx];\n\n    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n      keys.push(prop);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/underscore/modules/_collectNonEnumProps.js"],"names":["nonEnumerableProps","ObjProto","isFunction","has","emulatedSet","keys","hash","l","length","i","contains","key","push","collectNonEnumProps","obj","nonEnumIdx","constructor","proto","prototype","prop"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,QAA7B,QAA6C,aAA7C;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,GAAP,MAAgB,WAAhB,C,CAEA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAGF,IAAI,CAACG,MAAb,EAAqBC,CAAC,GAAG,CAA9B,EAAiCA,CAAC,GAAGF,CAArC,EAAwC,EAAEE,CAA1C,EAA6CH,IAAI,CAACD,IAAI,CAACI,CAAD,CAAL,CAAJ,GAAgB,IAAhB;;AAC7C,SAAO;AACLC,IAAAA,QAAQ,EAAE,UAASC,GAAT,EAAc;AAAE,aAAOL,IAAI,CAACK,GAAD,CAAX;AAAmB,KADxC;AAELC,IAAAA,IAAI,EAAE,UAASD,GAAT,EAAc;AAClBL,MAAAA,IAAI,CAACK,GAAD,CAAJ,GAAY,IAAZ;AACA,aAAON,IAAI,CAACO,IAAL,CAAUD,GAAV,CAAP;AACD;AALI,GAAP;AAOD,C,CAED;AACA;AACA;;;AACA,eAAe,SAASE,mBAAT,CAA6BC,GAA7B,EAAkCT,IAAlC,EAAwC;AACrDA,EAAAA,IAAI,GAAGD,WAAW,CAACC,IAAD,CAAlB;AACA,MAAIU,UAAU,GAAGf,kBAAkB,CAACQ,MAApC;AACA,MAAIQ,WAAW,GAAGF,GAAG,CAACE,WAAtB;AACA,MAAIC,KAAK,GAAGf,UAAU,CAACc,WAAD,CAAV,IAA2BA,WAAW,CAACE,SAAvC,IAAoDjB,QAAhE,CAJqD,CAMrD;;AACA,MAAIkB,IAAI,GAAG,aAAX;AACA,MAAIhB,GAAG,CAACW,GAAD,EAAMK,IAAN,CAAH,IAAkB,CAACd,IAAI,CAACK,QAAL,CAAcS,IAAd,CAAvB,EAA4Cd,IAAI,CAACO,IAAL,CAAUO,IAAV;;AAE5C,SAAOJ,UAAU,EAAjB,EAAqB;AACnBI,IAAAA,IAAI,GAAGnB,kBAAkB,CAACe,UAAD,CAAzB;;AACA,QAAII,IAAI,IAAIL,GAAR,IAAeA,GAAG,CAACK,IAAD,CAAH,KAAcF,KAAK,CAACE,IAAD,CAAlC,IAA4C,CAACd,IAAI,CAACK,QAAL,CAAcS,IAAd,CAAjD,EAAsE;AACpEd,MAAAA,IAAI,CAACO,IAAL,CAAUO,IAAV;AACD;AACF;AACF","sourcesContent":["import { nonEnumerableProps, ObjProto } from './_setup.js';\nimport isFunction from './isFunction.js';\nimport has from './_has.js';\n\n// Internal helper to create a simple lookup structure.\n// `collectNonEnumProps` used to depend on `_.contains`, but this led to\n// circular imports. `emulatedSet` is a one-off solution that only works for\n// arrays of strings.\nfunction emulatedSet(keys) {\n  var hash = {};\n  for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n  return {\n    contains: function(key) { return hash[key]; },\n    push: function(key) {\n      hash[key] = true;\n      return keys.push(key);\n    }\n  };\n}\n\n// Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n// be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n// needed.\nexport default function collectNonEnumProps(obj, keys) {\n  keys = emulatedSet(keys);\n  var nonEnumIdx = nonEnumerableProps.length;\n  var constructor = obj.constructor;\n  var proto = isFunction(constructor) && constructor.prototype || ObjProto;\n\n  // Constructor is a special case.\n  var prop = 'constructor';\n  if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n  while (nonEnumIdx--) {\n    prop = nonEnumerableProps[nonEnumIdx];\n    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n      keys.push(prop);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}