{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport moment from 'moment';\nimport { toBigNumber } from '@/utils';\nimport { getApy } from '@/utils/compoundApy';\nexport const durationFormatter = (timeLeft, separator = ' : ') => {\n  const duration = moment.duration(timeLeft);\n  const items = [`${duration.days()}d`, `${duration.hours()}h`, `${duration.minutes()}m`];\n  return items.join(separator);\n};\nexport const secondsToHoursFormatter = seconds => {\n  if (seconds === null || seconds === undefined) return '##h';\n  const ms = seconds * 1000;\n  const hours = moment.duration(ms).asHours();\n  return `${hours}h`;\n};\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000;\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0;\n/**\n *\n * @param pool\n * @param performanceFee as decimal (200 / 100 = 2 or 45 / 100 = 0.45)\n * @returns\n */\n\nexport const getAprData = (pool, performanceFee = 0) => {\n  const {\n    isAutoVault,\n    apr = 0\n  } = pool; //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n\n  const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY;\n\n  if (isAutoVault) {\n    const autoApr = getApy({\n      apr: Number(apr),\n      compoundFrequency: AUTO_VAULT_COMPOUND_FREQUENCY,\n      days: 365,\n      performanceFee\n    }) * 100;\n    return {\n      apr: autoApr,\n      autoCompoundFrequency\n    };\n  }\n\n  return {\n    apr,\n    autoCompoundFrequency\n  };\n};\nexport const getPoolBlockInfo = (pool, currentBlock) => {\n  const {\n    startBlock,\n    endBlock,\n    isFinished\n  } = pool;\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0);\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0);\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;\n  return {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay\n  };\n};\nexport const useNonAutoVaultEarnings = pool => {\n  _s();\n\n  const {\n    userData\n  } = pool;\n  const nonAutoVaultEarnings = useMemo(() => toBigNumber(userData === null || userData === void 0 ? void 0 : userData.pendingReward), [userData === null || userData === void 0 ? void 0 : userData.pendingReward]);\n  const nonAutoVaultEarningsAsString = useMemo(() => nonAutoVaultEarnings.toString(), [nonAutoVaultEarnings]);\n  return {\n    nonAutoVaultEarnings,\n    nonAutoVaultEarningsAsString\n  };\n};\n\n_s(useNonAutoVaultEarnings, \"8XmK1IkRDTFGEoykWTg9rQDenWs=\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/utils.ts"],"names":["useMemo","moment","toBigNumber","getApy","durationFormatter","timeLeft","separator","duration","items","days","hours","minutes","join","secondsToHoursFormatter","seconds","undefined","ms","asHours","AUTO_VAULT_COMPOUND_FREQUENCY","MANUAL_POOL_AUTO_COMPOUND_FREQUENCY","getAprData","pool","performanceFee","isAutoVault","apr","autoCompoundFrequency","autoApr","Number","compoundFrequency","getPoolBlockInfo","currentBlock","startBlock","endBlock","isFinished","shouldShowBlockCountdown","Boolean","blocksUntilStart","Math","max","blocksRemaining","hasPoolStarted","blocksToDisplay","useNonAutoVaultEarnings","userData","nonAutoVaultEarnings","pendingReward","nonAutoVaultEarningsAsString","toString"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport moment from 'moment';\n\nimport { Pool } from '@/types';\nimport { toBigNumber } from '@/utils';\nimport { getApy } from '@/utils/compoundApy';\n\nexport const durationFormatter = (timeLeft: number, separator = ' : '): string => {\n  const duration = moment.duration(timeLeft);\n  const items = [`${duration.days()}d`, `${duration.hours()}h`, `${duration.minutes()}m`];\n  return items.join(separator);\n};\n\nexport const secondsToHoursFormatter = (seconds: number | null | undefined): string => {\n  if (seconds === null || seconds === undefined) return '##h';\n  const ms = seconds * 1000;\n  const hours = moment.duration(ms).asHours();\n  return `${hours}h`;\n};\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000;\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0;\n\n/**\n *\n * @param pool\n * @param performanceFee as decimal (200 / 100 = 2 or 45 / 100 = 0.45)\n * @returns\n */\nexport const getAprData = (\n  pool: Pool,\n  performanceFee = 0,\n): {\n  apr: number;\n  autoCompoundFrequency: number;\n} => {\n  const { isAutoVault, apr = 0 } = pool;\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const autoCompoundFrequency = isAutoVault\n    ? AUTO_VAULT_COMPOUND_FREQUENCY\n    : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY;\n\n  if (isAutoVault) {\n    const autoApr =\n      getApy({\n        apr: Number(apr),\n        compoundFrequency: AUTO_VAULT_COMPOUND_FREQUENCY,\n        days: 365,\n        performanceFee,\n      }) * 100;\n    return { apr: autoApr, autoCompoundFrequency };\n  }\n  return { apr, autoCompoundFrequency };\n};\n\nexport const getPoolBlockInfo = (\n  pool: Pool,\n  currentBlock: number,\n): {\n  shouldShowBlockCountdown: boolean;\n  blocksUntilStart: number;\n  blocksRemaining: number;\n  hasPoolStarted: boolean;\n  blocksToDisplay: number;\n} => {\n  const { startBlock, endBlock, isFinished } = pool;\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\n  const blocksUntilStart = Math.max((startBlock as number) - currentBlock, 0);\n  const blocksRemaining = Math.max((endBlock as number) - currentBlock, 0);\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;\n  return {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay,\n  };\n};\n\nexport const useNonAutoVaultEarnings = (\n  pool: Pool,\n): {\n  nonAutoVaultEarnings: BigNumber;\n  nonAutoVaultEarningsAsString: string;\n} => {\n  const { userData } = pool;\n\n  const nonAutoVaultEarnings = useMemo(() => toBigNumber(userData?.pendingReward), [\n    userData?.pendingReward,\n  ]);\n  const nonAutoVaultEarningsAsString = useMemo(() => nonAutoVaultEarnings.toString(), [\n    nonAutoVaultEarnings,\n  ]);\n\n  return { nonAutoVaultEarnings, nonAutoVaultEarningsAsString };\n};\n"]},"metadata":{},"sourceType":"module"}