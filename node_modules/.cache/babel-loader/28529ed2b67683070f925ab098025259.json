{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Liquidity/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { observer } from 'mobx-react-lite';\nimport moment from 'moment';\nimport TradeWrapper from '../../../../HOC/TradeWrapper';\nimport { useMst } from '../../../../store';\nimport AddLiquidity from '../AddLiquidity';\nimport { ExchangeSettings, ImportPool, Receive, RecentTxs, RemoveLiquidity, YourLiquidity } from '..';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_USER_TRX = gql`\n  query User($address: String!) {\n    liquidityPositionSnapshots(\n      where: { user: $address, mintOrBurn: true }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      transaction {\n        mints {\n          amount0\n          amount1\n          transaction {\n            id\n          }\n        }\n        burns {\n          amount0\n          amount1\n          transaction {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\nconst AddLiquidityComp = TradeWrapper(AddLiquidity, 'quote');\n_c = AddLiquidityComp;\nconst Liquidity = observer(_c2 = _s(() => {\n  _s();\n\n  const {\n    user\n  } = useMst();\n  const [getUserTrx, {\n    error,\n    data: userTrx\n  }] = useLazyQuery(GET_USER_TRX, {\n    pollInterval: 60000\n  });\n  const [trx, setTrx] = React.useState(undefined);\n  const [settings, setSettings] = React.useState({\n    slippage: {\n      type: 'btn',\n      value: 0.1\n    },\n    txDeadline: 20,\n    txDeadlineUtc: moment.utc().add(20, 'm').unix()\n  });\n  console.log(settings.txDeadlineUtc, 'deadline');\n\n  const handleSaveSettings = settingsObj => {\n    setSettings(settingsObj);\n  };\n\n  React.useEffect(() => {\n    if (user.address) {\n      getUserTrx({\n        variables: {\n          address: user.address\n        }\n      });\n    }\n  }, [user.address, getUserTrx]); // React.useEffect(() => {\n  //   return () => {\n  //     console.log('clean');\n  //   };\n  // }, []);\n\n  React.useEffect(() => {\n    if (!error && userTrx && userTrx.liquidityPositionSnapshots) {\n      const trxData = [];\n      userTrx.liquidityPositionSnapshots.forEach(pairObj => {\n        const dataItem = {\n          type: '',\n          address: '',\n          from: {\n            symbol: '',\n            value: 0\n          },\n          to: {\n            symbol: '',\n            value: 0\n          }\n        };\n        dataItem.from.symbol = pairObj.pair.token0.symbol;\n        dataItem.to.symbol = pairObj.pair.token1.symbol;\n\n        if (pairObj.transaction.burns.length) {\n          pairObj.transaction.burns.forEach(burnTrx => {\n            dataItem.type = 'Burn';\n            dataItem.from.value = burnTrx.amount0;\n            dataItem.to.value = burnTrx.amount1;\n            dataItem.address = burnTrx.transaction.id;\n            trxData.push(dataItem);\n          });\n        }\n\n        if (pairObj.transaction.mints.length) {\n          pairObj.transaction.mints.forEach(mintTx => {\n            dataItem.type = 'Add Liquidity';\n            dataItem.from.value = mintTx.amount0;\n            dataItem.to.value = mintTx.amount1;\n            dataItem.address = mintTx.transaction.id;\n            trxData.push(dataItem);\n          });\n        }\n      });\n      setTrx(trxData);\n    }\n  }, [userTrx, error]);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity\",\n      component: YourLiquidity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity/find\",\n      component: ImportPool\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity/add\",\n      render: () => /*#__PURE__*/_jsxDEV(AddLiquidityComp, {\n        settings: settings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity/add/:currencyIdA/:currencyIdB\",\n      render: () => /*#__PURE__*/_jsxDEV(AddLiquidityComp, {\n        settings: settings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity/remove\",\n      component: RemoveLiquidity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity/receive\",\n      component: Receive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity/settings\",\n      render: () => /*#__PURE__*/_jsxDEV(ExchangeSettings, {\n        savedSettings: settings,\n        handleSave: handleSaveSettings,\n        isSlippage: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/trade/liquidity/history\",\n      render: () => /*#__PURE__*/_jsxDEV(RecentTxs, {\n        items: trx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 66\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}, \"bnrAchuKfOvLKK+ZINnmYuCayyQ=\", false, function () {\n  return [useMst, useLazyQuery];\n}));\n_c3 = Liquidity;\nexport default Liquidity;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AddLiquidityComp\");\n$RefreshReg$(_c2, \"Liquidity$observer\");\n$RefreshReg$(_c3, \"Liquidity\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Liquidity/index.tsx"],"names":["React","Route","Switch","gql","useLazyQuery","observer","moment","TradeWrapper","useMst","AddLiquidity","ExchangeSettings","ImportPool","Receive","RecentTxs","RemoveLiquidity","YourLiquidity","GET_USER_TRX","AddLiquidityComp","Liquidity","user","getUserTrx","error","data","userTrx","pollInterval","trx","setTrx","useState","undefined","settings","setSettings","slippage","type","value","txDeadline","txDeadlineUtc","utc","add","unix","console","log","handleSaveSettings","settingsObj","useEffect","address","variables","liquidityPositionSnapshots","trxData","forEach","pairObj","dataItem","from","symbol","to","pair","token0","token1","transaction","burns","length","burnTrx","amount0","amount1","id","push","mints","mintTx"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { observer } from 'mobx-react-lite';\nimport moment from 'moment';\n\nimport TradeWrapper from '../../../../HOC/TradeWrapper';\nimport { useMst } from '../../../../store';\nimport { IRecentTx, ISettings } from '../../../../types';\nimport AddLiquidity from '../AddLiquidity';\nimport {\n  ExchangeSettings,\n  ImportPool,\n  Receive,\n  RecentTxs,\n  RemoveLiquidity,\n  YourLiquidity,\n} from '..';\n\nconst GET_USER_TRX = gql`\n  query User($address: String!) {\n    liquidityPositionSnapshots(\n      where: { user: $address, mintOrBurn: true }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      transaction {\n        mints {\n          amount0\n          amount1\n          transaction {\n            id\n          }\n        }\n        burns {\n          amount0\n          amount1\n          transaction {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst AddLiquidityComp = TradeWrapper(AddLiquidity, 'quote');\n\nconst Liquidity: React.FC = observer(() => {\n  const { user } = useMst();\n\n  const [getUserTrx, { error, data: userTrx }] = useLazyQuery(GET_USER_TRX, {\n    pollInterval: 60000,\n  });\n\n  const [trx, setTrx] = React.useState<IRecentTx[] | undefined>(undefined);\n\n  const [settings, setSettings] = React.useState<ISettings>({\n    slippage: {\n      type: 'btn',\n      value: 0.1,\n    },\n    txDeadline: 20,\n    txDeadlineUtc: moment.utc().add(20, 'm').unix(),\n  });\n  console.log(settings.txDeadlineUtc, 'deadline');\n\n  const handleSaveSettings = (settingsObj: ISettings): void => {\n    setSettings(settingsObj);\n  };\n\n  React.useEffect(() => {\n    if (user.address) {\n      getUserTrx({\n        variables: {\n          address: user.address,\n        },\n      });\n    }\n  }, [user.address, getUserTrx]);\n\n  // React.useEffect(() => {\n  //   return () => {\n  //     console.log('clean');\n  //   };\n  // }, []);\n\n  React.useEffect(() => {\n    if (!error && userTrx && userTrx.liquidityPositionSnapshots) {\n      const trxData: IRecentTx[] = [];\n\n      userTrx.liquidityPositionSnapshots.forEach((pairObj: any) => {\n        const dataItem: IRecentTx = {\n          type: '',\n          address: '',\n          from: {\n            symbol: '',\n            value: 0,\n          },\n          to: {\n            symbol: '',\n            value: 0,\n          },\n        };\n\n        dataItem.from.symbol = pairObj.pair.token0.symbol;\n        dataItem.to.symbol = pairObj.pair.token1.symbol;\n\n        if (pairObj.transaction.burns.length) {\n          pairObj.transaction.burns.forEach((burnTrx: any) => {\n            dataItem.type = 'Burn';\n            dataItem.from.value = burnTrx.amount0;\n            dataItem.to.value = burnTrx.amount1;\n            dataItem.address = burnTrx.transaction.id;\n\n            trxData.push(dataItem);\n          });\n        }\n\n        if (pairObj.transaction.mints.length) {\n          pairObj.transaction.mints.forEach((mintTx: any) => {\n            dataItem.type = 'Add Liquidity';\n            dataItem.from.value = mintTx.amount0;\n            dataItem.to.value = mintTx.amount1;\n            dataItem.address = mintTx.transaction.id;\n\n            trxData.push(dataItem);\n          });\n        }\n      });\n\n      setTrx(trxData);\n    }\n  }, [userTrx, error]);\n\n  return (\n    <Switch>\n      <Route exact path=\"/trade/liquidity\" component={YourLiquidity} />\n      <Route exact path=\"/trade/liquidity/find\" component={ImportPool} />\n      <Route\n        exact\n        path=\"/trade/liquidity/add\"\n        render={() => <AddLiquidityComp settings={settings} />}\n      />\n      <Route\n        exact\n        path=\"/trade/liquidity/add/:currencyIdA/:currencyIdB\"\n        render={() => <AddLiquidityComp settings={settings} />}\n      />\n      <Route exact path=\"/trade/liquidity/remove\" component={RemoveLiquidity} />\n      <Route exact path=\"/trade/liquidity/receive\" component={Receive} />\n      <Route\n        exact\n        path=\"/trade/liquidity/settings\"\n        render={() => (\n          <ExchangeSettings\n            savedSettings={settings}\n            handleSave={handleSaveSettings}\n            isSlippage={false}\n          />\n        )}\n      />\n      <Route exact path=\"/trade/liquidity/history\" render={() => <RecentTxs items={trx} />} />\n    </Switch>\n  );\n});\n\nexport default Liquidity;\n"]},"metadata":{},"sourceType":"module"}