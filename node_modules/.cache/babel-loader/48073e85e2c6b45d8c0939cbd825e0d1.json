{"ast":null,"code":"import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { caughtSchedule } from '../util/caughtSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator;\n    subscriber.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      caughtSchedule(subscriber, scheduler, function () {\n        var _a = iterator.next(),\n            value = _a.value,\n            done = _a.done;\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      });\n    }));\n    return function () {\n      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    };\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AACA,SAAS,UAAT,QAA2B,oBAA3B;AACA,SAAS,cAAT,QAA+B,wBAA/B;AAOA,OAAM,SAAU,gBAAV,CAA8B,KAA9B,EAAkD,SAAlD,EAA0E;AAC9E,SAAO,IAAI,UAAJ,CAAkB,UAAC,UAAD,EAAW;AAClC,QAAI,QAAJ;AAKA,IAAA,UAAU,CAAC,GAAX,CACE,SAAS,CAAC,QAAV,CAAmB,YAAA;AAEjB,MAAA,QAAQ,GAAI,KAAa,CAAC,eAAD,CAAb,EAAZ;AAGA,MAAA,cAAc,CAAC,UAAD,EAAa,SAAb,EAAwB,YAAA;AAE9B,YAAA,EAAA,GAAkB,QAAQ,CAAC,IAAT,EAAlB;AAAA,YAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,YAAS,IAAI,GAAA,EAAA,CAAA,IAAb;;AACN,YAAI,IAAJ,EAAU;AAKR,UAAA,UAAU,CAAC,QAAX;AACD,SAND,MAMO;AAEL,UAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AAGA,eAAK,QAAL;AACD;AACF,OAhBa,CAAd;AAiBD,KAtBD,CADF;AA8BA,WAAO,YAAA;AAAM,aAAA,UAAU,CAAC,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,MAAX,CAAV,IAAgC,QAAQ,CAAxC,MAAgC,EAAhC;AAAiD,KAA9D;AACD,GArCM,CAAP;AAsCD","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { caughtSchedule } from '../util/caughtSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var iterator;\n        subscriber.add(scheduler.schedule(function () {\n            iterator = input[Symbol_iterator]();\n            caughtSchedule(subscriber, scheduler, function () {\n                var _a = iterator.next(), value = _a.value, done = _a.done;\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            });\n        }));\n        return function () { return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map"]},"metadata":{},"sourceType":"module"}