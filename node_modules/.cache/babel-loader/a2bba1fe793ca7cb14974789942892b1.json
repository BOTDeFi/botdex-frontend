{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix');\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-core-commonmark/lib/blank-line.js"],"names":["factorySpace","markdownLineEnding","blankLine","tokenize","tokenizeBlankLine","partial","effects","ok","nok","afterWhitespace","code"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AAEA;;AACA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,QAAQ,EAAEC,iBADa;AAEvBC,EAAAA,OAAO,EAAE;AAFc,CAAlB;AAIP;;AAEA,SAASD,iBAAT,CAA2BE,OAA3B,EAAoCC,EAApC,EAAwCC,GAAxC,EAA6C;AAC3C,SAAOR,YAAY,CAACM,OAAD,EAAUG,eAAV,EAA2B,YAA3B,CAAnB;AACA;;AAEA,WAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,WAAOA,IAAI,KAAK,IAAT,IAAiBT,kBAAkB,CAACS,IAAD,CAAnC,GAA4CH,EAAE,CAACG,IAAD,CAA9C,GAAuDF,GAAG,CAACE,IAAD,CAAjE;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}