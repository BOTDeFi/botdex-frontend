{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/MetamaskConnect/index.tsx\",\n    _class,\n    _temp,\n    _s = $RefreshSig$();\n\nimport React, { createContext, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { observer } from 'mobx-react';\nimport { contracts } from '@/config';\nimport MetamaskService from '@/services/web3';\nimport rootStore from '@/store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const metamaskService = new MetamaskService({\n  testnet: 'bsct' // isProduction: process.env.NODE_ENV === 'production',\n\n});\nexport const walletConnectorContext = /*#__PURE__*/createContext({\n  metamaskService,\n  connect: () => {},\n  disconnect: () => {}\n});\n\nlet Connector = observer(_class = (_temp = class Connector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.connect = async () => {\n      try {\n        const {\n          address\n        } = await this.state.provider.connect();\n        rootStore.user.setAddress(address);\n        localStorage.refFinanceMetamask = true;\n      } catch (err) {\n        rootStore.modals.metamaskErr.setErr(err.message);\n        this.disconnect();\n      }\n    };\n\n    this.disconnect = () => {\n      rootStore.user.disconnect();\n    };\n\n    this.state = {\n      provider: metamaskService\n    };\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n  }\n\n  componentDidMount() {\n    const self = this; // eslint-disable-next-line prefer-destructuring\n\n    const refFinanceMetamask = localStorage.refFinanceMetamask;\n    const hasConnectedWallet = refFinanceMetamask ? JSON.parse(refFinanceMetamask) : false;\n\n    if (hasConnectedWallet) {\n      this.connect();\n    }\n\n    this.state.provider.createContract('FACTORY', contracts.FACTORY.ADDRESS, contracts.FACTORY.ABI);\n    this.state.provider.createContract('ROUTER', contracts.ROUTER.ADDRESS, contracts.ROUTER.ABI);\n    this.state.provider.chainChangedObs.subscribe({\n      next(err) {\n        rootStore.modals.metamaskErr.setErr(err);\n      }\n\n    });\n    this.state.provider.accountChangedObs.subscribe({\n      next() {\n        self.disconnect();\n      }\n\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(walletConnectorContext.Provider, {\n      value: {\n        metamaskService: this.state.provider,\n        connect: this.connect,\n        disconnect: this.disconnect\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n\n}, _temp)) || _class;\n\nexport default _c = withRouter(Connector);\nexport function useWalletConnectorContext() {\n  _s();\n\n  return useContext(walletConnectorContext);\n}\n\n_s(useWalletConnectorContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/MetamaskConnect/index.tsx"],"names":["React","createContext","useContext","withRouter","observer","contracts","MetamaskService","rootStore","metamaskService","testnet","walletConnectorContext","connect","disconnect","Connector","Component","constructor","props","address","state","provider","user","setAddress","localStorage","refFinanceMetamask","err","modals","metamaskErr","setErr","message","bind","componentDidMount","self","hasConnectedWallet","JSON","parse","createContract","FACTORY","ADDRESS","ABI","ROUTER","chainChangedObs","subscribe","next","accountChangedObs","render","children","useWalletConnectorContext"],"mappings":"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","sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { observer } from 'mobx-react';\n\nimport { contracts } from '@/config';\nimport MetamaskService from '@/services/web3';\nimport rootStore from '@/store';\n\nexport interface IwalletConnectorContext {\n  metamaskService: MetamaskService;\n  connect: () => void;\n  disconnect: () => void;\n}\n\nexport const metamaskService = new MetamaskService({\n  testnet: 'bsct',\n  // isProduction: process.env.NODE_ENV === 'production',\n});\n\nexport const walletConnectorContext = createContext<IwalletConnectorContext>({\n  metamaskService,\n  connect: (): void => {},\n  disconnect: (): void => {},\n});\n\n@observer\nclass Connector extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      provider: metamaskService,\n    };\n\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n  }\n\n  componentDidMount() {\n    const self = this;\n\n    // eslint-disable-next-line prefer-destructuring\n    const refFinanceMetamask: undefined | 'true' | 'false' = localStorage.refFinanceMetamask;\n    const hasConnectedWallet = refFinanceMetamask\n      ? (JSON.parse(refFinanceMetamask) as boolean)\n      : false;\n\n    if (hasConnectedWallet) {\n      this.connect();\n    }\n\n    this.state.provider.createContract('FACTORY', contracts.FACTORY.ADDRESS, contracts.FACTORY.ABI);\n    this.state.provider.createContract('ROUTER', contracts.ROUTER.ADDRESS, contracts.ROUTER.ABI);\n\n    this.state.provider.chainChangedObs.subscribe({\n      next(err: string) {\n        rootStore.modals.metamaskErr.setErr(err);\n      },\n    });\n\n    this.state.provider.accountChangedObs.subscribe({\n      next() {\n        self.disconnect();\n      },\n    });\n  }\n\n  connect = async () => {\n    try {\n      const { address } = await this.state.provider.connect();\n\n      rootStore.user.setAddress(address);\n      localStorage.refFinanceMetamask = true;\n    } catch (err: any) {\n      rootStore.modals.metamaskErr.setErr(err.message);\n      this.disconnect();\n    }\n  };\n\n  disconnect = () => {\n    rootStore.user.disconnect();\n  };\n\n  render() {\n    return (\n      <walletConnectorContext.Provider\n        value={{\n          metamaskService: this.state.provider,\n          connect: this.connect,\n          disconnect: this.disconnect,\n        }}\n      >\n        {this.props.children}\n      </walletConnectorContext.Provider>\n    );\n  }\n}\n\nexport default withRouter(Connector);\n\nexport function useWalletConnectorContext() {\n  return useContext(walletConnectorContext);\n}\n"]},"metadata":{},"sourceType":"module"}