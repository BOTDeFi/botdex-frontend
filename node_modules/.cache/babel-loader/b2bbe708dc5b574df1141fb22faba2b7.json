{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { SNAPSHOT_SPACE } from '@/config/constants/dao';\nimport { useSnapshotService } from '@/services/api/snapshot.org';\nimport { useMst } from '@/store';\nimport { clogError } from '@/utils/logger'; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport const useCastVote = ({\n  onSuccessTx,\n  onStartTx,\n  onEndTx\n}) => {\n  _s();\n\n  const {\n    user\n  } = useMst();\n  const {\n    snapshotClient,\n    provider\n  } = useSnapshotService();\n  const vote = useCallback(async (proposalId, choices, chosenOption) => {\n    if (!proposalId) {\n      return errorNotification('Error', 'Invalid IPFS hash or ID!');\n    } // votingPower: '5',\n    // strategies: [strategies.erc20WithBalance],\n\n\n    const msg = {\n      choice: chosenOption,\n      proposal: proposalId // metadata: {},\n\n    };\n    onStartTx();\n\n    try {\n      await snapshotClient.vote(provider, user.address, SNAPSHOT_SPACE, msg); // chosenOption starts from 1, 2, 3... (not from zero)\n\n      onSuccessTx();\n      successNotification(`Success', 'Successfully voted for ${choices[chosenOption - 1]}!`);\n    } catch (error) {\n      clogError(error);\n      const errorMessage = (error === null || error === void 0 ? void 0 : error.error_description) ? error.error_description : error.message;\n      errorNotification('Error', errorMessage);\n    } finally {\n      onEndTx();\n    } // just to prevent eslint-error\n\n\n    return null;\n  }, [snapshotClient, provider, user.address, onSuccessTx, onStartTx, onEndTx]);\n  return {\n    vote\n  };\n};\n\n_s(useCastVote, \"6yQe+aymCWf9ZKWIaarXnHJoCF4=\", false, function () {\n  return [useMst, useSnapshotService];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useCastVote.ts"],"names":["useCallback","errorNotification","successNotification","SNAPSHOT_SPACE","useSnapshotService","useMst","clogError","useCastVote","onSuccessTx","onStartTx","onEndTx","user","snapshotClient","provider","vote","proposalId","choices","chosenOption","msg","choice","proposal","address","error","errorMessage","error_description","message"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iCAAvD;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,SAAT,QAA0B,gBAA1B,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,WAD0B;AAE1BC,EAAAA,SAF0B;AAG1BC,EAAAA;AAH0B,CAAD,KAQrB;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAWN,MAAM,EAAvB;AACA,QAAM;AAAEO,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAA+BT,kBAAkB,EAAvD;AAEA,QAAMU,IAAI,GAAGd,WAAW,CACtB,OAAOe,UAAP,EAA2BC,OAA3B,EAA8CC,YAA9C,KAAuE;AACrE,QAAI,CAACF,UAAL,EAAiB;AACf,aAAOd,iBAAiB,CAAC,OAAD,EAAU,0BAAV,CAAxB;AACD,KAHoE,CAKrE;AACA;;;AAEA,UAAMiB,GAAG,GAAG;AACVC,MAAAA,MAAM,EAAEF,YADE;AAEVG,MAAAA,QAAQ,EAAEL,UAFA,CAGV;;AAHU,KAAZ;AAMAN,IAAAA,SAAS;;AAET,QAAI;AACF,YAAMG,cAAc,CAACE,IAAf,CAAoBD,QAApB,EAA8BF,IAAI,CAACU,OAAnC,EAA4ClB,cAA5C,EAA4De,GAA5D,CAAN,CADE,CAEF;;AACAV,MAAAA,WAAW;AACXN,MAAAA,mBAAmB,CAAE,qCAAoCc,OAAO,CAACC,YAAY,GAAG,CAAhB,CAAmB,GAAhE,CAAnB;AACD,KALD,CAKE,OAAOK,KAAP,EAAmB;AACnBhB,MAAAA,SAAS,CAACgB,KAAD,CAAT;AACA,YAAMC,YAAY,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,iBAAP,IAA2BF,KAAK,CAACE,iBAAjC,GAAqDF,KAAK,CAACG,OAAhF;AACAxB,MAAAA,iBAAiB,CAAC,OAAD,EAAUsB,YAAV,CAAjB;AACD,KATD,SASU;AACRb,MAAAA,OAAO;AACR,KA3BoE,CA6BrE;;;AACA,WAAO,IAAP;AACD,GAhCqB,EAiCtB,CAACE,cAAD,EAAiBC,QAAjB,EAA2BF,IAAI,CAACU,OAAhC,EAAyCb,WAAzC,EAAsDC,SAAtD,EAAiEC,OAAjE,CAjCsB,CAAxB;AAoCA,SAAO;AAAEI,IAAAA;AAAF,GAAP;AACD,CAjDM;;GAAMP,W;UASMF,M,EACoBD,kB","sourcesContent":["import { useCallback } from 'react';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { SNAPSHOT_SPACE } from '@/config/constants/dao';\nimport { useSnapshotService } from '@/services/api/snapshot.org';\nimport { useMst } from '@/store';\nimport { clogError } from '@/utils/logger';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useCastVote = ({\n  onSuccessTx,\n  onStartTx,\n  onEndTx,\n}: {\n  onSuccessTx: () => void;\n  onStartTx: () => void;\n  onEndTx: () => void;\n}) => {\n  const { user } = useMst();\n  const { snapshotClient, provider } = useSnapshotService();\n\n  const vote = useCallback(\n    async (proposalId: string, choices: string[], chosenOption: number) => {\n      if (!proposalId) {\n        return errorNotification('Error', 'Invalid IPFS hash or ID!');\n      }\n\n      // votingPower: '5',\n      // strategies: [strategies.erc20WithBalance],\n\n      const msg = {\n        choice: chosenOption,\n        proposal: proposalId,\n        // metadata: {},\n      };\n\n      onStartTx();\n\n      try {\n        await snapshotClient.vote(provider, user.address, SNAPSHOT_SPACE, msg);\n        // chosenOption starts from 1, 2, 3... (not from zero)\n        onSuccessTx();\n        successNotification(`Success', 'Successfully voted for ${choices[chosenOption - 1]}!`);\n      } catch (error: any) {\n        clogError(error);\n        const errorMessage = error?.error_description ? error.error_description : error.message;\n        errorNotification('Error', errorMessage);\n      } finally {\n        onEndTx();\n      }\n\n      // just to prevent eslint-error\n      return null;\n    },\n    [snapshotClient, provider, user.address, onSuccessTx, onStartTx, onEndTx],\n  );\n\n  return { vote };\n};\n"]},"metadata":{},"sourceType":"module"}