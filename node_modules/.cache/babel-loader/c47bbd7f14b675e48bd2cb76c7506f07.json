{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsActionsSection/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { Button, Skeleton } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport useApproveFarm from '@/hooks/farms/useApprove';\nimport { useLpTokenPrice } from '@/hooks/farms/useFarmsPrices';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContractData } from '@/services/web3/contractHelpers';\nimport { useMst } from '@/store';\nimport { useFarmUserData } from '@/store/farms/hooks';\nimport { Precisions } from '@/types';\nimport { getBalanceAmount } from '@/utils/formatters';\nimport { clog, clogError } from '@/utils/logger';\nimport { getAddLiquidityUrl } from '@/utils/urlConstructors';\nimport FarmsStakeUnstakeButtons from '../../FarmsStakeUnstakeButtons';\nimport DetailsSectionTitle from '../DetailsSectionTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst useErc20 = address => {\n  _s();\n\n  const {\n    metamaskService\n  } = useWalletConnectorContext();\n  const [, erc20Abi] = getContractData('ERC20');\n  return metamaskService.getContract(address, erc20Abi);\n};\n\n_s(useErc20, \"2LlBmNjF4vgIIf+cijAi4IBxyUg=\", false, function () {\n  return [useWalletConnectorContext];\n});\n\nconst CURRENCY_CONVERT_TO = 'USD';\n\nconst DetailsActionsSection = ({\n  className,\n  farm\n}) => {\n  _s2();\n\n  const {\n    user,\n    farms: farmsStore\n  } = useMst();\n  const hasConnectedWallet = Boolean(user.address);\n  const {\n    connect\n  } = useWalletConnectorContext();\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance\n  } = useFarmUserData(farm);\n  const needsApproval = !allowance.gt(0);\n  const {\n    userDataLoaded\n  } = farmsStore;\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    pid,\n    lpAddresses,\n    lpSymbol,\n    quoteToken,\n    token\n  } = farm;\n  const lpAddress = getAddress(lpAddresses);\n  const lpContract = useErc20(lpAddress);\n  const {\n    onApprove\n  } = useApproveFarm(lpContract);\n  const handleApprove = useCallback(async () => {\n    setRequestedApproval(true);\n\n    try {\n      const txStatus = await onApprove();\n      farmsStore.fetchFarmUserDataAsync(user.address, [pid]);\n\n      if (txStatus) {\n        successNotification('Contract Enabled!', `You can now stake in the ${lpSymbol} farm!`);\n      } else {\n        clog(txStatus);\n        errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n      }\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      setRequestedApproval(false);\n    }\n  }, [onApprove, pid, lpSymbol, farmsStore, user.address]);\n  const {\n    modals\n  } = useMst();\n  const lpPrice = useLpTokenPrice(lpSymbol);\n  const handleStake = useCallback(() => {\n    modals.farmsStakeUnstake.open({\n      isStaking: true,\n      maxValue: tokenBalance.toString(),\n      lpPrice: lpPrice.toString(),\n      tokenSymbol: lpSymbol,\n      farmId: pid,\n      addLiquidityUrl: getAddLiquidityUrl(quoteToken, token)\n    });\n  }, [lpPrice, lpSymbol, modals.farmsStakeUnstake, pid, tokenBalance, quoteToken, token]);\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = new BigNumber(getBalanceAmount(stakedBalance)); // if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n    //   return stakedBalanceBigNumber.toFixed(10);\n    // }\n    // if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n    //   return getFullDisplayBalance({ balance: stakedBalance });\n    // }\n\n    return stakedBalanceBigNumber.toFixed(Precisions.shortToken);\n  }, [stakedBalance]);\n  const displayBalanceAsUsd = useCallback(() => {\n    return getBalanceAmount(stakedBalance.times(lpPrice)).toFixed(Precisions.fiat);\n  }, [lpPrice, stakedBalance]);\n  const renderActions = useMemo(() => {\n    // Initial Workflow State\n    if (!hasConnectedWallet) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DetailsSectionTitle, {\n          title: \"Start Farming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"lg\",\n          onClick: connect,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-smd text-white text-bold\",\n            children: \"Unlock Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } // Has Connected Wallet & Approved in Farm\n\n\n    if (!needsApproval) {\n      // Staked in Farm\n      if (stakedBalance.gt(0)) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DetailsSectionTitle, {\n            title: `${lpSymbol} Staked`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box-f box-f-jc-sb box-f-ai-e\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"farms-table-row__details-staked-values-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"farms-table-row__details-staked-value text-blue-d text-smd\",\n                children: displayBalance()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-gray text-smd\",\n                children: [\"~\", displayBalanceAsUsd(), \" \", CURRENCY_CONVERT_TO]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FarmsStakeUnstakeButtons, {\n              farm: farm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      } // Not Staked in Farm\n\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DetailsSectionTitle, {\n          title: `Stake ${lpSymbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"lg\",\n          onClick: handleStake,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-smd text-white text-bold\",\n            children: \"Stake LP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (!userDataLoaded) {\n      return /*#__PURE__*/_jsxDEV(Skeleton.Input, {\n        style: {\n          width: 100\n        },\n        size: \"large\",\n        active: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 14\n      }, this);\n    } // Just Connected Wallet\n\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DetailsSectionTitle, {\n        title: \"Enable Farm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        size: \"lg\",\n        disabled: requestedApproval,\n        onClick: handleApprove,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-smd text-white text-bold\",\n          children: \"Enable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }, [hasConnectedWallet, connect, needsApproval, handleApprove, requestedApproval, stakedBalance, lpSymbol, displayBalance, displayBalanceAsUsd, handleStake, farm, userDataLoaded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames(className, 'farms-table-row__details-box'),\n    children: renderActions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(DetailsActionsSection, \"ZXDz8t3TZp22vXKoRYY9W7IjWUk=\", false, function () {\n  return [useMst, useWalletConnectorContext, useFarmUserData, useErc20, useApproveFarm, useMst, useLpTokenPrice];\n});\n\n_c = DetailsActionsSection;\nexport default DetailsActionsSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"DetailsActionsSection\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsActionsSection/index.tsx"],"names":["React","useCallback","useMemo","useState","BigNumber","classNames","Button","Skeleton","errorNotification","successNotification","useApproveFarm","useLpTokenPrice","useWalletConnectorContext","getAddress","getContractData","useMst","useFarmUserData","Precisions","getBalanceAmount","clog","clogError","getAddLiquidityUrl","FarmsStakeUnstakeButtons","DetailsSectionTitle","useErc20","address","metamaskService","erc20Abi","getContract","CURRENCY_CONVERT_TO","DetailsActionsSection","className","farm","user","farms","farmsStore","hasConnectedWallet","Boolean","connect","allowance","tokenBalance","stakedBalance","needsApproval","gt","userDataLoaded","requestedApproval","setRequestedApproval","pid","lpAddresses","lpSymbol","quoteToken","token","lpAddress","lpContract","onApprove","handleApprove","txStatus","fetchFarmUserDataAsync","error","modals","lpPrice","handleStake","farmsStakeUnstake","open","isStaking","maxValue","toString","tokenSymbol","farmId","addLiquidityUrl","displayBalance","stakedBalanceBigNumber","toFixed","shortToken","displayBalanceAsUsd","times","fiat","renderActions","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\n\nimport { Button, Skeleton } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport useApproveFarm from '@/hooks/farms/useApprove';\nimport { useLpTokenPrice } from '@/hooks/farms/useFarmsPrices';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContractData } from '@/services/web3/contractHelpers';\nimport { useMst } from '@/store';\nimport { useFarmUserData } from '@/store/farms/hooks';\nimport { FarmWithStakedValue, Precisions } from '@/types';\nimport { getBalanceAmount } from '@/utils/formatters';\nimport { clog, clogError } from '@/utils/logger';\nimport { getAddLiquidityUrl } from '@/utils/urlConstructors';\n\nimport FarmsStakeUnstakeButtons from '../../FarmsStakeUnstakeButtons';\nimport DetailsSectionTitle from '../DetailsSectionTitle';\n\ninterface IDetailsActionsSectionProps {\n  className?: string;\n  farm: FarmWithStakedValue;\n}\n\nconst useErc20 = (address: string) => {\n  const { metamaskService } = useWalletConnectorContext();\n  const [, erc20Abi] = getContractData('ERC20');\n  return metamaskService.getContract(address, erc20Abi);\n};\n\nconst CURRENCY_CONVERT_TO = 'USD';\n\nconst DetailsActionsSection: React.FC<IDetailsActionsSectionProps> = ({ className, farm }) => {\n  const { user, farms: farmsStore } = useMst();\n  const hasConnectedWallet = Boolean(user.address);\n  const { connect } = useWalletConnectorContext();\n\n  const { allowance, tokenBalance, stakedBalance } = useFarmUserData(farm);\n  const needsApproval = !allowance.gt(0);\n  const { userDataLoaded } = farmsStore;\n  const [requestedApproval, setRequestedApproval] = useState(false);\n\n  const { pid, lpAddresses, lpSymbol, quoteToken, token } = farm;\n  const lpAddress = getAddress(lpAddresses);\n  const lpContract = useErc20(lpAddress);\n  const { onApprove } = useApproveFarm(lpContract);\n\n  const handleApprove = useCallback(async () => {\n    setRequestedApproval(true);\n    try {\n      const txStatus = await onApprove();\n      farmsStore.fetchFarmUserDataAsync(user.address, [pid]);\n\n      if (txStatus) {\n        successNotification('Contract Enabled!', `You can now stake in the ${lpSymbol} farm!`);\n      } else {\n        clog(txStatus);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      }\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    } finally {\n      setRequestedApproval(false);\n    }\n  }, [onApprove, pid, lpSymbol, farmsStore, user.address]);\n\n  const { modals } = useMst();\n\n  const lpPrice = useLpTokenPrice(lpSymbol);\n\n  const handleStake = useCallback(() => {\n    modals.farmsStakeUnstake.open({\n      isStaking: true,\n      maxValue: tokenBalance.toString(),\n      lpPrice: lpPrice.toString(),\n      tokenSymbol: lpSymbol,\n      farmId: pid,\n      addLiquidityUrl: getAddLiquidityUrl(quoteToken, token),\n    });\n  }, [lpPrice, lpSymbol, modals.farmsStakeUnstake, pid, tokenBalance, quoteToken, token]);\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = new BigNumber(getBalanceAmount(stakedBalance));\n    // if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n    //   return stakedBalanceBigNumber.toFixed(10);\n    // }\n    // if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n    //   return getFullDisplayBalance({ balance: stakedBalance });\n    // }\n    return stakedBalanceBigNumber.toFixed(Precisions.shortToken);\n  }, [stakedBalance]);\n\n  const displayBalanceAsUsd = useCallback(() => {\n    return getBalanceAmount(stakedBalance.times(lpPrice)).toFixed(Precisions.fiat);\n  }, [lpPrice, stakedBalance]);\n\n  const renderActions = useMemo(() => {\n    // Initial Workflow State\n    if (!hasConnectedWallet) {\n      return (\n        <>\n          <DetailsSectionTitle title=\"Start Farming\" />\n          <Button size=\"lg\" onClick={connect}>\n            <span className=\"text-smd text-white text-bold\">Unlock Wallet</span>\n          </Button>\n        </>\n      );\n    }\n\n    // Has Connected Wallet & Approved in Farm\n    if (!needsApproval) {\n      // Staked in Farm\n      if (stakedBalance.gt(0)) {\n        return (\n          <>\n            <DetailsSectionTitle title={`${lpSymbol} Staked`} />\n            <div className=\"box-f box-f-jc-sb box-f-ai-e\">\n              <div className=\"farms-table-row__details-staked-values-group\">\n                <div className=\"farms-table-row__details-staked-value text-blue-d text-smd\">\n                  {displayBalance()}\n                </div>\n                <div className=\"text-gray text-smd\">\n                  ~{displayBalanceAsUsd()} {CURRENCY_CONVERT_TO}\n                </div>\n              </div>\n              <FarmsStakeUnstakeButtons farm={farm} />\n            </div>\n          </>\n        );\n      }\n\n      // Not Staked in Farm\n      return (\n        <>\n          <DetailsSectionTitle title={`Stake ${lpSymbol}`} />\n          <Button size=\"lg\" onClick={handleStake}>\n            <span className=\"text-smd text-white text-bold\">Stake LP</span>\n          </Button>\n        </>\n      );\n    }\n\n    if (!userDataLoaded) {\n      return <Skeleton.Input style={{ width: 100 }} size=\"large\" active />;\n    }\n\n    // Just Connected Wallet\n    return (\n      <>\n        <DetailsSectionTitle title=\"Enable Farm\" />\n        <Button size=\"lg\" disabled={requestedApproval} onClick={handleApprove}>\n          <span className=\"text-smd text-white text-bold\">Enable</span>\n        </Button>\n      </>\n    );\n  }, [\n    hasConnectedWallet,\n    connect,\n    needsApproval,\n    handleApprove,\n    requestedApproval,\n    stakedBalance,\n    lpSymbol,\n    displayBalance,\n    displayBalanceAsUsd,\n    handleStake,\n    farm,\n    userDataLoaded,\n  ]);\n\n  return (\n    <div className={classNames(className, 'farms-table-row__details-box')}>{renderActions}</div>\n  );\n};\n\nexport default DetailsActionsSection;\n"]},"metadata":{},"sourceType":"module"}