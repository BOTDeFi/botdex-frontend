{"ast":null,"code":"import { normalize } from '../normalize.js';\nimport { Schema } from './schema.js';\nimport { DefinedInfo } from './defined-info.js';\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n * @typedef {import('./info.js').Info} Info\n */\n\n/**\n * @typedef {Object.<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Object.<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array.<string>} [mustUseProperty]\n */\n\nvar own = {}.hasOwnProperty;\n/**\n * @param {Definition} definition\n * @returns {import('./schema.js').Schema}\n */\n\nexport function create(definition) {\n  /** @type {Properties} */\n  var property = {};\n  /** @type {Normal} */\n\n  var normal = {};\n  /** @type {string} */\n\n  var prop;\n  /** @type {Info} */\n\n  var info;\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      info = new DefinedInfo(prop, definition.transform(definition.attributes, prop), definition.properties[prop], definition.space);\n\n      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {\n        info.mustUseProperty = true;\n      }\n\n      property[prop] = info;\n      normal[normalize(prop)] = prop;\n      normal[normalize(info.attribute)] = prop;\n    }\n  }\n\n  return new Schema(property, normal, definition.space);\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/property-information/lib/util/create.js"],"names":["normalize","Schema","DefinedInfo","own","hasOwnProperty","create","definition","property","normal","prop","info","properties","call","transform","attributes","space","mustUseProperty","includes","attribute"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,iBAAxB;AACA,SAAQC,MAAR,QAAqB,aAArB;AACA,SAAQC,WAAR,QAA0B,mBAA1B;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,GAAG,GAAG,GAAGC,cAAb;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,UAAhB,EAA4B;AACjC;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA;;AACA,MAAIC,MAAM,GAAG,EAAb;AACA;;AACA,MAAIC,IAAJ;AACA;;AACA,MAAIC,IAAJ;;AAEA,OAAKD,IAAL,IAAaH,UAAU,CAACK,UAAxB,EAAoC;AAClC,QAAIR,GAAG,CAACS,IAAJ,CAASN,UAAU,CAACK,UAApB,EAAgCF,IAAhC,CAAJ,EAA2C;AACzCC,MAAAA,IAAI,GAAG,IAAIR,WAAJ,CACLO,IADK,EAELH,UAAU,CAACO,SAAX,CAAqBP,UAAU,CAACQ,UAAhC,EAA4CL,IAA5C,CAFK,EAGLH,UAAU,CAACK,UAAX,CAAsBF,IAAtB,CAHK,EAILH,UAAU,CAACS,KAJN,CAAP;;AAOA,UACET,UAAU,CAACU,eAAX,IACAV,UAAU,CAACU,eAAX,CAA2BC,QAA3B,CAAoCR,IAApC,CAFF,EAGE;AACAC,QAAAA,IAAI,CAACM,eAAL,GAAuB,IAAvB;AACD;;AAEDT,MAAAA,QAAQ,CAACE,IAAD,CAAR,GAAiBC,IAAjB;AAEAF,MAAAA,MAAM,CAACR,SAAS,CAACS,IAAD,CAAV,CAAN,GAA0BA,IAA1B;AACAD,MAAAA,MAAM,CAACR,SAAS,CAACU,IAAI,CAACQ,SAAN,CAAV,CAAN,GAAoCT,IAApC;AACD;AACF;;AAED,SAAO,IAAIR,MAAJ,CAAWM,QAAX,EAAqBC,MAArB,EAA6BF,UAAU,CAACS,KAAxC,CAAP;AACD","sourcesContent":["import {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n * @typedef {import('./info.js').Info} Info\n */\n\n/**\n * @typedef {Object.<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Object.<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array.<string>} [mustUseProperty]\n */\n\nvar own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {import('./schema.js').Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  /** @type {string} */\n  var prop\n  /** @type {Info} */\n  var info\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes, prop),\n        definition.properties[prop],\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n"]},"metadata":{},"sourceType":"module"}