{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\n\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-util-classify-character/index.js"],"names":["markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","classifyCharacter","code"],"mappings":"AAAA;AACA;AACA;AACA,SACEA,yBADF,EAEEC,kBAFF,EAGEC,iBAHF,QAIO,0BAJP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AACtC,MACEA,IAAI,KAAK,IAAT,IACAJ,yBAAyB,CAACI,IAAD,CADzB,IAEAF,iBAAiB,CAACE,IAAD,CAHnB,EAIE;AACA,WAAO,CAAP;AACD;;AAED,MAAIH,kBAAkB,CAACG,IAAD,CAAtB,EAA8B;AAC5B,WAAO,CAAP;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n"]},"metadata":{},"sourceType":"module"}