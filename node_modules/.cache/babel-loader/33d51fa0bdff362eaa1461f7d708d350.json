{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useContext } from 'react';\nimport { onSnapshot, types } from 'mobx-state-tree';\nimport { clogData } from '@/utils/logger';\nimport { initialState as roiInitialState } from './Models/Modals/RoiModal';\nimport { DaoModel, FarmsModel, ModalsModel, PoolsModel, TokensModel, UserModel } from './Models';\nconst RootModel = types.model({\n  user: UserModel,\n  modals: ModalsModel,\n  tokens: TokensModel,\n  pools: PoolsModel,\n  farms: FarmsModel,\n  dao: DaoModel\n});\nexport const Store = RootModel.create({\n  user: {\n    address: ''\n  },\n  modals: {\n    metamaskErr: {\n      errMsg: ''\n    },\n    roi: {\n      state: roiInitialState\n    },\n    stakeUnstake: {\n      isOpen: false,\n      isStaking: true,\n      isAutoVault: false,\n      poolId: 0\n    },\n    poolsCollect: {\n      isOpen: false\n    },\n    farmsStakeUnstake: {\n      isOpen: false,\n      farmId: 0,\n      isStaking: false,\n      maxValue: '',\n      lpPrice: '',\n      tokenSymbol: '',\n      addLiquidityUrl: ''\n    }\n  },\n  tokens: {\n    default: [],\n    top: [],\n    extended: [],\n    imported: []\n  },\n  pools: {\n    userData: {\n      isLoading: true\n    },\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null\n    }\n  },\n  farms: {// data: [],\n  },\n  dao: {\n    blockNumber: '0'\n  }\n});\nconst rootStore = Store;\nonSnapshot(rootStore, snapshot => {\n  clogData('Snapshot: ', snapshot);\n});\nconst RootStoreContext = /*#__PURE__*/createContext(null);\nexport const {\n  Provider\n} = RootStoreContext;\nexport function useMst() {\n  _s();\n\n  const store = useContext(RootStoreContext);\n\n  if (store === null) {\n    throw new Error('Store cannot be null, please add a context provider');\n  }\n\n  return store;\n}\n\n_s(useMst, \"Wl1jJrZzTCxjtMcqth/dX4wg3Uo=\");\n\nexport default rootStore;","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/index.ts"],"names":["createContext","useContext","onSnapshot","types","clogData","initialState","roiInitialState","DaoModel","FarmsModel","ModalsModel","PoolsModel","TokensModel","UserModel","RootModel","model","user","modals","tokens","pools","farms","dao","Store","create","address","metamaskErr","errMsg","roi","state","stakeUnstake","isOpen","isStaking","isAutoVault","poolId","poolsCollect","farmsStakeUnstake","farmId","maxValue","lpPrice","tokenSymbol","addLiquidityUrl","default","top","extended","imported","userData","isLoading","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","blockNumber","rootStore","snapshot","RootStoreContext","Provider","useMst","store","Error"],"mappings":"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","sourcesContent":["import { createContext, useContext } from 'react';\nimport { Instance, onSnapshot, types } from 'mobx-state-tree';\n\nimport { clogData } from '@/utils/logger';\n\nimport { initialState as roiInitialState } from './Models/Modals/RoiModal';\nimport { DaoModel, FarmsModel, ModalsModel, PoolsModel, TokensModel, UserModel } from './Models';\n\nconst RootModel = types.model({\n  user: UserModel,\n  modals: ModalsModel,\n  tokens: TokensModel,\n  pools: PoolsModel,\n  farms: FarmsModel,\n  dao: DaoModel,\n});\nexport const Store = RootModel.create({\n  user: {\n    address: '',\n  },\n  modals: {\n    metamaskErr: {\n      errMsg: '',\n    },\n    roi: {\n      state: roiInitialState,\n    },\n    stakeUnstake: {\n      isOpen: false,\n      isStaking: true,\n      isAutoVault: false,\n      poolId: 0,\n    },\n    poolsCollect: {\n      isOpen: false,\n    },\n    farmsStakeUnstake: {\n      isOpen: false,\n      farmId: 0,\n      isStaking: false,\n      maxValue: '',\n      lpPrice: '',\n      tokenSymbol: '',\n      addLiquidityUrl: '',\n    },\n  },\n  tokens: {\n    default: [],\n    top: [],\n    extended: [],\n    imported: [],\n  },\n  pools: {\n    userData: {\n      isLoading: true,\n    },\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    },\n  },\n  farms: {\n    // data: [],\n  },\n  dao: {\n    blockNumber: '0',\n  },\n});\n\nconst rootStore = Store;\n\nonSnapshot(rootStore, (snapshot) => {\n  clogData('Snapshot: ', snapshot);\n});\n\nexport type RootInstance = Instance<typeof RootModel>;\nconst RootStoreContext = createContext<null | RootInstance>(null);\n\nexport const { Provider } = RootStoreContext;\n\nexport function useMst(): RootInstance {\n  const store = useContext(RootStoreContext);\n  if (store === null) {\n    throw new Error('Store cannot be null, please add a context provider');\n  }\n  return store;\n}\n\nexport default rootStore;\n"]},"metadata":{},"sourceType":"module"}