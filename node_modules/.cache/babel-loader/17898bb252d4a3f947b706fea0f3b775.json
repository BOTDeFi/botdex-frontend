{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useStakeFarm } from '@/hooks/farms/useStakeFarm';\nimport { getContract } from '@/services/web3/contractHelpers'; // import { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = pid => {\n  _s();\n\n  const masterRefineryContract = getContract('MASTER_REFINER');\n  const {\n    stakeFarm\n  } = useStakeFarm(masterRefineryContract);\n  const handleStake = useCallback(async amount => {\n    const txHash = await stakeFarm(pid, amount);\n    console.info(txHash);\n  }, [pid, stakeFarm]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStakeFarms, \"y5ETksWtkNztRA9iNEXezIbukFU=\", false, function () {\n  return [useStakeFarm];\n});\n\nexport default useStakeFarms;","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useStakeFarms.ts"],"names":["useCallback","useStakeFarm","getContract","useStakeFarms","pid","masterRefineryContract","stakeFarm","handleStake","amount","txHash","console","info","onStake"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,WAAT,QAA4B,iCAA5B,C,CACA;;AAEA,MAAMC,aAAa,GAAIC,GAAD,IAAiB;AAAA;;AACrC,QAAMC,sBAAsB,GAAGH,WAAW,CAAC,gBAAD,CAA1C;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAgBL,YAAY,CAACI,sBAAD,CAAlC;AAEA,QAAME,WAAW,GAAGP,WAAW,CAC7B,MAAOQ,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMH,SAAS,CAACF,GAAD,EAAMI,MAAN,CAA9B;AACAE,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAJ4B,EAK7B,CAACL,GAAD,EAAME,SAAN,CAL6B,CAA/B;AAQA,SAAO;AAAEM,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAbD;;GAAMJ,a;UAEkBF,Y;;;AAaxB,eAAeE,aAAf","sourcesContent":["import { useCallback } from 'react';\n\nimport { useStakeFarm } from '@/hooks/farms/useStakeFarm';\nimport { getContract } from '@/services/web3/contractHelpers';\n// import { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterRefineryContract = getContract('MASTER_REFINER');\n  const { stakeFarm } = useStakeFarm(masterRefineryContract);\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(pid, amount);\n      console.info(txHash);\n    },\n    [pid, stakeFarm],\n  );\n\n  return { onStake: handleStake };\n};\n\nexport default useStakeFarms;\n"]},"metadata":{},"sourceType":"module"}