{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { getRfPairsContext } from '@/services/apolloClient';\nexport const GET_CURRENT_BALANCE = gql`\n  query GetCurrentBalance($user_address: String!) {\n    user(id: $user_address) {\n      TotalBalance\n    }\n  }\n`;\n/**\n * Allows to get current user balance to use it for voting power counting purposes.\n */\n\nexport const useGetCurrentBalance = options => {\n  _s();\n\n  const [func, responseData] = useLazyQuery(GET_CURRENT_BALANCE, options);\n  const getCurrentBalance = useCallback(userAddress => {\n    func({ ...getRfPairsContext(),\n      variables: {\n        user_address: userAddress\n      }\n    });\n  }, [func]);\n  return {\n    getCurrentBalance,\n    options: [func, responseData]\n  };\n};\n\n_s(useGetCurrentBalance, \"6yCAWkzC9sS6L75rxOL48WGQdD0=\", false, function () {\n  return [useLazyQuery];\n});\n\nexport const selectCurrentBalance = data => {\n  if (!data.user) return null;\n  return data.user.TotalBalance;\n};\nexport const hasCurrentBalance = (error, data) => {\n  if (error || !data) return false;\n  const balance = selectCurrentBalance(data);\n  if (!balance || balance === '0') return false;\n  return Boolean(balance);\n};\nexport const requestHasCurrentBalance = async (userAddress, client) => {\n  const result = await (client === null || client === void 0 ? void 0 : client.query({\n    query: GET_CURRENT_BALANCE,\n    variables: {\n      user_address: userAddress\n    }\n  }));\n  if (!result) return false;\n  return hasCurrentBalance(result.error, result.data);\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/useGetCurrentBalance.ts"],"names":["useCallback","gql","useLazyQuery","getRfPairsContext","GET_CURRENT_BALANCE","useGetCurrentBalance","options","func","responseData","getCurrentBalance","userAddress","variables","user_address","selectCurrentBalance","data","user","TotalBalance","hasCurrentBalance","error","balance","Boolean","requestHasCurrentBalance","client","result","query"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAAuBC,GAAvB,EAA8DC,YAA9D,QAAkF,gBAAlF;AAEA,SAASC,iBAAT,QAAkC,yBAAlC;AAaA,OAAO,MAAMC,mBAAmB,GAAGH,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA,CANO;AAQP;AACA;AACA;;AACA,OAAO,MAAMI,oBAAoB,GAC/BC,OADkC,IAK/B;AAAA;;AACH,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBN,YAAY,CAGvCE,mBAHuC,EAGlBE,OAHkB,CAAzC;AAKA,QAAMG,iBAAiB,GAAGT,WAAW,CAClCU,WAAD,IAAyB;AACvBH,IAAAA,IAAI,CAAC,EACH,GAAGJ,iBAAiB,EADjB;AAEHQ,MAAAA,SAAS,EAAE;AACTC,QAAAA,YAAY,EAAEF;AADL;AAFR,KAAD,CAAJ;AAMD,GARkC,EASnC,CAACH,IAAD,CATmC,CAArC;AAYA,SAAO;AAAEE,IAAAA,iBAAF;AAAqBH,IAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,YAAP;AAA9B,GAAP;AACD,CAxBM;;GAAMH,oB;UAMkBH,Y;;;AAoB/B,OAAO,MAAMW,oBAAoB,GAAIC,IAAD,IAAqD;AACvF,MAAI,CAACA,IAAI,CAACC,IAAV,EAAgB,OAAO,IAAP;AAChB,SAAOD,IAAI,CAACC,IAAL,CAAUC,YAAjB;AACD,CAHM;AAKP,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAaJ,IAAb,KAAoC;AACnE,MAAII,KAAK,IAAI,CAACJ,IAAd,EAAoB,OAAO,KAAP;AACpB,QAAMK,OAAO,GAAGN,oBAAoB,CAACC,IAAD,CAApC;AACA,MAAI,CAACK,OAAD,IAAYA,OAAO,KAAK,GAA5B,EAAiC,OAAO,KAAP;AACjC,SAAOC,OAAO,CAACD,OAAD,CAAd;AACD,CALM;AAOP,OAAO,MAAME,wBAAwB,GAAG,OACtCX,WADsC,EAEtCY,MAFsC,KAGjB;AACrB,QAAMC,MAAM,GAAG,OAAMD,MAAN,aAAMA,MAAN,uBAAMA,MAAM,CAAEE,KAAR,CAAc;AACjCA,IAAAA,KAAK,EAAEpB,mBAD0B;AAEjCO,IAAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAEF;AADL;AAFsB,GAAd,CAAN,CAAf;AAMA,MAAI,CAACa,MAAL,EAAa,OAAO,KAAP;AACb,SAAON,iBAAiB,CAACM,MAAM,CAACL,KAAR,EAAeK,MAAM,CAACT,IAAtB,CAAxB;AACD,CAZM","sourcesContent":["import { useCallback } from 'react';\nimport { ApolloClient, gql, LazyQueryHookOptions, QueryTuple, useLazyQuery } from '@apollo/client';\n\nimport { getRfPairsContext } from '@/services/apolloClient';\n\ninterface IGetCurrentBalanceResponse {\n  user: {\n    TotalBalance: string;\n    // __typename: \"User\"\n  } | null;\n}\n\ninterface IGetCurrentBalanceVariables {\n  user_address: string;\n}\n\nexport const GET_CURRENT_BALANCE = gql`\n  query GetCurrentBalance($user_address: String!) {\n    user(id: $user_address) {\n      TotalBalance\n    }\n  }\n`;\n\n/**\n * Allows to get current user balance to use it for voting power counting purposes.\n */\nexport const useGetCurrentBalance = (\n  options?: LazyQueryHookOptions<IGetCurrentBalanceResponse, IGetCurrentBalanceVariables>,\n): {\n  getCurrentBalance: (userAddress: string) => void;\n  options: QueryTuple<IGetCurrentBalanceResponse, IGetCurrentBalanceVariables>;\n} => {\n  const [func, responseData] = useLazyQuery<\n    IGetCurrentBalanceResponse,\n    IGetCurrentBalanceVariables\n  >(GET_CURRENT_BALANCE, options);\n\n  const getCurrentBalance = useCallback(\n    (userAddress: string) => {\n      func({\n        ...getRfPairsContext(),\n        variables: {\n          user_address: userAddress,\n        },\n      });\n    },\n    [func],\n  );\n\n  return { getCurrentBalance, options: [func, responseData] };\n};\n\nexport const selectCurrentBalance = (data: IGetCurrentBalanceResponse): string | null => {\n  if (!data.user) return null;\n  return data.user.TotalBalance;\n};\n\nexport const hasCurrentBalance = (error: any, data: any): boolean => {\n  if (error || !data) return false;\n  const balance = selectCurrentBalance(data);\n  if (!balance || balance === '0') return false;\n  return Boolean(balance);\n};\n\nexport const requestHasCurrentBalance = async (\n  userAddress: string,\n  client?: ApolloClient<any>,\n): Promise<boolean> => {\n  const result = await client?.query({\n    query: GET_CURRENT_BALANCE,\n    variables: {\n      user_address: userAddress,\n    },\n  });\n  if (!result) return false;\n  return hasCurrentBalance(result.error, result.data);\n};\n"]},"metadata":{},"sourceType":"module"}