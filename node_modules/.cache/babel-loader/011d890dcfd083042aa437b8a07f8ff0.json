{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig, tokens } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { metamaskService } from '@/services/MetamaskConnect';\nimport { getAddress, getContract, getContractAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { MAX_UINT_256 } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\nimport useLastUpdated from '../useLastUpdated';\nconst gasOptions = {\n  gas: 300000\n};\nexport const useApprovePool = (lpContract, poolId) => {\n  _s();\n\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const {\n    user,\n    pools: poolsStore\n  } = useMst();\n  const foundPool = poolsConfig.find(pool => pool.id === poolId);\n  if (!foundPool) throw new Error('Specify the correct poolId');\n  const smartRefinerInitContract = metamaskService.getContract(getAddress(foundPool.contractAddress), SmartRefinerInitializableAbi);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      const tx = await callWithGasPrice({\n        contract: lpContract,\n        methodName: 'approve',\n        methodArgs: [smartRefinerInitContract.options.address, MAX_UINT_256],\n        options: gasOptions\n      });\n      poolsStore.updateUserAllowance(poolId, user.address);\n\n      if (tx.status) {\n        successNotification('Contract Enabled!', `You can now stake in the ${foundPool.earningToken.symbol} pool!`);\n      } else {\n        errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n      }\n\n      setRequestedApproval(false);\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    }\n  }, [callWithGasPrice, lpContract, poolId, poolsStore, smartRefinerInitContract, user.address, foundPool.earningToken.symbol]);\n  return {\n    handleApprove,\n    requestedApproval\n  };\n}; // Approve RP1 auto pool\n\n_s(useApprovePool, \"UAoFBfI9J2VQDcdcIaeVuSZbdKo=\", false, function () {\n  return [useCallWithGasPrice, useMst];\n});\n\nexport const useVaultApprove = setLastUpdated => {\n  _s2();\n\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const rocketPropellantContract = getContract('RP1');\n  const vaultAddress = getContractAddress('REFINERY_VAULT');\n\n  const handleApprove = async () => {\n    const tx = await callWithGasPrice({\n      contract: rocketPropellantContract,\n      methodName: 'approve',\n      methodArgs: [vaultAddress, MAX_UINT_256],\n      options: gasOptions\n    });\n    setRequestedApproval(true);\n\n    if (tx.status) {\n      successNotification('Contract Enabled!', `You can now stake in the ${tokens.rp1.symbol} vault!`);\n      setLastUpdated();\n    } else {\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    }\n\n    setRequestedApproval(false);\n  };\n\n  return {\n    handleApprove,\n    requestedApproval\n  };\n};\n\n_s2(useVaultApprove, \"G0NYaBCdF7/HdQ+qGtg0+3p8C1M=\", false, function () {\n  return [useCallWithGasPrice];\n});\n\nexport const useCheckVaultApprovalStatus = () => {\n  _s3();\n\n  const [isVaultApproved, setIsVaultApproved] = useState(false);\n  const {\n    user\n  } = useMst();\n  const rocketPropellantContract = getContract('RP1');\n  const vaultAddress = getContractAddress('REFINERY_VAULT');\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await rocketPropellantContract.methods.allowance(user.address, vaultAddress).call();\n        const currentAllowance = new BigNumber(response.toString());\n        setIsVaultApproved(currentAllowance.gt(0));\n      } catch (error) {\n        setIsVaultApproved(false);\n      }\n    };\n\n    checkApprovalStatus();\n  }, [user.address, vaultAddress, lastUpdated, rocketPropellantContract.methods]);\n  return {\n    isVaultApproved,\n    setLastUpdated\n  };\n};\n\n_s3(useCheckVaultApprovalStatus, \"vyvd80QskJ5CTli8txrnBSFtdOA=\", false, function () {\n  return [useMst, useLastUpdated];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useApprove.ts"],"names":["useCallback","useEffect","useState","BigNumber","errorNotification","successNotification","pools","poolsConfig","tokens","SmartRefinerInitializable","SmartRefinerInitializableAbi","metamaskService","getAddress","getContract","getContractAddress","useCallWithGasPrice","useMst","MAX_UINT_256","clogError","useLastUpdated","gasOptions","gas","useApprovePool","lpContract","poolId","requestedApproval","setRequestedApproval","callWithGasPrice","user","poolsStore","foundPool","find","pool","id","Error","smartRefinerInitContract","contractAddress","handleApprove","tx","contract","methodName","methodArgs","options","address","updateUserAllowance","status","earningToken","symbol","error","useVaultApprove","setLastUpdated","rocketPropellantContract","vaultAddress","rp1","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","lastUpdated","checkApprovalStatus","response","methods","allowance","call","currentAllowance","toString","gt"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig, tokens } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { metamaskService } from '@/services/MetamaskConnect';\nimport { getAddress, getContract, getContractAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { IReceipt } from '@/types';\nimport { MAX_UINT_256 } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\n\nimport useLastUpdated from '../useLastUpdated';\n\nconst gasOptions = { gas: 300000 };\n\nexport const useApprovePool = (lpContract: Contract, poolId: number) => {\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const { callWithGasPrice } = useCallWithGasPrice();\n  const { user, pools: poolsStore } = useMst();\n  const foundPool = poolsConfig.find((pool) => pool.id === poolId);\n  if (!foundPool) throw new Error('Specify the correct poolId');\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      const tx = await callWithGasPrice({\n        contract: lpContract,\n        methodName: 'approve',\n        methodArgs: [smartRefinerInitContract.options.address, MAX_UINT_256],\n        options: gasOptions,\n      });\n\n      poolsStore.updateUserAllowance(poolId, user.address);\n      if ((tx as IReceipt).status) {\n        successNotification(\n          'Contract Enabled!',\n          `You can now stake in the ${foundPool.earningToken.symbol} pool!`,\n        );\n      } else {\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      }\n      setRequestedApproval(false);\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    }\n  }, [\n    callWithGasPrice,\n    lpContract,\n    poolId,\n    poolsStore,\n    smartRefinerInitContract,\n    user.address,\n    foundPool.earningToken.symbol,\n  ]);\n\n  return { handleApprove, requestedApproval };\n};\n\n// Approve RP1 auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const rocketPropellantContract = getContract('RP1');\n  const vaultAddress = getContractAddress('REFINERY_VAULT');\n\n  const handleApprove = async () => {\n    const tx = await callWithGasPrice({\n      contract: rocketPropellantContract,\n      methodName: 'approve',\n      methodArgs: [vaultAddress, MAX_UINT_256],\n      options: gasOptions,\n    });\n    setRequestedApproval(true);\n    if ((tx as IReceipt).status) {\n      successNotification(\n        'Contract Enabled!',\n        `You can now stake in the ${tokens.rp1.symbol} vault!`,\n      );\n      setLastUpdated();\n    } else {\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    }\n    setRequestedApproval(false);\n  };\n\n  return { handleApprove, requestedApproval };\n};\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false);\n  const { user } = useMst();\n  const rocketPropellantContract = getContract('RP1');\n  const vaultAddress = getContractAddress('REFINERY_VAULT');\n  const { lastUpdated, setLastUpdated } = useLastUpdated();\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await rocketPropellantContract.methods\n          .allowance(user.address, vaultAddress)\n          .call();\n        const currentAllowance = new BigNumber(response.toString());\n        setIsVaultApproved(currentAllowance.gt(0));\n      } catch (error) {\n        setIsVaultApproved(false);\n      }\n    };\n\n    checkApprovalStatus();\n  }, [user.address, vaultAddress, lastUpdated, rocketPropellantContract.methods]);\n\n  return { isVaultApproved, setLastUpdated };\n};\n"]},"metadata":{},"sourceType":"module"}