{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardFooter/CardDetails/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Skeleton } from '@/components/atoms';\nimport OpenLink from '@/components/sections/Pools/OpenLink';\nimport { getPoolBlockInfo } from '@/components/sections/Pools/PoolCard/utils';\nimport { TotalStakedPopover } from '@/components/sections/Pools/Popovers';\nimport { useTotalStaked } from '@/hooks/pools/useTotalStaked';\nimport { useScannerUrl } from '@/hooks/useScannerUrl';\nimport { getAddress, getContractAddress } from '@/services/web3/contractHelpers';\nimport { useBlock } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { PoolFarmingMode } from '@/types';\nimport { feeFormatter, numberWithCommas } from '@/utils/formatters';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardDetails = observer(_c = _s(({\n  pool,\n  type\n}) => {\n  _s();\n\n  const {\n    pools: {\n      fees: {\n        performanceFee\n      }\n    }\n  } = useMst();\n  const [currentBlock] = useBlock();\n  const {\n    shouldShowBlockCountdown,\n    // blocksUntilStart,\n    // blocksRemaining,\n    // hasPoolStarted,\n    blocksToDisplay\n  } = getPoolBlockInfo(pool, currentBlock);\n  const {\n    earningToken,\n    stakingToken\n  } = pool;\n  const seeTokenInfoLink = useScannerUrl(`token/${getAddress(earningToken.address)}`);\n  const viewContractLink = useScannerUrl(`address/${type === PoolFarmingMode.auto ? getContractAddress('REFINERY_VAULT') : getAddress(pool.contractAddress)}`);\n  const {\n    totalStakedBalance,\n    totalStakedBalanceToDisplay\n  } = useTotalStaked(pool, type);\n  const performanceRow = useMemo(() => {\n    return type === PoolFarmingMode.auto ? [{\n      title: 'Performance Fee:',\n      value: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [feeFormatter(performanceFee), \"%\"]\n      }, void 0, true)\n    }] : [];\n  }, [performanceFee, type]);\n  const endsInRow = useMemo(() => {\n    return shouldShowBlockCountdown ? [{\n      title: 'Ends in:',\n      value: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [numberWithCommas(blocksToDisplay), \" blocks\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)\n      }, void 0, false)\n    }] : [];\n  }, [shouldShowBlockCountdown, blocksToDisplay]);\n  const items = useMemo(() => {\n    return [{\n      title: 'Total staked:',\n      value: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [totalStakedBalance ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: totalStakedBalanceToDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Skeleton.Input, {\n          style: {\n            width: 60\n          },\n          size: \"small\",\n          active: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TotalStakedPopover, {\n          symbol: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, ...performanceRow, ...endsInRow];\n  }, [endsInRow, performanceRow, stakingToken.symbol, totalStakedBalance, totalStakedBalanceToDisplay]);\n  const links = [{\n    href: earningToken.address ? seeTokenInfoLink : '',\n    text: 'See Token Info'\n  }, {\n    href: earningToken.projectLink,\n    text: 'View Project Site'\n  }, {\n    href: viewContractLink,\n    text: 'View Contract'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-card__details\",\n    children: [items.map(({\n      title,\n      value\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-card__details-item box-f-ai-c box-f-jc-sb \",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-card__details-item-name text-black text-med\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-card__details-item-value text-smd box-f-ai-c\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this);\n    }), links.map(({\n      href,\n      text\n    }) => /*#__PURE__*/_jsxDEV(OpenLink, {\n      className: \"p-card__details-item\",\n      href: href,\n      text: text\n    }, href + text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}, \"9PjRZUBa0zRftREM0KPJ8WROeoU=\", false, function () {\n  return [useMst, useBlock, useScannerUrl, useScannerUrl, useTotalStaked];\n}));\n_c2 = CardDetails;\nexport default CardDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CardDetails$observer\");\n$RefreshReg$(_c2, \"CardDetails\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardFooter/CardDetails/index.tsx"],"names":["React","useMemo","observer","Skeleton","OpenLink","getPoolBlockInfo","TotalStakedPopover","useTotalStaked","useScannerUrl","getAddress","getContractAddress","useBlock","useMst","PoolFarmingMode","feeFormatter","numberWithCommas","CardDetails","pool","type","pools","fees","performanceFee","currentBlock","shouldShowBlockCountdown","blocksToDisplay","earningToken","stakingToken","seeTokenInfoLink","address","viewContractLink","auto","contractAddress","totalStakedBalance","totalStakedBalanceToDisplay","performanceRow","title","value","endsInRow","items","width","symbol","links","href","text","projectLink","map"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { Skeleton } from '@/components/atoms';\nimport OpenLink from '@/components/sections/Pools/OpenLink';\nimport { getPoolBlockInfo } from '@/components/sections/Pools/PoolCard/utils';\nimport { TotalStakedPopover } from '@/components/sections/Pools/Popovers';\nimport { useTotalStaked } from '@/hooks/pools/useTotalStaked';\nimport { useScannerUrl } from '@/hooks/useScannerUrl';\nimport { getAddress, getContractAddress } from '@/services/web3/contractHelpers';\nimport { useBlock } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { IPoolFarmingMode, Pool, PoolFarmingMode } from '@/types';\nimport { feeFormatter, numberWithCommas } from '@/utils/formatters';\n\nconst CardDetails: React.FC<{ type: IPoolFarmingMode; pool: Pool }> = observer(({ pool, type }) => {\n  const {\n    pools: {\n      fees: { performanceFee },\n    },\n  } = useMst();\n  const [currentBlock] = useBlock();\n  const {\n    shouldShowBlockCountdown,\n    // blocksUntilStart,\n    // blocksRemaining,\n    // hasPoolStarted,\n    blocksToDisplay,\n  } = getPoolBlockInfo(pool, currentBlock);\n  const { earningToken, stakingToken } = pool;\n  const seeTokenInfoLink = useScannerUrl(`token/${getAddress(earningToken.address)}`);\n  const viewContractLink = useScannerUrl(\n    `address/${\n      type === PoolFarmingMode.auto\n        ? getContractAddress('REFINERY_VAULT')\n        : getAddress(pool.contractAddress)\n    }`,\n  );\n\n  const { totalStakedBalance, totalStakedBalanceToDisplay } = useTotalStaked(pool, type);\n\n  const performanceRow = useMemo(() => {\n    return type === PoolFarmingMode.auto\n      ? [\n          {\n            title: 'Performance Fee:',\n            value: <>{feeFormatter(performanceFee)}%</>,\n          },\n        ]\n      : [];\n  }, [performanceFee, type]);\n\n  const endsInRow = useMemo(() => {\n    return shouldShowBlockCountdown\n      ? [\n          {\n            title: 'Ends in:',\n            value: (\n              <>\n                <span>{numberWithCommas(blocksToDisplay)} blocks</span>\n                {/* TODO: copy/paste value like in table row */}\n              </>\n            ),\n          },\n        ]\n      : [];\n  }, [shouldShowBlockCountdown, blocksToDisplay]);\n  const items = useMemo(() => {\n    return [\n      {\n        title: 'Total staked:',\n        value: (\n          <>\n            {totalStakedBalance ? (\n              <span>{totalStakedBalanceToDisplay}</span>\n            ) : (\n              <Skeleton.Input style={{ width: 60 }} size=\"small\" active />\n            )}\n            <TotalStakedPopover symbol={stakingToken.symbol} />\n          </>\n        ),\n      },\n      ...performanceRow,\n      ...endsInRow,\n    ];\n  }, [\n    endsInRow,\n    performanceRow,\n    stakingToken.symbol,\n    totalStakedBalance,\n    totalStakedBalanceToDisplay,\n  ]);\n  const links = [\n    {\n      href: earningToken.address ? seeTokenInfoLink : '',\n      text: 'See Token Info',\n    },\n    {\n      href: earningToken.projectLink,\n      text: 'View Project Site',\n    },\n    {\n      href: viewContractLink,\n      text: 'View Contract',\n    },\n  ];\n  return (\n    <div className=\"p-card__details\">\n      {items.map(({ title, value }) => {\n        return (\n          <div key={title} className=\"p-card__details-item box-f-ai-c box-f-jc-sb \">\n            <div className=\"p-card__details-item-name text-black text-med\">{title}</div>\n            <div className=\"p-card__details-item-value text-smd box-f-ai-c\">{value}</div>\n          </div>\n        );\n      })}\n      {links.map(({ href, text }) => (\n        <OpenLink key={href + text} className=\"p-card__details-item\" href={href} text={text} />\n      ))}\n    </div>\n  );\n});\n\nexport default CardDetails;\n"]},"metadata":{},"sourceType":"module"}