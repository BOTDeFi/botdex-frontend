{"ast":null,"code":"/* eslint-env browser */\nvar semicolon = 59; // `;`\n\n/** @type {HTMLElement} */\n\nvar element;\n/**\n * @param {string} characters\n * @returns {string|false}\n */\n\nexport function decodeEntity(characters) {\n  var entity = '&' + characters + ';';\n  /** @type {string} */\n\n  var char;\n  element = element || document.createElement('i');\n  element.innerHTML = entity;\n  char = element.textContent; // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of `&notit;`\n  // will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing and the entity to\n  // decode was not a semicolon (`&semi;`), we can assume that the matching was\n  // incomplete\n\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false;\n  } // If the decoded string is equal to the input, the entity was not valid\n\n\n  return char === entity ? false : char;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/parse-entities/decode-entity.browser.js"],"names":["semicolon","element","decodeEntity","characters","entity","char","document","createElement","innerHTML","textContent","charCodeAt","length"],"mappings":"AAAA;AAEA,IAAIA,SAAS,GAAG,EAAhB,C,CAAmB;;AACnB;;AACA,IAAIC,OAAJ;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AACvC,MAAIC,MAAM,GAAG,MAAMD,UAAN,GAAmB,GAAhC;AACA;;AACA,MAAIE,IAAJ;AAEAJ,EAAAA,OAAO,GAAGA,OAAO,IAAIK,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAArB;AACAN,EAAAA,OAAO,CAACO,SAAR,GAAoBJ,MAApB;AACAC,EAAAA,IAAI,GAAGJ,OAAO,CAACQ,WAAf,CAPuC,CASvC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIJ,IAAI,CAACK,UAAL,CAAgBL,IAAI,CAACM,MAAL,GAAc,CAA9B,MAAqCX,SAArC,IAAkDG,UAAU,KAAK,MAArE,EAA6E;AAC3E,WAAO,KAAP;AACD,GAjBsC,CAmBvC;;;AACA,SAAOE,IAAI,KAAKD,MAAT,GAAkB,KAAlB,GAA0BC,IAAjC;AACD","sourcesContent":["/* eslint-env browser */\n\nvar semicolon = 59 // `;`\n/** @type {HTMLElement} */\nvar element\n\n/**\n * @param {string} characters\n * @returns {string|false}\n */\nexport function decodeEntity(characters) {\n  var entity = '&' + characters + ';'\n  /** @type {string} */\n  var char\n\n  element = element || document.createElement('i')\n  element.innerHTML = entity\n  char = element.textContent\n\n  // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of `&notit;`\n  // will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing and the entity to\n  // decode was not a semicolon (`&semi;`), we can assume that the matching was\n  // incomplete\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the entity was not valid\n  return char === entity ? false : char\n}\n"]},"metadata":{},"sourceType":"module"}