{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/CollectModal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite'; // import UnknownImg from '@/assets/img/currency/unknown.svg';\n\nimport { Button, RadioGroup } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { Modal } from '@/components/molecules';\nimport { PoolsCollectPopover } from '@/components/sections/Pools/Popovers';\nimport useHarvestPool from '@/hooks/pools/useHarvestPool';\nimport useStakePool from '@/hooks/pools/useStakePool';\nimport { useMst } from '@/store';\nimport { PoolFarmingMode } from '@/types';\nimport { getFullDisplayBalance } from '@/utils/formatters';\nimport { clogError } from '@/utils/logger';\nimport './CollectModal.scss'; // interface IStakeUnstakeModal {\n//   isVisible?: boolean;\n//   handleClose: () => void;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst compoundHarvestChoices = [{\n  text: 'Compound',\n  value: 1\n}, {\n  text: 'Harvest',\n  value: 0\n}];\n\nconst ModalTitle = ({\n  className,\n  title\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames(className, 'text-smd text-bold text-yellow'),\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n};\n\n_c = ModalTitle;\nconst CollectModal = observer(_c2 = _s(() => {\n  _s();\n\n  const {\n    modals: {\n      poolsCollect\n    }\n  } = useMst();\n  const {\n    options\n  } = poolsCollect;\n  const hasCompoundHarvestChoice = (options === null || options === void 0 ? void 0 : options.farmMode) === PoolFarmingMode.manual;\n  const [isCompounding, setCompounding] = useState(Number(hasCompoundHarvestChoice));\n  const [pendingTx, setPendingTx] = useState(false);\n  useEffect(() => {\n    // for any 'location' changes with opened modal\n    return () => {\n      poolsCollect.close();\n    };\n  }, [poolsCollect]);\n  const poolId = (options === null || options === void 0 ? void 0 : options.poolId) || 0;\n  const {\n    onReward\n  } = useHarvestPool(poolId);\n  const {\n    onStake\n  } = useStakePool(poolId);\n  if (!options) return null;\n  const {\n    earnings,\n    earningTokenDecimals,\n    earningTokenSymbol,\n    fullBalance\n  } = options;\n  const shouldCompound = hasCompoundHarvestChoice && isCompounding;\n\n  const compound = async () => {\n    try {\n      await onStake(fullBalance, earningTokenDecimals);\n      successNotification('Compounded!', `Your ${earningTokenSymbol} earnings have been re-invested into the pool!`);\n      poolsCollect.close();\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  const harvest = async () => {\n    try {\n      await onReward();\n      successNotification('Harvested!', `Your ${earningTokenSymbol} earnings have been sent to your wallet!`);\n      poolsCollect.close();\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  const handleConfirm = async () => {\n    // if (!options) return;\n    setPendingTx(true);\n\n    if (shouldCompound) {\n      await compound();\n    } else {\n      await harvest();\n    }\n  };\n\n  const handleCompoundHarvestChoiceChange = e => {\n    const {\n      target: {\n        value: option\n      }\n    } = e;\n    setCompounding(option);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isVisible: poolsCollect.isOpen,\n    className: \"pools-collect-modal\",\n    handleCancel: poolsCollect.close,\n    width: 330,\n    closeIcon: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pools-collect-modal__content\",\n      children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n        className: \"pools-collect-modal__title\",\n        title: `${earningTokenSymbol} ${hasCompoundHarvestChoice ? 'Collect' : 'Harvest'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), hasCompoundHarvestChoice && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-f-c\",\n        children: [/*#__PURE__*/_jsxDEV(RadioGroup, {\n          className: \"pools-collect-modal__radio-group\",\n          buttonStyle: \"solid\",\n          defaultValue: isCompounding,\n          items: compoundHarvestChoices,\n          onChange: handleCompoundHarvestChoiceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PoolsCollectPopover, {\n          className: \"pools-collect-modal__info\",\n          symbol: earningTokenSymbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pools-collect-modal__profit-row box-f box-f-jc-sb\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-smd text-yellow\",\n          children: [shouldCompound ? 'Compounding' : 'Harvesting', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pools-collect-modal__profit text-smd text-yellow text-bold\",\n          children: [getFullDisplayBalance({\n            balance: new BigNumber(earnings),\n            decimals: earningTokenDecimals,\n            displayDecimals: 8\n          }), ' ', earningTokenSymbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"pools-collect-modal__btn\",\n        loading: pendingTx,\n        onClick: handleConfirm,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white text-bold text-smd\",\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}, \"rQNdvc8EePbNvgT5UWoDzSG8J+Y=\", false, function () {\n  return [useMst, useHarvestPool, useStakePool];\n}));\n_c3 = CollectModal;\nexport default CollectModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ModalTitle\");\n$RefreshReg$(_c2, \"CollectModal$observer\");\n$RefreshReg$(_c3, \"CollectModal\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/CollectModal/index.tsx"],"names":["React","useEffect","useState","BigNumber","classNames","observer","Button","RadioGroup","errorNotification","successNotification","Modal","PoolsCollectPopover","useHarvestPool","useStakePool","useMst","PoolFarmingMode","getFullDisplayBalance","clogError","compoundHarvestChoices","text","value","ModalTitle","className","title","CollectModal","modals","poolsCollect","options","hasCompoundHarvestChoice","farmMode","manual","isCompounding","setCompounding","Number","pendingTx","setPendingTx","close","poolId","onReward","onStake","earnings","earningTokenDecimals","earningTokenSymbol","fullBalance","shouldCompound","compound","error","harvest","handleConfirm","handleCompoundHarvestChoiceChange","e","target","option","isOpen","balance","decimals","displayDecimals"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CAEA;;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,oBAAnC;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iCAAvD;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,SAASC,qBAAT,QAAsC,oBAAtC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,OAAO,qBAAP,C,CAEA;AACA;AACA;AACA;;;AAEA,MAAMC,sBAAsB,GAAG,CAC7B;AACEC,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAD6B,EAK7B;AACED,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAL6B,CAA/B;;AAWA,MAAMC,UAA2D,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA0B;AAC5F,sBAAO;AAAK,IAAA,SAAS,EAAEnB,UAAU,CAACkB,SAAD,EAAY,gCAAZ,CAA1B;AAAA,cAA0EC;AAA1E;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;KAAMF,U;AAIN,MAAMG,YAAsB,GAAGnB,QAAQ,UAAC,MAAM;AAAA;;AAC5C,QAAM;AACJoB,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AADJ,MAEFZ,MAAM,EAFV;AAIA,QAAM;AAAEa,IAAAA;AAAF,MAAcD,YAApB;AAEA,QAAME,wBAAwB,GAAG,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,QAAT,MAAsBd,eAAe,CAACe,MAAvE;AACA,QAAM,CAACC,aAAD,EAAgBC,cAAhB,IAAkC9B,QAAQ,CAAC+B,MAAM,CAACL,wBAAD,CAAP,CAAhD;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BjC,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,WAAO,MAAM;AACXyB,MAAAA,YAAY,CAACU,KAAb;AACD,KAFD;AAGD,GALQ,EAKN,CAACV,YAAD,CALM,CAAT;AAOA,QAAMW,MAAM,GAAG,CAAAV,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEU,MAAT,KAAmB,CAAlC;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAe1B,cAAc,CAACyB,MAAD,CAAnC;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAc1B,YAAY,CAACwB,MAAD,CAAhC;AAEA,MAAI,CAACV,OAAL,EAAc,OAAO,IAAP;AAEd,QAAM;AAAEa,IAAAA,QAAF;AAAYC,IAAAA,oBAAZ;AAAkCC,IAAAA,kBAAlC;AAAsDC,IAAAA;AAAtD,MAAsEhB,OAA5E;AAEA,QAAMiB,cAAc,GAAGhB,wBAAwB,IAAIG,aAAnD;;AAEA,QAAMc,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMN,OAAO,CAACI,WAAD,EAAcF,oBAAd,CAAb;AACAhC,MAAAA,mBAAmB,CACjB,aADiB,EAEhB,QAAOiC,kBAAmB,gDAFV,CAAnB;AAIAhB,MAAAA,YAAY,CAACU,KAAb;AACD,KAPD,CAOE,OAAOU,KAAP,EAAc;AACd7B,MAAAA,SAAS,CAAC6B,KAAD,CAAT;AACAtC,MAAAA,iBAAiB,CACf,OADe,EAEf,oFAFe,CAAjB;AAID,KAbD,SAaU;AACR2B,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAjBD;;AAmBA,QAAMY,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAMT,QAAQ,EAAd;AACA7B,MAAAA,mBAAmB,CACjB,YADiB,EAEhB,QAAOiC,kBAAmB,0CAFV,CAAnB;AAIAhB,MAAAA,YAAY,CAACU,KAAb;AACD,KAPD,CAOE,OAAOU,KAAP,EAAc;AACd7B,MAAAA,SAAS,CAAC6B,KAAD,CAAT;AACAtC,MAAAA,iBAAiB,CACf,OADe,EAEf,oFAFe,CAAjB;AAID,KAbD,SAaU;AACR2B,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAjBD;;AAmBA,QAAMa,aAAa,GAAG,YAAY;AAChC;AACAb,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAIS,cAAJ,EAAoB;AAClB,YAAMC,QAAQ,EAAd;AACD,KAFD,MAEO;AACL,YAAME,OAAO,EAAb;AACD;AACF,GARD;;AAUA,QAAME,iCAAiC,GAAIC,CAAD,IAAY;AACpD,UAAM;AACJC,MAAAA,MAAM,EAAE;AAAE/B,QAAAA,KAAK,EAAEgC;AAAT;AADJ,QAEFF,CAFJ;AAGAlB,IAAAA,cAAc,CAACoB,MAAD,CAAd;AACD,GALD;;AAOA,sBACE,QAAC,KAAD;AACE,IAAA,SAAS,EAAE1B,YAAY,CAAC2B,MAD1B;AAEE,IAAA,SAAS,EAAC,qBAFZ;AAGE,IAAA,YAAY,EAAE3B,YAAY,CAACU,KAH7B;AAIE,IAAA,KAAK,EAAE,GAJT;AAKE,IAAA,SAAS,MALX;AAAA,2BAOE;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA,8BACE,QAAC,UAAD;AACE,QAAA,SAAS,EAAC,4BADZ;AAEE,QAAA,KAAK,EAAG,GAAEM,kBAAmB,IAAGd,wBAAwB,GAAG,SAAH,GAAe,SAAU;AAFnF;AAAA;AAAA;AAAA;AAAA,cADF,EAKGA,wBAAwB,iBACvB;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,SAAS,EAAC,kCADZ;AAEE,UAAA,WAAW,EAAC,OAFd;AAGE,UAAA,YAAY,EAAEG,aAHhB;AAIE,UAAA,KAAK,EAAEb,sBAJT;AAKE,UAAA,QAAQ,EAAE+B;AALZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,mBAAD;AACE,UAAA,SAAS,EAAC,2BADZ;AAEE,UAAA,MAAM,EAAEP;AAFV;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAqBE;AAAK,QAAA,SAAS,EAAC,mDAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA,qBACGE,cAAc,GAAG,aAAH,GAAmB,YADpC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,4DAAf;AAAA,qBACG5B,qBAAqB,CAAC;AACrBsC,YAAAA,OAAO,EAAE,IAAInD,SAAJ,CAAcqC,QAAd,CADY;AAErBe,YAAAA,QAAQ,EAAEd,oBAFW;AAGrBe,YAAAA,eAAe,EAAE;AAHI,WAAD,CADxB,EAKM,GALN,EAMGd,kBANH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,eAkCE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,0BAAlB;AAA6C,QAAA,OAAO,EAAER,SAAtD;AAAiE,QAAA,OAAO,EAAEc,aAA1E;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAlCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD,CApIsC;AAAA,UAGjClC,MAHiC,EAoBhBF,cApBgB,EAqBjBC,YArBiB;AAAA,GAAvC;MAAMW,Y;AAsIN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\n\n// import UnknownImg from '@/assets/img/currency/unknown.svg';\nimport { Button, RadioGroup } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { Modal } from '@/components/molecules';\nimport { PoolsCollectPopover } from '@/components/sections/Pools/Popovers';\nimport useHarvestPool from '@/hooks/pools/useHarvestPool';\nimport useStakePool from '@/hooks/pools/useStakePool';\nimport { useMst } from '@/store';\nimport { PoolFarmingMode } from '@/types';\nimport { getFullDisplayBalance } from '@/utils/formatters';\nimport { clogError } from '@/utils/logger';\n\nimport './CollectModal.scss';\n\n// interface IStakeUnstakeModal {\n//   isVisible?: boolean;\n//   handleClose: () => void;\n// }\n\nconst compoundHarvestChoices = [\n  {\n    text: 'Compound',\n    value: 1,\n  },\n  {\n    text: 'Harvest',\n    value: 0,\n  },\n];\n\nconst ModalTitle: React.FC<{ className?: string; title: string }> = ({ className, title }) => {\n  return <div className={classNames(className, 'text-smd text-bold text-yellow')}>{title}</div>;\n};\n\nconst CollectModal: React.FC = observer(() => {\n  const {\n    modals: { poolsCollect },\n  } = useMst();\n\n  const { options } = poolsCollect;\n\n  const hasCompoundHarvestChoice = options?.farmMode === PoolFarmingMode.manual;\n  const [isCompounding, setCompounding] = useState(Number(hasCompoundHarvestChoice));\n  const [pendingTx, setPendingTx] = useState(false);\n\n  useEffect(() => {\n    // for any 'location' changes with opened modal\n    return () => {\n      poolsCollect.close();\n    };\n  }, [poolsCollect]);\n\n  const poolId = options?.poolId || 0;\n\n  const { onReward } = useHarvestPool(poolId);\n  const { onStake } = useStakePool(poolId);\n\n  if (!options) return null;\n\n  const { earnings, earningTokenDecimals, earningTokenSymbol, fullBalance } = options;\n\n  const shouldCompound = hasCompoundHarvestChoice && isCompounding;\n\n  const compound = async () => {\n    try {\n      await onStake(fullBalance, earningTokenDecimals);\n      successNotification(\n        'Compounded!',\n        `Your ${earningTokenSymbol} earnings have been re-invested into the pool!`,\n      );\n      poolsCollect.close();\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  const harvest = async () => {\n    try {\n      await onReward();\n      successNotification(\n        'Harvested!',\n        `Your ${earningTokenSymbol} earnings have been sent to your wallet!`,\n      );\n      poolsCollect.close();\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  const handleConfirm = async () => {\n    // if (!options) return;\n    setPendingTx(true);\n    if (shouldCompound) {\n      await compound();\n    } else {\n      await harvest();\n    }\n  };\n\n  const handleCompoundHarvestChoiceChange = (e: any) => {\n    const {\n      target: { value: option },\n    } = e;\n    setCompounding(option);\n  };\n\n  return (\n    <Modal\n      isVisible={poolsCollect.isOpen}\n      className=\"pools-collect-modal\"\n      handleCancel={poolsCollect.close}\n      width={330}\n      closeIcon\n    >\n      <div className=\"pools-collect-modal__content\">\n        <ModalTitle\n          className=\"pools-collect-modal__title\"\n          title={`${earningTokenSymbol} ${hasCompoundHarvestChoice ? 'Collect' : 'Harvest'}`}\n        />\n        {hasCompoundHarvestChoice && (\n          <div className=\"box-f-c\">\n            <RadioGroup\n              className=\"pools-collect-modal__radio-group\"\n              buttonStyle=\"solid\"\n              defaultValue={isCompounding}\n              items={compoundHarvestChoices}\n              onChange={handleCompoundHarvestChoiceChange}\n            />\n            <PoolsCollectPopover\n              className=\"pools-collect-modal__info\"\n              symbol={earningTokenSymbol}\n            />\n          </div>\n        )}\n\n        <div className=\"pools-collect-modal__profit-row box-f box-f-jc-sb\">\n          <div className=\"text-smd text-yellow\">\n            {shouldCompound ? 'Compounding' : 'Harvesting'}:\n          </div>\n          <div className=\"pools-collect-modal__profit text-smd text-yellow text-bold\">\n            {getFullDisplayBalance({\n              balance: new BigNumber(earnings),\n              decimals: earningTokenDecimals,\n              displayDecimals: 8,\n            })}{' '}\n            {earningTokenSymbol}\n          </div>\n        </div>\n        <Button className=\"pools-collect-modal__btn\" loading={pendingTx} onClick={handleConfirm}>\n          <span className=\"text-white text-bold text-smd\">Confirm</span>\n        </Button>\n      </div>\n    </Modal>\n  );\n});\n\nexport default CollectModal;\n"]},"metadata":{},"sourceType":"module"}