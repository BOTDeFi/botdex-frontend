{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Farms/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\nimport { ItemsController } from '@/components/organisms';\nimport FarmsStakeUnstakeModal from '@/components/organisms/FarmsStakeUnstakeModal';\nimport { FarmsPreview, FarmsTable } from '@/components/sections/Farms';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { getAddress } from '@/services/web3/contractHelpers';\nimport { useFarms, usePollFarmsData } from '@/store/farms/hooks';\nimport { toBigNumber } from '@/utils';\nimport { getFarmApr } from '@/utils/apr';\nimport './Farms.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar FilterBy;\n\n(function (FilterBy) {\n  FilterBy[\"search\"] = \"search\";\n  FilterBy[\"stakedOnly\"] = \"stakedOnly\";\n  FilterBy[\"farmsType\"] = \"farmsType\";\n})(FilterBy || (FilterBy = {}));\n\nvar FarmsType;\n\n(function (FarmsType) {\n  FarmsType[\"live\"] = \"live\";\n  FarmsType[\"finished\"] = \"finished\";\n})(FarmsType || (FarmsType = {}));\n\nvar SortOptions;\n\n(function (SortOptions) {\n  SortOptions[\"hot\"] = \"Hot\";\n  SortOptions[\"apr\"] = \"APR\";\n  SortOptions[\"multiplier\"] = \"Multiplier\";\n  SortOptions[\"earned\"] = \"Earned\";\n  SortOptions[\"liquidity\"] = \"Liquidity\";\n})(SortOptions || (SortOptions = {}));\n\nconst FarmsContent = ({\n  content\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"farms__content\",\n    children: /*#__PURE__*/_jsxDEV(FarmsTable, {\n      data: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FarmsContent;\nconst Farms = observer(_c2 = _s(() => {\n  _s();\n\n  // const { farms: farmsStore } = useMst();\n  const {\n    tokenUsdPrice: refineryPrice\n  } = useRefineryUsdPrice();\n  const {\n    farms: rawFarms\n  } = useFarms();\n  const [, ...farmsWithoutFirstLpFarm] = rawFarms;\n  usePollFarmsData();\n  const [isActive, setIsActive] = useState(FarmsType.live);\n  const [sortOption, setSortOption] = useState(SortOptions.hot);\n  const farmsWithoutFirstLpFarmWithStakedValue = useMemo(() => {\n    const farmsToDisplayWithAPR = farmsWithoutFirstLpFarm.map(farm => {\n      if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n        return farm;\n      }\n\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);\n      const {\n        refineryRewardsApr,\n        lpRewardsApr\n      } = isActive ? getFarmApr(new BigNumber(String(farm.poolWeight)), new BigNumber(refineryPrice), totalLiquidity // farm.lpAddresses[ChainId.MAINNET],\n      ) : {\n        refineryRewardsApr: 0,\n        lpRewardsApr: 0\n      };\n      return { ...farm,\n        apr: refineryRewardsApr,\n        lpRewardsApr,\n        liquidity: totalLiquidity\n      };\n    });\n    return farmsToDisplayWithAPR;\n  }, [farmsWithoutFirstLpFarm, isActive, refineryPrice]); // console.log(farmsWithoutFirstLpFarmWithStakedValue);\n\n  const filterByStakedOnly = (value, isStaked) => {\n    if (!isStaked) return true; // show all\n\n    return !Number.isNaN(value.toNumber()) && value.gt(0);\n  };\n\n  const filterBySearch = (whereToFind, toBeFound) => {\n    return whereToFind.some(value => {\n      return value.toUpperCase().startsWith(toBeFound.toUpperCase());\n    });\n  };\n\n  const getFilterByFarmsType = isOpenedLiveTab => {\n    return [FilterBy.farmsType, ({\n      multiplier\n    }) => {\n      return isOpenedLiveTab && multiplier !== '0X'; // multiplier is set to 0X when farm is finished\n    }];\n  };\n\n  const getFilterByStakedOnly = useCallback(isStaked => {\n    return [FilterBy.stakedOnly, ({\n      userData\n    }) => filterByStakedOnly(toBigNumber(userData === null || userData === void 0 ? void 0 : userData.stakedBalance), isStaked)];\n  }, []);\n\n  const getFilterBySearch = value => {\n    return [FilterBy.search, ({\n      lpSymbol,\n      lpAddresses,\n      quoteToken,\n      token\n    }) => {\n      if (value.startsWith('0x')) {\n        const searchSource = [lpAddresses, quoteToken.address, token.address].map(rawAddress => getAddress(rawAddress));\n        return filterBySearch(searchSource, value);\n      } // normalize 'RP1', 'RP1-AVOOG LP' into same array presentation: ['RP1'] or ['RP1', 'AVOOG']\n\n\n      const [removedLPSymbols] = lpSymbol.split(' ');\n      const searchSource = removedLPSymbols.split('-');\n      return filterBySearch(searchSource, value);\n    }];\n  };\n\n  const [appliedFilters, setAppliedFilters] = useState(\n  /* SET DEFAULT FILTERS */\n  new Map([getFilterByFarmsType(true), getFilterByStakedOnly(false)]));\n  const applyFilters = useCallback(filters => {\n    setAppliedFilters(new Map([...appliedFilters, ...filters]));\n  }, [appliedFilters]);\n  const filter = useCallback(() => {\n    return [...appliedFilters.values()].reduce((acc, filterFunc) => {\n      return acc.filter(filterFunc);\n    }, farmsWithoutFirstLpFarmWithStakedValue);\n  }, [appliedFilters, farmsWithoutFirstLpFarmWithStakedValue]);\n  const sort = useCallback(array => {\n    let sortFunc;\n\n    switch (sortOption) {\n      case SortOptions.apr:\n        {\n          const getAprValue = farm => {\n            const apr = (farm === null || farm === void 0 ? void 0 : farm.apr) || 0;\n            const lpRewardsApr = (farm === null || farm === void 0 ? void 0 : farm.lpRewardsApr) || 0;\n            return apr + lpRewardsApr;\n          };\n\n          sortFunc = (farm1, farm2) => getAprValue(farm2) - getAprValue(farm1);\n\n          break;\n        }\n\n      case SortOptions.multiplier:\n        {\n          const getMultiplier = farm => {\n            return farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0;\n          };\n\n          sortFunc = (farm1, farm2) => getMultiplier(farm2) - getMultiplier(farm1);\n\n          break;\n        }\n\n      case SortOptions.earned:\n        {\n          const getEarnedValue = farm => {\n            return farm.userData ? Number(farm.userData.earnings) : 0;\n          };\n\n          sortFunc = (farm1, farm2) => getEarnedValue(farm2) - getEarnedValue(farm1);\n\n          break;\n        }\n\n      case SortOptions.liquidity:\n        {\n          const getLiquidity = farm => {\n            return Number(farm.liquidity);\n          };\n\n          sortFunc = (farm1, farm2) => getLiquidity(farm2) - getLiquidity(farm1);\n\n          break;\n        }\n\n      case SortOptions.hot:\n      default:\n        {\n          sortFunc = () => 0;\n\n          break;\n        }\n    }\n\n    return [...array].sort(sortFunc);\n  }, [sortOption]);\n  const filteredFarms = useMemo(() => {\n    return sort(filter());\n  }, [sort, filter]);\n\n  const handleStakedSwitchChange = isStaked => {\n    applyFilters([getFilterByStakedOnly(isStaked)]);\n  };\n\n  const handleSearch = value => {\n    applyFilters([getFilterBySearch(String(value))]);\n  };\n\n  const handleRadioGroupChange = e => {\n    // setPoolsTypeFilter(e.target.value);\n    const selectedTab = e.target.value;\n    setIsActive(selectedTab);\n    const isOpenedLiveTab = FarmsType.live === selectedTab;\n    applyFilters([getFilterByFarmsType(isOpenedLiveTab)]);\n  };\n\n  const handleSortSelectChange = selected => {\n    const {\n      value\n    } = selected;\n    setSortOption(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"farms\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(FarmsPreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ItemsController, {\n        radioGroupOptions: [{\n          text: 'Live',\n          value: FarmsType.live\n        }, {\n          text: 'Finished',\n          value: FarmsType.finished\n        }],\n        radioGroupClassName: \"farms__i-contr\",\n        searchPlaceholder: \"Search Farms\",\n        searchDelay: 300,\n        onSearchChange: handleSearch,\n        onStakedSwitchChange: handleStakedSwitchChange,\n        onRadioGroupChange: handleRadioGroupChange,\n        onSortSelectChange: handleSortSelectChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FarmsContent, {\n        content: filteredFarms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FarmsStakeUnstakeModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}, \"KdN9xOtPiTmds4W0ATdHcqCBTaU=\", false, function () {\n  return [useRefineryUsdPrice, useFarms, usePollFarmsData];\n}));\n_c3 = Farms;\nexport default Farms;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FarmsContent\");\n$RefreshReg$(_c2, \"Farms$observer\");\n$RefreshReg$(_c3, \"Farms\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Farms/index.tsx"],"names":["React","useCallback","useMemo","useState","BigNumber","observer","ItemsController","FarmsStakeUnstakeModal","FarmsPreview","FarmsTable","useRefineryUsdPrice","getAddress","useFarms","usePollFarmsData","toBigNumber","getFarmApr","FilterBy","FarmsType","SortOptions","FarmsContent","content","Farms","tokenUsdPrice","refineryPrice","farms","rawFarms","farmsWithoutFirstLpFarm","isActive","setIsActive","live","sortOption","setSortOption","hot","farmsWithoutFirstLpFarmWithStakedValue","farmsToDisplayWithAPR","map","farm","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","refineryRewardsApr","lpRewardsApr","String","poolWeight","apr","liquidity","filterByStakedOnly","value","isStaked","Number","isNaN","toNumber","gt","filterBySearch","whereToFind","toBeFound","some","toUpperCase","startsWith","getFilterByFarmsType","isOpenedLiveTab","farmsType","multiplier","getFilterByStakedOnly","stakedOnly","userData","stakedBalance","getFilterBySearch","search","lpSymbol","lpAddresses","token","searchSource","address","rawAddress","removedLPSymbols","split","appliedFilters","setAppliedFilters","Map","applyFilters","filters","filter","values","reduce","acc","filterFunc","sort","array","sortFunc","getAprValue","farm1","farm2","getMultiplier","slice","earned","getEarnedValue","earnings","getLiquidity","filteredFarms","handleStakedSwitchChange","handleSearch","handleRadioGroupChange","e","selectedTab","target","handleSortSelectChange","selected","text","finished"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport { SwitchClickEventHandler } from 'antd/lib/switch';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\n\nimport { ItemsController } from '@/components/organisms';\nimport FarmsStakeUnstakeModal from '@/components/organisms/FarmsStakeUnstakeModal';\nimport { FarmsPreview, FarmsTable } from '@/components/sections/Farms';\nimport { useRefineryUsdPrice } from '@/hooks/useTokenUsdPrice';\nimport { getAddress } from '@/services/web3/contractHelpers';\nimport { useFarms, usePollFarmsData } from '@/store/farms/hooks';\nimport { Farm, FarmWithStakedValue } from '@/types';\nimport { toBigNumber } from '@/utils';\nimport { getFarmApr } from '@/utils/apr';\n\nimport './Farms.scss';\n\ninterface IFarmsContent {\n  content: Farm[];\n}\n\nenum FilterBy {\n  search = 'search',\n  stakedOnly = 'stakedOnly',\n  farmsType = 'farmsType',\n}\ntype IFilterBy = keyof typeof FilterBy;\ntype IFilterFunc = (farm: Farm) => boolean | typeof Array.prototype.filter;\n\nenum FarmsType {\n  live = 'live',\n  finished = 'finished',\n}\ntype IFarmsType = keyof typeof FarmsType;\n\nenum SortOptions {\n  hot = 'Hot',\n  apr = 'APR',\n  multiplier = 'Multiplier',\n  earned = 'Earned',\n  liquidity = 'Liquidity',\n}\n\nconst FarmsContent: React.FC<IFarmsContent> = ({ content }) => {\n  return (\n    <div className=\"farms__content\">\n      <FarmsTable data={content} />\n    </div>\n  );\n};\n\nconst Farms: React.FC = observer(() => {\n  // const { farms: farmsStore } = useMst();\n  const { tokenUsdPrice: refineryPrice } = useRefineryUsdPrice();\n  const { farms: rawFarms } = useFarms();\n  const [, ...farmsWithoutFirstLpFarm] = rawFarms;\n  usePollFarmsData();\n  const [isActive, setIsActive] = useState<IFarmsType>(FarmsType.live);\n  const [sortOption, setSortOption] = useState(SortOptions.hot);\n\n  const farmsWithoutFirstLpFarmWithStakedValue = useMemo((): FarmWithStakedValue[] => {\n    const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsWithoutFirstLpFarm.map((farm) => {\n      if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n        return farm;\n      }\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(\n        farm.quoteToken.busdPrice,\n      );\n      const { refineryRewardsApr, lpRewardsApr } = isActive\n        ? getFarmApr(\n            new BigNumber(String(farm.poolWeight)),\n            new BigNumber(refineryPrice),\n            totalLiquidity,\n            // farm.lpAddresses[ChainId.MAINNET],\n          )\n        : { refineryRewardsApr: 0, lpRewardsApr: 0 };\n\n      return { ...farm, apr: refineryRewardsApr, lpRewardsApr, liquidity: totalLiquidity };\n    });\n\n    return farmsToDisplayWithAPR;\n  }, [farmsWithoutFirstLpFarm, isActive, refineryPrice]);\n\n  // console.log(farmsWithoutFirstLpFarmWithStakedValue);\n\n  const filterByStakedOnly = (value: BigNumber, isStaked: boolean) => {\n    if (!isStaked) return true; // show all\n    return !Number.isNaN(value.toNumber()) && value.gt(0);\n  };\n  const filterBySearch = (whereToFind: string[], toBeFound: string) => {\n    return whereToFind.some((value) => {\n      return value.toUpperCase().startsWith(toBeFound.toUpperCase());\n    });\n  };\n\n  const getFilterByFarmsType = (isOpenedLiveTab: boolean): [IFilterBy, IFilterFunc] => {\n    return [\n      FilterBy.farmsType,\n      ({ multiplier }) => {\n        return isOpenedLiveTab && multiplier !== '0X'; // multiplier is set to 0X when farm is finished\n      },\n    ];\n  };\n  const getFilterByStakedOnly = useCallback((isStaked: boolean): [IFilterBy, IFilterFunc] => {\n    return [\n      FilterBy.stakedOnly,\n      ({ userData }) => filterByStakedOnly(toBigNumber(userData?.stakedBalance), isStaked),\n    ];\n  }, []);\n\n  const getFilterBySearch = (value: string): [IFilterBy, IFilterFunc] => {\n    return [\n      FilterBy.search,\n      ({ lpSymbol, lpAddresses, quoteToken, token }) => {\n        if (value.startsWith('0x')) {\n          const searchSource = [lpAddresses, quoteToken.address, token.address].map((rawAddress) =>\n            getAddress(rawAddress),\n          );\n          return filterBySearch(searchSource, value);\n        }\n\n        // normalize 'RP1', 'RP1-AVOOG LP' into same array presentation: ['RP1'] or ['RP1', 'AVOOG']\n        const [removedLPSymbols] = lpSymbol.split(' ');\n        const searchSource = removedLPSymbols.split('-');\n        return filterBySearch(searchSource, value);\n      },\n    ];\n  };\n\n  const [appliedFilters, setAppliedFilters] = useState<Map<IFilterBy, IFilterFunc>>(\n    /* SET DEFAULT FILTERS */\n    new Map([getFilterByFarmsType(true), getFilterByStakedOnly(false)]),\n  );\n\n  const applyFilters = useCallback(\n    (filters: [IFilterBy, IFilterFunc][]) => {\n      setAppliedFilters(new Map([...appliedFilters, ...filters]));\n    },\n    [appliedFilters],\n  );\n\n  const filter = useCallback(() => {\n    return [...appliedFilters.values()].reduce((acc, filterFunc) => {\n      return acc.filter(filterFunc);\n    }, farmsWithoutFirstLpFarmWithStakedValue);\n  }, [appliedFilters, farmsWithoutFirstLpFarmWithStakedValue]);\n\n  const sort = useCallback(\n    (array: typeof farmsWithoutFirstLpFarmWithStakedValue) => {\n      let sortFunc: (farm1: typeof array[0], farm2: typeof array[0]) => number;\n      switch (sortOption) {\n        case SortOptions.apr: {\n          const getAprValue = (farm: FarmWithStakedValue) => {\n            const apr = farm?.apr || 0;\n            const lpRewardsApr = farm?.lpRewardsApr || 0;\n            return apr + lpRewardsApr;\n          };\n          sortFunc = (farm1, farm2) => getAprValue(farm2) - getAprValue(farm1);\n          break;\n        }\n        case SortOptions.multiplier: {\n          const getMultiplier = (farm: FarmWithStakedValue) => {\n            return farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0;\n          };\n          sortFunc = (farm1, farm2) => getMultiplier(farm2) - getMultiplier(farm1);\n          break;\n        }\n        case SortOptions.earned: {\n          const getEarnedValue = (farm: FarmWithStakedValue) => {\n            return farm.userData ? Number(farm.userData.earnings) : 0;\n          };\n          sortFunc = (farm1, farm2) => getEarnedValue(farm2) - getEarnedValue(farm1);\n          break;\n        }\n        case SortOptions.liquidity: {\n          const getLiquidity = (farm: FarmWithStakedValue) => {\n            return Number(farm.liquidity);\n          };\n          sortFunc = (farm1, farm2) => getLiquidity(farm2) - getLiquidity(farm1);\n          break;\n        }\n        case SortOptions.hot:\n        default: {\n          sortFunc = () => 0;\n          break;\n        }\n      }\n      return [...array].sort(sortFunc);\n    },\n    [sortOption],\n  );\n\n  const filteredFarms = useMemo(() => {\n    return sort(filter());\n  }, [sort, filter]);\n\n  const handleStakedSwitchChange: SwitchClickEventHandler = (isStaked) => {\n    applyFilters([getFilterByStakedOnly(isStaked)]);\n  };\n\n  const handleSearch = (value: string | number) => {\n    applyFilters([getFilterBySearch(String(value))]);\n  };\n\n  const handleRadioGroupChange = (e: RadioChangeEvent) => {\n    // setPoolsTypeFilter(e.target.value);\n    const selectedTab: IFarmsType = e.target.value;\n    setIsActive(selectedTab);\n    const isOpenedLiveTab = FarmsType.live === selectedTab;\n\n    applyFilters([getFilterByFarmsType(isOpenedLiveTab)]);\n  };\n\n  const handleSortSelectChange = (selected: any) => {\n    const { value } = selected;\n    setSortOption(value as SortOptions);\n  };\n\n  return (\n    <main className=\"farms\">\n      <div className=\"row\">\n        <FarmsPreview />\n        <ItemsController\n          radioGroupOptions={[\n            {\n              text: 'Live',\n              value: FarmsType.live,\n            },\n            {\n              text: 'Finished',\n              value: FarmsType.finished,\n            },\n          ]}\n          radioGroupClassName=\"farms__i-contr\"\n          searchPlaceholder=\"Search Farms\"\n          searchDelay={300}\n          onSearchChange={handleSearch}\n          onStakedSwitchChange={handleStakedSwitchChange}\n          onRadioGroupChange={handleRadioGroupChange}\n          onSortSelectChange={handleSortSelectChange}\n        />\n        <FarmsContent content={filteredFarms} />\n      </div>\n      <FarmsStakeUnstakeModal />\n    </main>\n  );\n});\n\nexport default Farms;\n"]},"metadata":{},"sourceType":"module"}