{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nconst useIntersectionObserver = () => {\n  _s();\n\n  const observerRef = useRef(null);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const checkObserverIsIntersecting = useCallback(([entry]) => {\n    setIsIntersecting(entry.isIntersecting);\n  }, []);\n  const intersectionObserver = useMemo(() => {\n    return new IntersectionObserver(checkObserverIsIntersecting, {\n      rootMargin: '0px',\n      threshold: 1\n    });\n  }, [checkObserverIsIntersecting]);\n  useEffect(() => {\n    const ref = observerRef.current;\n\n    if (!observerIsSet && ref) {\n      // console.log('observerRef.current', ref);\n      intersectionObserver.observe(ref);\n      setObserverIsSet(true);\n    }\n\n    if (observerIsSet) {\n      return () => intersectionObserver.disconnect();\n    }\n\n    return undefined;\n  }, [observerIsSet, intersectionObserver]);\n  return {\n    observerRef,\n    isIntersecting\n  };\n};\n\n_s(useIntersectionObserver, \"bJnnZNBG3qOlAqvFCE0ZhKmJ3wk=\");\n\nexport default useIntersectionObserver;","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useIntersectionObserver.ts"],"names":["useCallback","useEffect","useMemo","useRef","useState","useIntersectionObserver","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","checkObserverIsIntersecting","entry","intersectionObserver","IntersectionObserver","rootMargin","threshold","ref","current","observe","disconnect","undefined"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDC,QAAlD,QAAkE,OAAlE;;AAEA,MAAMC,uBAAuB,GAAG,MAG3B;AAAA;;AACH,QAAMC,WAAW,GAAGH,MAAM,CAAI,IAAJ,CAA1B;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAMO,2BAA2B,GAAGX,WAAW,CAAC,CAAC,CAACY,KAAD,CAAD,KAA0C;AACxFF,IAAAA,iBAAiB,CAACE,KAAK,CAACH,cAAP,CAAjB;AACD,GAF8C,EAE5C,EAF4C,CAA/C;AAIA,QAAMI,oBAAoB,GAAGX,OAAO,CAAC,MAAM;AACzC,WAAO,IAAIY,oBAAJ,CAAyBH,2BAAzB,EAAsD;AAC3DI,MAAAA,UAAU,EAAE,KAD+C;AAE3DC,MAAAA,SAAS,EAAE;AAFgD,KAAtD,CAAP;AAID,GALmC,EAKjC,CAACL,2BAAD,CALiC,CAApC;AAOAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,GAAG,GAAGX,WAAW,CAACY,OAAxB;;AACA,QAAI,CAACX,aAAD,IAAkBU,GAAtB,EAA2B;AACzB;AACAJ,MAAAA,oBAAoB,CAACM,OAArB,CAA6BF,GAA7B;AACAT,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AAED,QAAID,aAAJ,EAAmB;AACjB,aAAO,MAAMM,oBAAoB,CAACO,UAArB,EAAb;AACD;;AAED,WAAOC,SAAP;AACD,GAbQ,EAaN,CAACd,aAAD,EAAgBM,oBAAhB,CAbM,CAAT;AAeA,SAAO;AAAEP,IAAAA,WAAF;AAAeG,IAAAA;AAAf,GAAP;AACD,CAnCD;;GAAMJ,uB;;AAqCN,eAAeA,uBAAf","sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nconst useIntersectionObserver = <T extends Element>(): {\n  observerRef: React.RefObject<T>;\n  isIntersecting: boolean;\n} => {\n  const observerRef = useRef<T>(null);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  const checkObserverIsIntersecting = useCallback(([entry]: IntersectionObserverEntry[]) => {\n    setIsIntersecting(entry.isIntersecting);\n  }, []);\n\n  const intersectionObserver = useMemo(() => {\n    return new IntersectionObserver(checkObserverIsIntersecting, {\n      rootMargin: '0px',\n      threshold: 1,\n    });\n  }, [checkObserverIsIntersecting]);\n\n  useEffect(() => {\n    const ref = observerRef.current;\n    if (!observerIsSet && ref) {\n      // console.log('observerRef.current', ref);\n      intersectionObserver.observe(ref);\n      setObserverIsSet(true);\n    }\n\n    if (observerIsSet) {\n      return () => intersectionObserver.disconnect();\n    }\n\n    return undefined;\n  }, [observerIsSet, intersectionObserver]);\n\n  return { observerRef, isIntersecting };\n};\n\nexport default useIntersectionObserver;\n"]},"metadata":{},"sourceType":"module"}