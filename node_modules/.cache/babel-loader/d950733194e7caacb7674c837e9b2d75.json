{"ast":null,"code":"export let PoolFarmingMode;\n\n(function (PoolFarmingMode) {\n  PoolFarmingMode[\"earn\"] = \"earn\";\n  PoolFarmingMode[\"manual\"] = \"manual\";\n  PoolFarmingMode[\"auto\"] = \"auto\";\n})(PoolFarmingMode || (PoolFarmingMode = {}));\n\nexport let DetailsBadgeType;\n\n(function (DetailsBadgeType) {\n  DetailsBadgeType[\"core\"] = \"core\";\n})(DetailsBadgeType || (DetailsBadgeType = {}));\n\nexport let Precisions;\n\n(function (Precisions) {\n  Precisions[Precisions[\"token\"] = 10] = \"token\";\n  Precisions[Precisions[\"shortToken\"] = 4] = \"shortToken\";\n  Precisions[Precisions[\"fiat\"] = 2] = \"fiat\";\n})(Precisions || (Precisions = {}));","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/types/index.ts"],"names":["PoolFarmingMode","DetailsBadgeType","Precisions"],"mappings":"AAmFA,WAAYA,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAsDZ,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAkDZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\nimport { Transaction } from 'web3-core';\n\nexport type Awaited<T> = T extends PromiseLike<infer U> ? U : T;\n\nexport interface IToken {\n  logoURI?: string;\n  name: string;\n  symbol: string;\n  address: string;\n  chainId?: number;\n  decimals: number | string;\n}\n\nexport interface ITokens {\n  from: {\n    token: IToken | undefined;\n    amount: number | string;\n  };\n  to: {\n    token: IToken | undefined;\n    amount: number | string;\n  };\n}\n\nexport interface ISettings {\n  slippage: IActiveSlippage;\n  txDeadline: number;\n  txDeadlineUtc: number;\n}\n\nexport interface IActiveSlippage {\n  type: 'btn' | 'input';\n  value: number;\n}\n\nexport interface ITeamCard {\n  place: number;\n  name: string;\n  details: string;\n  members: number;\n  win: number;\n  img: string;\n  id: number | string;\n}\n\nexport interface IRecentTx {\n  type: string;\n  address: string;\n  from: {\n    symbol: string;\n    value: number | string;\n    img?: string;\n  };\n  to: {\n    symbol: string;\n    value: number | string;\n    img?: string;\n  };\n}\n\nexport interface ILiquidityInfo {\n  address: string;\n  token0: {\n    address: string;\n    symbol: string;\n    balance: number | string;\n    rate: number | string;\n    decimals: number | string;\n    deposited?: number | string;\n    receive?: number | string;\n  };\n  token1: {\n    address: string;\n    symbol: string;\n    balance: number | string;\n    rate: number | string;\n    decimals: number | string;\n    deposited?: number | string;\n    receive?: number | string;\n  };\n}\n\nexport enum PoolFarmingMode {\n  earn = 'earn',\n  manual = 'manual',\n  auto = 'auto',\n}\n\nexport type IPoolFarmingMode = keyof typeof PoolFarmingMode;\n\nexport interface IReceipt extends Transaction {\n  status: boolean;\n}\n\nexport interface Address extends Record<string, string> {\n  // [key: string]: string;\n  '97': string;\n}\nexport interface Token {\n  symbol: string;\n  address: Address;\n  decimals?: number;\n  projectLink?: string;\n  logoURI?: string;\n  busdPrice?: string;\n}\n\nexport interface PoolConfig {\n  id: number;\n  earningToken: Token;\n  stakingToken: Token;\n  contractAddress: Address;\n  tokenPerBlock: string;\n  isFinished?: boolean;\n  enableEmergencyWithdraw?: boolean;\n}\n\ninterface PoolUserData {\n  allowance: BigNumber;\n  stakingTokenBalance: BigNumber;\n  stakedBalance: BigNumber;\n  pendingReward: BigNumber;\n}\n\nexport interface Pool extends PoolConfig {\n  totalStaked?: BigNumber;\n  stakingLimit?: BigNumber;\n  startBlock?: number;\n  endBlock?: number;\n  apr?: number;\n  stakingTokenPrice?: number;\n  earningTokenPrice?: number;\n  isAutoVault?: boolean;\n  userData?: PoolUserData;\n}\n\nexport enum DetailsBadgeType {\n  core = 'core',\n}\nexport type IDetailsBadgeType = keyof typeof DetailsBadgeType;\n\nexport interface FarmConfig {\n  pid: number;\n  lpSymbol: string;\n  lpAddresses: Address;\n  token: Token;\n  quoteToken: Token;\n  multiplier?: string;\n  categoryType: IDetailsBadgeType;\n  // dual?: {\n  //   rewardPerBlock: number;\n  //   earnLabel: string;\n  //   endBlock: number;\n  // };\n}\n\nexport type SerializedBigNumber = string;\n\ninterface FarmUserData {\n  allowance: string;\n  tokenBalance: string;\n  stakedBalance: string;\n  earnings: string;\n}\n\nexport interface FarmWithoutUserData extends FarmConfig {\n  tokenAmountMc?: SerializedBigNumber;\n  quoteTokenAmountMc?: SerializedBigNumber;\n  tokenAmountTotal?: SerializedBigNumber;\n  quoteTokenAmountTotal?: SerializedBigNumber;\n  lpTotalInQuoteToken?: SerializedBigNumber;\n  lpTotalSupply?: SerializedBigNumber;\n  tokenPriceVsQuote?: SerializedBigNumber;\n  poolWeight?: SerializedBigNumber;\n}\n\nexport interface Farm extends FarmWithoutUserData {\n  userData?: FarmUserData;\n}\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number;\n  lpRewardsApr?: number;\n  liquidity?: BigNumber;\n}\n\nexport enum Precisions {\n  token = 10,\n  shortToken = 4,\n  fiat = 2, // 0.3244 USD = 0.32 USD, 100.1222 RUB = 100.12 RUB\n}\n\nexport type TimestampSeconds = number;\n"]},"metadata":{},"sourceType":"module"}