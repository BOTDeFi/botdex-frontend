{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakingSection/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { toJS } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport { Button } from '@/components/atoms';\nimport { useApprovePool, useCheckVaultApprovalStatus, useVaultApprove } from '@/hooks/pools/useApprove';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContractData } from '@/services/web3/contractHelpers';\nimport { useMst } from '@/store';\nimport { toBigNumber } from '@/utils';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StakingSection = observer(_c = _s(({\n  pool,\n  stakedValue,\n  titleClassName,\n  tokenSymbol,\n  buttonProps\n}) => {\n  _s();\n\n  const {\n    connect,\n    metamaskService\n  } = useWalletConnectorContext();\n  const {\n    user,\n    modals\n  } = useMst();\n  const {\n    isAutoVault = false,\n    userData,\n    id,\n    stakingToken,\n    isFinished\n  } = pool;\n  const [pendingTx, setPendingTx] = useState(false); // Data for regular approval buttons\n\n  const allowance = toBigNumber(userData === null || userData === void 0 ? void 0 : userData.allowance);\n  const needsApproval = !allowance.gt(0); // Data for AUTO_VAULT approval buttons\n\n  const {\n    isVaultApproved,\n    setLastUpdated\n  } = useCheckVaultApprovalStatus();\n  let handleApprove;\n\n  if (isAutoVault) {\n    handleApprove = useVaultApprove(setLastUpdated).handleApprove;\n  } else {\n    const [, erc20Abi] = getContractData('ERC20');\n    const stakingTokenContract = metamaskService.getContract(getAddress(stakingToken.address), erc20Abi);\n    handleApprove = useApprovePool(stakingTokenContract, id).handleApprove;\n  } // Not staked && Pool ended\n\n\n  if (isFinished) return null;\n\n  const approveHandler = async () => {\n    setPendingTx(true);\n    await handleApprove();\n    setPendingTx(false);\n  };\n\n  const hasConnectedWallet = Boolean(user.address);\n  const types = [{\n    condition: !hasConnectedWallet,\n    title: 'Start Earning',\n    handler: connect,\n    text: 'Unlock Wallet'\n  }, {\n    condition: hasConnectedWallet && isAutoVault && !isVaultApproved,\n    title: 'Start Staking',\n    handler: approveHandler,\n    text: 'Enable',\n    extraButtonProps: {\n      disabled: pendingTx\n    }\n  }, {\n    condition: hasConnectedWallet && !isAutoVault && needsApproval,\n    title: 'Start Staking',\n    handler: approveHandler,\n    text: 'Enable',\n    extraButtonProps: {\n      disabled: pendingTx\n    }\n  }, {\n    condition: hasConnectedWallet && (!needsApproval || isVaultApproved) && !stakedValue.toNumber(),\n    title: `Stake ${tokenSymbol}`,\n    handler: () => {\n      modals.stakeUnstake.open({\n        isStaking: true,\n        stakingToken: toJS(stakingToken),\n        isAutoVault: Boolean(isAutoVault),\n        maxStakingValue: ((userData === null || userData === void 0 ? void 0 : userData.stakingTokenBalance) || BIG_ZERO).toNumber(),\n        poolId: id\n      });\n    },\n    text: 'Stake'\n  }];\n  const template = types.find(({\n    condition\n  }) => condition);\n\n  if (template) {\n    const {\n      title,\n      handler,\n      text,\n      extraButtonProps\n    } = template;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames(titleClassName, 'text-black'),\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, { ...buttonProps,\n        ...extraButtonProps,\n        onClick: handler,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-smd text-white text-bold\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return null;\n}, \"ZEkGQ8wQc24BKVjxZjWwwLM8pCs=\", false, function () {\n  return [useWalletConnectorContext, useMst, useCheckVaultApprovalStatus, useVaultApprove, useApprovePool];\n}));\n_c2 = StakingSection;\nexport default StakingSection;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StakingSection$observer\");\n$RefreshReg$(_c2, \"StakingSection\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakingSection/index.tsx"],"names":["React","useState","classNames","toJS","observer","Button","useApprovePool","useCheckVaultApprovalStatus","useVaultApprove","useWalletConnectorContext","getAddress","getContractData","useMst","toBigNumber","BIG_ZERO","StakingSection","pool","stakedValue","titleClassName","tokenSymbol","buttonProps","connect","metamaskService","user","modals","isAutoVault","userData","id","stakingToken","isFinished","pendingTx","setPendingTx","allowance","needsApproval","gt","isVaultApproved","setLastUpdated","handleApprove","erc20Abi","stakingTokenContract","getContract","address","approveHandler","hasConnectedWallet","Boolean","types","condition","title","handler","text","extraButtonProps","disabled","toNumber","stakeUnstake","open","isStaking","maxStakingValue","stakingTokenBalance","poolId","template","find"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport classNames from 'classnames';\nimport { toJS } from 'mobx';\nimport { observer } from 'mobx-react-lite';\n\nimport { Button } from '@/components/atoms';\nimport { ButtonProps } from '@/components/atoms/Button';\nimport {\n  useApprovePool,\n  useCheckVaultApprovalStatus,\n  useVaultApprove,\n} from '@/hooks/pools/useApprove';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContractData } from '@/services/web3/contractHelpers';\nimport { useMst } from '@/store';\nimport { ITokenMobx } from '@/store/Models/Modals/StakeUnstakeModal';\nimport { Pool } from '@/types';\nimport { toBigNumber } from '@/utils';\nimport { BIG_ZERO } from '@/utils/constants';\n\nconst StakingSection: React.FC<{\n  pool: Pool;\n  stakedValue: BigNumber;\n  titleClassName?: string;\n  tokenSymbol: string;\n  buttonProps: Omit<ButtonProps, 'onClick'>;\n}> = observer(({ pool, stakedValue, titleClassName, tokenSymbol, buttonProps }) => {\n  const { connect, metamaskService } = useWalletConnectorContext();\n  const { user, modals } = useMst();\n  const { isAutoVault = false, userData, id, stakingToken, isFinished } = pool;\n  const [pendingTx, setPendingTx] = useState(false);\n\n  // Data for regular approval buttons\n  const allowance = toBigNumber(userData?.allowance);\n  const needsApproval = !allowance.gt(0);\n\n  // Data for AUTO_VAULT approval buttons\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus();\n\n  let handleApprove: () => Promise<void>;\n  if (isAutoVault) {\n    handleApprove = useVaultApprove(setLastUpdated).handleApprove;\n  } else {\n    const [, erc20Abi] = getContractData('ERC20');\n    const stakingTokenContract = metamaskService.getContract(\n      getAddress(stakingToken.address),\n      erc20Abi,\n    );\n    handleApprove = useApprovePool(stakingTokenContract, id).handleApprove;\n  }\n\n  // Not staked && Pool ended\n  if (isFinished) return null;\n\n  const approveHandler = async () => {\n    setPendingTx(true);\n    await handleApprove();\n    setPendingTx(false);\n  };\n\n  const hasConnectedWallet = Boolean(user.address);\n  const types = [\n    {\n      condition: !hasConnectedWallet,\n      title: 'Start Earning',\n      handler: connect,\n      text: 'Unlock Wallet',\n    },\n    {\n      condition: hasConnectedWallet && isAutoVault && !isVaultApproved,\n      title: 'Start Staking',\n      handler: approveHandler,\n      text: 'Enable',\n      extraButtonProps: {\n        disabled: pendingTx,\n      },\n    },\n    {\n      condition: hasConnectedWallet && !isAutoVault && needsApproval,\n      title: 'Start Staking',\n      handler: approveHandler,\n      text: 'Enable',\n      extraButtonProps: {\n        disabled: pendingTx,\n      },\n    },\n    {\n      condition:\n        hasConnectedWallet && (!needsApproval || isVaultApproved) && !stakedValue.toNumber(),\n      title: `Stake ${tokenSymbol}`,\n      handler: () => {\n        modals.stakeUnstake.open({\n          isStaking: true,\n          stakingToken: toJS(stakingToken) as ITokenMobx,\n          isAutoVault: Boolean(isAutoVault),\n          maxStakingValue: (userData?.stakingTokenBalance || BIG_ZERO).toNumber(),\n          poolId: id,\n        });\n      },\n      text: 'Stake',\n    },\n  ];\n\n  const template = types.find(({ condition }) => condition);\n\n  if (template) {\n    const { title, handler, text, extraButtonProps } = template;\n    return (\n      <>\n        <div className={classNames(titleClassName, 'text-black')}>{title}</div>\n        <Button {...buttonProps} {...extraButtonProps} onClick={handler}>\n          <span className=\"text-smd text-white text-bold\">{text}</span>\n        </Button>\n      </>\n    );\n  }\n\n  return null;\n});\n\nexport default StakingSection;\n"]},"metadata":{},"sourceType":"module"}