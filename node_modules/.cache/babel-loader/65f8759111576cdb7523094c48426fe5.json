{"ast":null,"code":"import { gql } from '@apollo/client';\nimport { apolloClient, getRfPairsContext } from '@/services/apolloClient';\nexport const GET_BALANCE_BY_BLOCK = gql`\n  query GetBalanceOnBlock($user_address: String!, $block_number: BigInt!) {\n    balanceHistories(\n      first: 1\n      orderBy: BlockNumber\n      orderDirection: desc\n      where: { BlockNumber_lte: $block_number, User: $user_address }\n    ) {\n      TotalBalance\n      BlockNumber\n      User {\n        id\n        TotalBalance\n      }\n    }\n  }\n`; // /**\n//  * Get user balance by userAddress and block (snapshot).\n//  */\n// export const useGetBalanceByBlock = (\n//   options?: UseLazyQueryOptions,\n// ): {\n//   getBalanceByBlock: (userAddress: string, block: number | string) => void;\n//   options: ReturnType<typeof useLazyQuery>;\n// } => {\n//   const [func, responseData] = useLazyQuery(GET_BALANCE_BY_BLOCK, options);\n//   const getBalanceByBlock = useCallback(\n//     (userAddress: string, block: number | string) => {\n//       func({\n//         ...getRfPairsContext(),\n//         variables: {\n//           user_address: userAddress,\n//           block_number: block,\n//         },\n//       });\n//     },\n//     [func],\n//   );\n//   return { getBalanceByBlock, options: [func, responseData] };\n// };\n\nexport const fetchUserBalanceByBlock = (userAddress, block) => {\n  return apolloClient.query({ ...getRfPairsContext(),\n    query: GET_BALANCE_BY_BLOCK,\n    variables: {\n      user_address: userAddress,\n      block_number: block\n    }\n  });\n};\nexport const fetchUserBalancesByBlock = async (addresses, blocks) => {\n  const promises = addresses.map((address, index) => {\n    // .toLowerCase() to prevent TheGraph's errors (it returns nothing when address is not in lowerCase)\n    if (!blocks[index]) return Promise.resolve(null);\n    return fetchUserBalanceByBlock(address.toLowerCase(), Number(blocks[index]));\n  });\n  const results = await Promise.allSettled(promises);\n  return results;\n}; // export const selectUserBalancesByBlock = (\n//   results: Awaited<ReturnType<typeof fetchUserBalancesByBlock>>,\n// ) => {\n//   return results.map((item) => {\n//     if (item.status !== 'fulfilled') return item;\n//     const { value } = item;\n//     if (value === null || value.data) return null;\n//     return value.data.balanceHistories[0];\n//   });\n// };\n\nexport const selectTotalUserBalancesByBlock = results => {\n  return results.map(item => {\n    if (item.status !== 'fulfilled') return undefined;\n    const {\n      value\n    } = item;\n    if (!value) return null;\n    const [userData] = value.data.balanceHistories;\n    return userData ? userData.User : null;\n  }).filter(item => {\n    if (item) return true;\n    return false;\n  });\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/useGetBalanceByBlock.ts"],"names":["gql","apolloClient","getRfPairsContext","GET_BALANCE_BY_BLOCK","fetchUserBalanceByBlock","userAddress","block","query","variables","user_address","block_number","fetchUserBalancesByBlock","addresses","blocks","promises","map","address","index","Promise","resolve","toLowerCase","Number","results","allSettled","selectTotalUserBalancesByBlock","item","status","undefined","value","userData","data","balanceHistories","User","filter"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,SAASC,YAAT,EAAuBC,iBAAvB,QAAgD,yBAAhD;AAGA,OAAO,MAAMC,oBAAoB,GAAGH,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,C,CAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAeA,OAAO,MAAMI,uBAAuB,GAAG,CAACC,WAAD,EAAsBC,KAAtB,KAAwC;AAC7E,SAAOL,YAAY,CAACM,KAAb,CAAqD,EAC1D,GAAGL,iBAAiB,EADsC;AAE1DK,IAAAA,KAAK,EAAEJ,oBAFmD;AAG1DK,IAAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAEJ,WADL;AAETK,MAAAA,YAAY,EAAEJ;AAFL;AAH+C,GAArD,CAAP;AAQD,CATM;AAWP,OAAO,MAAMK,wBAAwB,GAAG,OACtCC,SADsC,EAEtCC,MAFsC,KAGnC;AACH,QAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAc,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjD;AACA,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAX,EAAoB,OAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACpB,WAAOf,uBAAuB,CAACY,OAAO,CAACI,WAAR,EAAD,EAAwBC,MAAM,CAACR,MAAM,CAACI,KAAD,CAAP,CAA9B,CAA9B;AACD,GAJgB,CAAjB;AAMA,QAAMK,OAAO,GAAG,MAAMJ,OAAO,CAACK,UAAR,CAAmBT,QAAnB,CAAtB;AAEA,SAAOQ,OAAP;AACD,CAbM,C,CAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,8BAA8B,GACzCF,OAD4C,IAEzB;AACnB,SAAOA,OAAO,CACXP,GADI,CACCU,IAAD,IAAU;AACb,QAAIA,IAAI,CAACC,MAAL,KAAgB,WAApB,EAAiC,OAAOC,SAAP;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAYH,IAAlB;AACA,QAAI,CAACG,KAAL,EAAY,OAAO,IAAP;AACZ,UAAM,CAACC,QAAD,IAAaD,KAAK,CAACE,IAAN,CAAWC,gBAA9B;AACA,WAAOF,QAAQ,GAAGA,QAAQ,CAACG,IAAZ,GAAmB,IAAlC;AACD,GAPI,EAQJC,MARI,CAQIR,IAAD,IAAU;AAChB,QAAIA,IAAJ,EAAU,OAAO,IAAP;AACV,WAAO,KAAP;AACD,GAXI,CAAP;AAYD,CAfM","sourcesContent":["import { gql } from '@apollo/client';\n\nimport { apolloClient, getRfPairsContext } from '@/services/apolloClient';\nimport { Awaited } from '@/types';\n\nexport const GET_BALANCE_BY_BLOCK = gql`\n  query GetBalanceOnBlock($user_address: String!, $block_number: BigInt!) {\n    balanceHistories(\n      first: 1\n      orderBy: BlockNumber\n      orderDirection: desc\n      where: { BlockNumber_lte: $block_number, User: $user_address }\n    ) {\n      TotalBalance\n      BlockNumber\n      User {\n        id\n        TotalBalance\n      }\n    }\n  }\n`;\n// /**\n//  * Get user balance by userAddress and block (snapshot).\n//  */\n// export const useGetBalanceByBlock = (\n//   options?: UseLazyQueryOptions,\n// ): {\n//   getBalanceByBlock: (userAddress: string, block: number | string) => void;\n//   options: ReturnType<typeof useLazyQuery>;\n// } => {\n//   const [func, responseData] = useLazyQuery(GET_BALANCE_BY_BLOCK, options);\n\n//   const getBalanceByBlock = useCallback(\n//     (userAddress: string, block: number | string) => {\n//       func({\n//         ...getRfPairsContext(),\n//         variables: {\n//           user_address: userAddress,\n//           block_number: block,\n//         },\n//       });\n//     },\n//     [func],\n//   );\n\n//   return { getBalanceByBlock, options: [func, responseData] };\n// };\n\ninterface IUserBalance {\n  id: string;\n  TotalBalance: string;\n}\n\ninterface IFetchUserBalanceByBlockResponse {\n  balanceHistories: Array<{\n    BlockNumber: string;\n    TotalBalance: string;\n    User: IUserBalance;\n  }>;\n}\n\nexport const fetchUserBalanceByBlock = (userAddress: string, block: number) => {\n  return apolloClient.query<IFetchUserBalanceByBlockResponse>({\n    ...getRfPairsContext(),\n    query: GET_BALANCE_BY_BLOCK,\n    variables: {\n      user_address: userAddress,\n      block_number: block,\n    },\n  });\n};\n\nexport const fetchUserBalancesByBlock = async (\n  addresses: string[],\n  blocks: (number | string | null)[],\n) => {\n  const promises = addresses.map((address, index) => {\n    // .toLowerCase() to prevent TheGraph's errors (it returns nothing when address is not in lowerCase)\n    if (!blocks[index]) return Promise.resolve(null);\n    return fetchUserBalanceByBlock(address.toLowerCase(), Number(blocks[index]));\n  });\n\n  const results = await Promise.allSettled(promises);\n\n  return results;\n};\n\n// export const selectUserBalancesByBlock = (\n//   results: Awaited<ReturnType<typeof fetchUserBalancesByBlock>>,\n// ) => {\n//   return results.map((item) => {\n//     if (item.status !== 'fulfilled') return item;\n//     const { value } = item;\n//     if (value === null || value.data) return null;\n//     return value.data.balanceHistories[0];\n//   });\n// };\nexport const selectTotalUserBalancesByBlock = (\n  results: Awaited<ReturnType<typeof fetchUserBalancesByBlock>>,\n): IUserBalance[] => {\n  return results\n    .map((item) => {\n      if (item.status !== 'fulfilled') return undefined;\n      const { value } = item;\n      if (!value) return null;\n      const [userData] = value.data.balanceHistories;\n      return userData ? userData.User : null;\n    })\n    .filter((item) => {\n      if (item) return true;\n      return false;\n    }) as IUserBalance[];\n};\n"]},"metadata":{},"sourceType":"module"}