{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport useRefresh from '@/hooks/useRefresh';\nimport { useWalletConnectorContext } from '../MetamaskConnect';\nimport { GAS_PRICE_GWEI } from './configHelpers';\nexport function useGasPrice() {\n  _s();\n\n  const {\n    metamaskService\n  } = useWalletConnectorContext();\n  return metamaskService.usedNetwork === 'mainnet' ? GAS_PRICE_GWEI.default : GAS_PRICE_GWEI.testnet;\n}\n/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param options An options object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n */\n\n_s(useGasPrice, \"2LlBmNjF4vgIIf+cijAi4IBxyUg=\", false, function () {\n  return [useWalletConnectorContext];\n});\n\nexport function useCallWithGasPrice() {\n  _s2();\n\n  const gasPrice = useGasPrice();\n  const {\n    metamaskService: {\n      walletAddress: from\n    }\n  } = useWalletConnectorContext();\n  const callWithGasPrice = useCallback(async ({\n    contract,\n    methodName,\n    methodArgs = [],\n    options\n  }) => {\n    const contractMethod = contract.methods[methodName];\n    const overrideOptions = {\n      from: (options === null || options === void 0 ? void 0 : options.from) ? options.from : from,\n      gasPrice: (options === null || options === void 0 ? void 0 : options.gasPrice) ? options.gasPrice : gasPrice,\n      gas: (options === null || options === void 0 ? void 0 : options.gas) ? options.gas : 30000\n    };\n    const tx = await contractMethod(...methodArgs).send(overrideOptions);\n    return tx;\n  }, [gasPrice, from]);\n  return {\n    callWithGasPrice\n  };\n}\n\n_s2(useCallWithGasPrice, \"B3DP7boVMdKsCrSbog9lobkP0s4=\", false, function () {\n  return [useGasPrice, useWalletConnectorContext];\n});\n\nexport const useBlock = () => {\n  _s3();\n\n  const {\n    metamaskService\n  } = useWalletConnectorContext();\n  const [block, setBlock] = useState(0);\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const getBlock = async () => {\n      const currentBlock = await metamaskService.web3Provider.eth.getBlockNumber();\n      setBlock(currentBlock);\n    };\n\n    getBlock();\n  }, [metamaskService.web3Provider.eth, fastRefresh]);\n  return [block];\n};\n\n_s3(useBlock, \"Z89+GYT7elhExc6TaIUl65/TFec=\", false, function () {\n  return [useWalletConnectorContext, useRefresh];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/hooks.ts"],"names":["useCallback","useEffect","useState","useRefresh","useWalletConnectorContext","GAS_PRICE_GWEI","useGasPrice","metamaskService","usedNetwork","default","testnet","useCallWithGasPrice","gasPrice","walletAddress","from","callWithGasPrice","contract","methodName","methodArgs","options","contractMethod","methods","overrideOptions","gas","tx","send","useBlock","block","setBlock","fastRefresh","getBlock","currentBlock","web3Provider","eth","getBlockNumber"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,OAAOC,UAAP,MAAuB,oBAAvB;AAGA,SAASC,yBAAT,QAA0C,oBAA1C;AAEA,SAASC,cAAT,QAA+B,iBAA/B;AAeA,OAAO,SAASC,WAAT,GAA+B;AAAA;;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAsBH,yBAAyB,EAArD;AACA,SAAOG,eAAe,CAACC,WAAhB,KAAgC,SAAhC,GACHH,cAAc,CAACI,OADZ,GAEHJ,cAAc,CAACK,OAFnB;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;GAbgBJ,W;UACcF,yB;;;AAa9B,OAAO,SAASO,mBAAT,GAA+B;AAAA;;AACpC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AACJC,IAAAA,eAAe,EAAE;AAAEM,MAAAA,aAAa,EAAEC;AAAjB;AADb,MAEFV,yBAAyB,EAF7B;AAIA,QAAMW,gBAAgB,GAAGf,WAAW,CAClC,OAAO;AAAEgB,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA,UAAU,GAAG,EAArC;AAAyCC,IAAAA;AAAzC,GAAP,KAA8D;AAC5D,UAAMC,cAAc,GAAGJ,QAAQ,CAACK,OAAT,CAAiBJ,UAAjB,CAAvB;AACA,UAAMK,eAAe,GAAG;AACtBR,MAAAA,IAAI,EAAE,CAAAK,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEL,IAAT,IAAgBK,OAAO,CAACL,IAAxB,GAA+BA,IADf;AAEtBF,MAAAA,QAAQ,EAAE,CAAAO,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEP,QAAT,IAAoBO,OAAO,CAACP,QAA5B,GAAuCA,QAF3B;AAGtBW,MAAAA,GAAG,EAAE,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,GAAT,IAAeJ,OAAO,CAACI,GAAvB,GAA6B;AAHZ,KAAxB;AAKA,UAAMC,EAAY,GAAG,MAAMJ,cAAc,CAAC,GAAGF,UAAJ,CAAd,CAA8BO,IAA9B,CAAmCH,eAAnC,CAA3B;AAEA,WAAOE,EAAP;AACD,GAXiC,EAYlC,CAACZ,QAAD,EAAWE,IAAX,CAZkC,CAApC;AAeA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD;;IAtBeJ,mB;UACGL,W,EAGbF,yB;;;AAoBN,OAAO,MAAMsB,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAAEnB,IAAAA;AAAF,MAAsBH,yBAAyB,EAArD;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAE2B,IAAAA;AAAF,MAAkB1B,UAAU,EAAlC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,QAAQ,GAAG,YAAY;AAC3B,YAAMC,YAAY,GAAG,MAAMxB,eAAe,CAACyB,YAAhB,CAA6BC,GAA7B,CAAiCC,cAAjC,EAA3B;AACAN,MAAAA,QAAQ,CAACG,YAAD,CAAR;AACD,KAHD;;AAKAD,IAAAA,QAAQ;AACT,GAPQ,EAON,CAACvB,eAAe,CAACyB,YAAhB,CAA6BC,GAA9B,EAAmCJ,WAAnC,CAPM,CAAT;AASA,SAAO,CAACF,KAAD,CAAP;AACD,CAfM;;IAAMD,Q;UACiBtB,yB,EAEJD,U","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Contract } from 'web3-eth-contract';\n\nimport useRefresh from '@/hooks/useRefresh';\nimport { IReceipt } from '@/types';\n\nimport { useWalletConnectorContext } from '../MetamaskConnect';\n\nimport { GAS_PRICE_GWEI } from './configHelpers';\n\ninterface ICallWithGasPrice {\n  (params: {\n    contract: Contract;\n    methodName: string;\n    methodArgs?: any[];\n    options?: {\n      from?: string;\n      gasPrice?: string;\n      gas?: number;\n    };\n  }): Promise<IReceipt>;\n}\n\nexport function useGasPrice(): string {\n  const { metamaskService } = useWalletConnectorContext();\n  return metamaskService.usedNetwork === 'mainnet'\n    ? GAS_PRICE_GWEI.default\n    : GAS_PRICE_GWEI.testnet;\n}\n\n/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param options An options object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n */\nexport function useCallWithGasPrice() {\n  const gasPrice = useGasPrice();\n  const {\n    metamaskService: { walletAddress: from },\n  } = useWalletConnectorContext();\n\n  const callWithGasPrice = useCallback<ICallWithGasPrice>(\n    async ({ contract, methodName, methodArgs = [], options }) => {\n      const contractMethod = contract.methods[methodName];\n      const overrideOptions = {\n        from: options?.from ? options.from : from,\n        gasPrice: options?.gasPrice ? options.gasPrice : gasPrice,\n        gas: options?.gas ? options.gas : 30000,\n      };\n      const tx: IReceipt = await contractMethod(...methodArgs).send(overrideOptions);\n\n      return tx;\n    },\n    [gasPrice, from],\n  );\n\n  return { callWithGasPrice };\n}\n\nexport const useBlock = () => {\n  const { metamaskService } = useWalletConnectorContext();\n  const [block, setBlock] = useState(0);\n  const { fastRefresh } = useRefresh();\n\n  useEffect(() => {\n    const getBlock = async () => {\n      const currentBlock = await metamaskService.web3Provider.eth.getBlockNumber();\n      setBlock(currentBlock);\n    };\n\n    getBlock();\n  }, [metamaskService.web3Provider.eth, fastRefresh]);\n\n  return [block];\n};\n"]},"metadata":{},"sourceType":"module"}