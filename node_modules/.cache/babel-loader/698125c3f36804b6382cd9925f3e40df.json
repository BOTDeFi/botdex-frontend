{"ast":null,"code":"/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/* eslint-disable no-console */\nimport { SHOW_LOGS } from '@/config';\nexport const clog = (...data) => {\n  if (SHOW_LOGS) {\n    console.log(...data);\n  }\n};\nexport const clogData = (text, ...data) => {\n  if (SHOW_LOGS) {\n    console.log(text, ...data);\n  }\n};\nexport const clogGroup = (name, end) => {\n  if (SHOW_LOGS) {\n    if (end) {\n      console.groupEnd();\n      return;\n    }\n\n    console.group(name);\n  }\n};\nexport const clogError = (...errors) => {\n  if (SHOW_LOGS) console.error(...errors);\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/logger/index.ts"],"names":["SHOW_LOGS","clog","data","console","log","clogData","text","clogGroup","name","end","groupEnd","group","clogError","errors","error"],"mappings":"AAAA;;AACA;AACA,SAASA,SAAT,QAA0B,UAA1B;AAEA,OAAO,MAAMC,IAAI,GAAG,CAAC,GAAGC,IAAJ,KAAwB;AAC1C,MAAIF,SAAJ,EAAe;AACbG,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAGF,IAAf;AACD;AACF,CAJM;AAMP,OAAO,MAAMG,QAAQ,GAAG,CAACC,IAAD,EAAe,GAAGJ,IAAlB,KAAsC;AAC5D,MAAIF,SAAJ,EAAe;AACbG,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAAkB,GAAGJ,IAArB;AACD;AACF,CAJM;AAMP,OAAO,MAAMK,SAAS,GAAG,CAACC,IAAD,EAAeC,GAAf,KAAuC;AAC9D,MAAIT,SAAJ,EAAe;AACb,QAAIS,GAAJ,EAAS;AACPN,MAAAA,OAAO,CAACO,QAAR;AACA;AACD;;AACDP,IAAAA,OAAO,CAACQ,KAAR,CAAcH,IAAd;AACD;AACF,CARM;AAUP,OAAO,MAAMI,SAAS,GAAG,CAAC,GAAGC,MAAJ,KAA0B;AACjD,MAAIb,SAAJ,EAAeG,OAAO,CAACW,KAAR,CAAc,GAAGD,MAAjB;AAChB,CAFM","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable no-console */\nimport { SHOW_LOGS } from '@/config';\n\nexport const clog = (...data: any): void => {\n  if (SHOW_LOGS) {\n    console.log(...data);\n  }\n};\n\nexport const clogData = (text: string, ...data: any): void => {\n  if (SHOW_LOGS) {\n    console.log(text, ...data);\n  }\n};\n\nexport const clogGroup = (name: string, end?: boolean): void => {\n  if (SHOW_LOGS) {\n    if (end) {\n      console.groupEnd();\n      return;\n    }\n    console.group(name);\n  }\n};\n\nexport const clogError = (...errors: any): void => {\n  if (SHOW_LOGS) console.error(...errors);\n};\n"]},"metadata":{},"sourceType":"module"}