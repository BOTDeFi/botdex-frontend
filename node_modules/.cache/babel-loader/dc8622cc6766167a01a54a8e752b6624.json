{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useUnstakeFarm } from '@/hooks/farms/useUnstakeFarm';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { BIG_TEN } from '@/utils/constants';\nconst gasOptions = {\n  gas: 300000\n};\nexport const useSmartRefinerUnstake = smartRefinerInitContract => {\n  _s();\n\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const smartRefinerUnstake = useCallback(async (amount, decimals = 18) => {\n    const value = new BigNumber(amount).times(BIG_TEN.pow(decimals)).toFixed();\n    const tx = await callWithGasPrice({\n      contract: smartRefinerInitContract,\n      methodName: 'withdraw',\n      methodArgs: [value],\n      options: gasOptions\n    });\n    return tx.status;\n  }, [callWithGasPrice, smartRefinerInitContract]);\n  return {\n    smartRefinerUnstake\n  };\n};\n\n_s(useSmartRefinerUnstake, \"xpUMLtSxPcisKFobtfUOXXyNcNw=\", false, function () {\n  return [useCallWithGasPrice];\n});\n\nconst useUnstakePool = poolId => {\n  _s2();\n\n  const {\n    metamaskService\n  } = useWalletConnectorContext();\n  const {\n    user,\n    pools\n  } = useMst();\n  const [foundPool] = poolsConfig.filter(pool => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(getAddress(foundPool.contractAddress), SmartRefinerInitializableAbi);\n  const {\n    smartRefinerUnstake\n  } = useSmartRefinerUnstake(smartRefinerInitContract);\n  const masterRefinerContract = getContract('MASTER_REFINER');\n  const {\n    unstakeFarm\n  } = useUnstakeFarm(masterRefinerContract);\n  const handleUnstake = useCallback(async (amount, decimals) => {\n    if (poolId === 0) {\n      await unstakeFarm(0, amount);\n    } else {\n      await smartRefinerUnstake(amount, decimals);\n    }\n\n    pools.updateUserStakedBalance(poolId, user.address);\n    pools.updateUserBalance(poolId, user.address);\n    pools.updateUserPendingReward(poolId, user.address);\n  }, [poolId, pools, user.address, smartRefinerUnstake, unstakeFarm]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s2(useUnstakePool, \"f0ZnXY5LnhwzwHFFc6TIl/gum6s=\", false, function () {\n  return [useWalletConnectorContext, useMst, useSmartRefinerUnstake, useUnstakeFarm];\n});\n\nexport default useUnstakePool;\nexport const useNonVaultUnstake = (poolId, onFinally) => {\n  _s3();\n\n  const {\n    onUnstake\n  } = useUnstakePool(poolId);\n  const nonVaultUnstake = useCallback(async (valueToUnstake, stakingTokenDecimals, stakingTokenSymbol = '') => {\n    try {\n      await onUnstake(valueToUnstake, stakingTokenDecimals);\n      successNotification('Unstaked!', `Your ${stakingTokenSymbol} earnings have also been harvested to your wallet!`);\n    } catch (e) {\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      onFinally();\n    }\n  }, [onUnstake, onFinally]);\n  return {\n    nonVaultUnstake\n  };\n};\n\n_s3(useNonVaultUnstake, \"Wygesv+986Y6cdmr10FRV5i+YiA=\", false, function () {\n  return [useUnstakePool];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUnstakePool.ts"],"names":["useCallback","BigNumber","errorNotification","successNotification","pools","poolsConfig","SmartRefinerInitializable","SmartRefinerInitializableAbi","useUnstakeFarm","useWalletConnectorContext","getAddress","getContract","useCallWithGasPrice","useMst","BIG_TEN","gasOptions","gas","useSmartRefinerUnstake","smartRefinerInitContract","callWithGasPrice","smartRefinerUnstake","amount","decimals","value","times","pow","toFixed","tx","contract","methodName","methodArgs","options","status","useUnstakePool","poolId","metamaskService","user","foundPool","filter","pool","id","contractAddress","masterRefinerContract","unstakeFarm","handleUnstake","updateUserStakedBalance","address","updateUserBalance","updateUserPendingReward","onUnstake","useNonVaultUnstake","onFinally","nonVaultUnstake","valueToUnstake","stakingTokenDecimals","stakingTokenSymbol","e"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useUnstakeFarm } from '@/hooks/farms/useUnstakeFarm';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { BIG_TEN } from '@/utils/constants';\n\nconst gasOptions = {\n  gas: 300000,\n};\n\nexport const useSmartRefinerUnstake = (smartRefinerInitContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const smartRefinerUnstake = useCallback(\n    async (amount: string, decimals = 18) => {\n      const value = new BigNumber(amount).times(BIG_TEN.pow(decimals)).toFixed();\n      const tx = await callWithGasPrice({\n        contract: smartRefinerInitContract,\n        methodName: 'withdraw',\n        methodArgs: [value],\n        options: gasOptions,\n      });\n      return tx.status;\n    },\n    [callWithGasPrice, smartRefinerInitContract],\n  );\n\n  return { smartRefinerUnstake };\n};\n\nconst useUnstakePool = (poolId: number) => {\n  const { metamaskService } = useWalletConnectorContext();\n  const { user, pools } = useMst();\n\n  const [foundPool] = poolsConfig.filter((pool) => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n  const { smartRefinerUnstake } = useSmartRefinerUnstake(smartRefinerInitContract);\n\n  const masterRefinerContract = getContract('MASTER_REFINER');\n  const { unstakeFarm } = useUnstakeFarm(masterRefinerContract);\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (poolId === 0) {\n        await unstakeFarm(0, amount);\n      } else {\n        await smartRefinerUnstake(amount, decimals);\n      }\n      pools.updateUserStakedBalance(poolId, user.address);\n      pools.updateUserBalance(poolId, user.address);\n      pools.updateUserPendingReward(poolId, user.address);\n    },\n    [poolId, pools, user.address, smartRefinerUnstake, unstakeFarm],\n  );\n\n  return { onUnstake: handleUnstake };\n};\n\nexport default useUnstakePool;\n\nexport const useNonVaultUnstake = (poolId: number, onFinally: () => void) => {\n  const { onUnstake } = useUnstakePool(poolId);\n\n  const nonVaultUnstake = useCallback(\n    async (valueToUnstake: string, stakingTokenDecimals: number, stakingTokenSymbol = '') => {\n      try {\n        await onUnstake(valueToUnstake, stakingTokenDecimals);\n        successNotification(\n          'Unstaked!',\n          `Your ${stakingTokenSymbol} earnings have also been harvested to your wallet!`,\n        );\n      } catch (e) {\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [onUnstake, onFinally],\n  );\n\n  return { nonVaultUnstake };\n};\n"]},"metadata":{},"sourceType":"module"}