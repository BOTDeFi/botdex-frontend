{"ast":null,"code":"/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\nimport { listItem } from 'mdast-util-to-markdown/lib/handle/list-item.js';\n/** @type {FromMarkdownExtension} */\n\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n};\n/** @type {ToMarkdownExtension} */\n\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{\n    atBreak: true,\n    character: '-',\n    after: '[:|-]'\n  }],\n  handlers: {\n    listItem: listItemWithTaskListItem\n  }\n};\n/** @type {FromMarkdownHandle} */\n\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  this.stack[this.stack.length - 2].checked = token.type === 'taskListCheckValueChecked';\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2];\n  /** @type {Paragraph} */\n  // @ts-expect-error: must be true.\n\n  const node = this.stack[this.stack.length - 1];\n  /** @type {BlockContent[]} */\n  // @ts-expect-error: check whether `parent` is a `listItem` later.\n\n  const siblings = parent.children;\n  const head = node.children[0];\n  let index = -1;\n  /** @type {Paragraph|undefined} */\n\n  let firstParaghraph;\n\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean' && head && head.type === 'text') {\n    while (++index < siblings.length) {\n      const sibling = siblings[index];\n\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling;\n        break;\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1);\n\n      if (head.value.length === 0) {\n        node.children.shift();\n      } else {\n        // @ts-expect-error: must be true.\n        head.position.start.column++; // @ts-expect-error: must be true.\n\n        head.position.start.offset++; // @ts-expect-error: must be true.\n\n        node.position.start = Object.assign({}, head.position.start);\n      }\n    }\n  }\n\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\n\n\nfunction listItemWithTaskListItem(node, parent, context) {\n  const head = node.children[0];\n  let value = listItem(node, parent, context);\n\n  if (typeof node.checked === 'boolean' && head && head.type === 'paragraph') {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n\n  return value;\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n\n  function check($0) {\n    return $0 + '[' + (node.checked ? 'x' : ' ') + '] ';\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-gfm-task-list-item/index.js"],"names":["listItem","gfmTaskListItemFromMarkdown","exit","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","unsafe","atBreak","character","after","handlers","listItemWithTaskListItem","token","stack","length","checked","type","parent","node","siblings","children","head","index","firstParaghraph","sibling","value","slice","shift","position","start","column","offset","Object","assign","context","replace","check","$0"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  this.stack[this.stack.length - 2].checked =\n    token.type === 'taskListCheckValueChecked'\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n  /** @type {Paragraph} */\n  // @ts-expect-error: must be true.\n  const node = this.stack[this.stack.length - 1]\n  /** @type {BlockContent[]} */\n  // @ts-expect-error: check whether `parent` is a `listItem` later.\n  const siblings = parent.children\n  const head = node.children[0]\n  let index = -1\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      const sibling = siblings[index]\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else {\n        // @ts-expect-error: must be true.\n        head.position.start.column++\n        // @ts-expect-error: must be true.\n        head.position.start.offset++\n        // @ts-expect-error: must be true.\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context) {\n  const head = node.children[0]\n  let value = listItem(node, parent, context)\n\n  if (typeof node.checked === 'boolean' && head && head.type === 'paragraph') {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + '[' + (node.checked ? 'x' : ' ') + '] '\n  }\n}\n"]},"metadata":{},"sourceType":"module"}