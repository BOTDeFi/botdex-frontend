{"ast":null,"code":"import { contracts } from '@/config';\nimport { metamaskService } from '../MetamaskConnect';\nexport const getContractData = name => {\n  const contractData = contracts[name];\n  return [contractData.ADDRESS, contractData.ABI];\n};\nexport const getContractAddress = name => {\n  return contracts[name].ADDRESS;\n};\nexport const getContract = name => {\n  const [address, abi] = getContractData(name);\n  return metamaskService.getContract(address, abi);\n}; // export const getRefineryVaultContractMethodCallFee = () => {\n//   const contract = getContract('REFINERY_VAULT');\n//   return contract.methods.callFee();\n// };\n\nexport const getAddress = address => {\n  const chainId = metamaskService.usedChain;\n  return address[Number(chainId)];\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/contractHelpers.ts"],"names":["contracts","metamaskService","getContractData","name","contractData","ADDRESS","ABI","getContractAddress","getContract","address","abi","getAddress","chainId","usedChain","Number"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AAGA,SAASC,eAAT,QAAgC,oBAAhC;AASA,OAAO,MAAMC,eAAe,GAAIC,IAAD,IAAqD;AAClF,QAAMC,YAAY,GAAGJ,SAAS,CAACG,IAAD,CAA9B;AACA,SAAO,CAACC,YAAY,CAACC,OAAd,EAAuBD,YAAY,CAACE,GAApC,CAAP;AACD,CAHM;AAKP,OAAO,MAAMC,kBAAkB,GAAIJ,IAAD,IAAqB;AACrD,SAAQH,SAAS,CAACG,IAAD,CAAV,CAAmCE,OAA1C;AACD,CAFM;AAIP,OAAO,MAAMG,WAAW,GAAIL,IAAD,IAAqB;AAC9C,QAAM,CAACM,OAAD,EAAUC,GAAV,IAAiBR,eAAe,CAACC,IAAD,CAAtC;AACA,SAAOF,eAAe,CAACO,WAAhB,CAA4BC,OAA5B,EAAqCC,GAArC,CAAP;AACD,CAHM,C,CAKP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAIF,OAAD,IAA8B;AACtD,QAAMG,OAAO,GAAGX,eAAe,CAACY,SAAhC;AACA,SAAOJ,OAAO,CAACK,MAAM,CAACF,OAAD,CAAP,CAAd;AACD,CAHM","sourcesContent":["import { contracts } from '@/config';\nimport { Address } from '@/types';\n\nimport { metamaskService } from '../MetamaskConnect';\n\nexport type IContract = keyof typeof contracts;\n\nexport interface IContractData {\n  ADDRESS: string;\n  ABI: [];\n}\n\nexport const getContractData = (name: IContract): [string, IContractData['ABI']] => {\n  const contractData = contracts[name] as IContractData;\n  return [contractData.ADDRESS, contractData.ABI];\n};\n\nexport const getContractAddress = (name: IContract) => {\n  return (contracts[name] as IContractData).ADDRESS;\n};\n\nexport const getContract = (name: IContract) => {\n  const [address, abi] = getContractData(name) as [string, []];\n  return metamaskService.getContract(address, abi);\n};\n\n// export const getRefineryVaultContractMethodCallFee = () => {\n//   const contract = getContract('REFINERY_VAULT');\n//   return contract.methods.callFee();\n// };\n\nexport const getAddress = (address: Address): string => {\n  const chainId = metamaskService.usedChain;\n  return address[Number(chainId)];\n};\n"]},"metadata":{},"sourceType":"module"}