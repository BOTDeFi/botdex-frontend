{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { farms as farmsConfig } from '@/config/farms';\nimport useRefresh from '@/hooks/useRefresh';\nimport { toBigNumber } from '@/utils';\nimport { useMst } from '..';\nexport const useFarms = () => {\n  _s();\n\n  const {\n    farms\n  } = useMst();\n  return {\n    farms: farms.data.slice()\n  };\n};\n\n_s(useFarms, \"+27KqVw+0dp5ybKnv56eV72lDYQ=\", false, function () {\n  return [useMst];\n});\n\nexport const usePollFarmsData = () => {\n  _s2();\n\n  const {\n    slowRefresh\n  } = useRefresh();\n  const {\n    user,\n    farms: farmsStore\n  } = useMst();\n  useEffect(() => {\n    // const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsConfig.map(farmToFetch => farmToFetch.pid);\n    farmsStore.fetchFarmsPublicDataAsync(pids);\n\n    if (user.address) {\n      farmsStore.fetchFarmUserDataAsync(user.address, pids);\n    }\n  }, [farmsStore, user.address, slowRefresh]);\n};\n\n_s2(usePollFarmsData, \"0UNsdFNl0dOqWGAUAP//aUd3To4=\", false, function () {\n  return [useRefresh, useMst];\n});\n\nexport const useFarmUserData = farm => {\n  var _farm$userData, _farm$userData2, _farm$userData3, _farm$userData4;\n\n  return {\n    allowance: toBigNumber((_farm$userData = farm.userData) === null || _farm$userData === void 0 ? void 0 : _farm$userData.allowance),\n    tokenBalance: toBigNumber((_farm$userData2 = farm.userData) === null || _farm$userData2 === void 0 ? void 0 : _farm$userData2.tokenBalance),\n    stakedBalance: toBigNumber((_farm$userData3 = farm.userData) === null || _farm$userData3 === void 0 ? void 0 : _farm$userData3.stakedBalance),\n    earnings: toBigNumber((_farm$userData4 = farm.userData) === null || _farm$userData4 === void 0 ? void 0 : _farm$userData4.earnings)\n  };\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/farms/hooks.ts"],"names":["useEffect","farms","farmsConfig","useRefresh","toBigNumber","useMst","useFarms","data","slice","usePollFarmsData","slowRefresh","user","farmsStore","pids","map","farmToFetch","pid","fetchFarmsPublicDataAsync","address","fetchFarmUserDataAsync","useFarmUserData","farm","allowance","userData","tokenBalance","stakedBalance","earnings"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,KAAK,IAAIC,WAAlB,QAAqC,gBAArC;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AAEA,SAASC,WAAT,QAA4B,SAA5B;AAEA,SAASC,MAAT,QAAuB,IAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAyB;AAAA;;AAC/C,QAAM;AAAEL,IAAAA;AAAF,MAAYI,MAAM,EAAxB;AAEA,SAAO;AAAEJ,IAAAA,KAAK,EAAEA,KAAK,CAACM,IAAN,CAAWC,KAAX;AAAT,GAAP;AACD,CAJM;;GAAMF,Q;UACOD,M;;;AAKpB,OAAO,MAAMI,gBAAgB,GAAG,MAAM;AAAA;;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAkBP,UAAU,EAAlC;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQV,IAAAA,KAAK,EAAEW;AAAf,MAA8BP,MAAM,EAA1C;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMa,IAAI,GAAGX,WAAW,CAACY,GAAZ,CAAiBC,WAAD,IAAiBA,WAAW,CAACC,GAA7C,CAAb;AAEAJ,IAAAA,UAAU,CAACK,yBAAX,CAAqCJ,IAArC;;AAEA,QAAIF,IAAI,CAACO,OAAT,EAAkB;AAChBN,MAAAA,UAAU,CAACO,sBAAX,CAAkCR,IAAI,CAACO,OAAvC,EAAgDL,IAAhD;AACD;AACF,GATQ,EASN,CAACD,UAAD,EAAaD,IAAI,CAACO,OAAlB,EAA2BR,WAA3B,CATM,CAAT;AAUD,CAdM;;IAAMD,gB;UACaN,U,EACYE,M;;;AActC,OAAO,MAAMe,eAAe,GAAIC,IAAD,IAAgB;AAAA;;AAC7C,SAAO;AACLC,IAAAA,SAAS,EAAElB,WAAW,mBAACiB,IAAI,CAACE,QAAN,mDAAC,eAAeD,SAAhB,CADjB;AAELE,IAAAA,YAAY,EAAEpB,WAAW,oBAACiB,IAAI,CAACE,QAAN,oDAAC,gBAAeC,YAAhB,CAFpB;AAGLC,IAAAA,aAAa,EAAErB,WAAW,oBAACiB,IAAI,CAACE,QAAN,oDAAC,gBAAeE,aAAhB,CAHrB;AAILC,IAAAA,QAAQ,EAAEtB,WAAW,oBAACiB,IAAI,CAACE,QAAN,oDAAC,gBAAeG,QAAhB;AAJhB,GAAP;AAMD,CAPM","sourcesContent":["import { useEffect } from 'react';\n\nimport { farms as farmsConfig } from '@/config/farms';\nimport useRefresh from '@/hooks/useRefresh';\nimport { Farm } from '@/types';\nimport { toBigNumber } from '@/utils';\n\nimport { useMst } from '..';\n\nexport const useFarms = (): { farms: Farm[] } => {\n  const { farms } = useMst();\n\n  return { farms: farms.data.slice() as Farm[] };\n};\n\nexport const usePollFarmsData = () => {\n  const { slowRefresh } = useRefresh();\n  const { user, farms: farmsStore } = useMst();\n\n  useEffect(() => {\n    // const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsConfig.map((farmToFetch) => farmToFetch.pid);\n\n    farmsStore.fetchFarmsPublicDataAsync(pids);\n\n    if (user.address) {\n      farmsStore.fetchFarmUserDataAsync(user.address, pids);\n    }\n  }, [farmsStore, user.address, slowRefresh]);\n};\n\nexport const useFarmUserData = (farm: Farm) => {\n  return {\n    allowance: toBigNumber(farm.userData?.allowance),\n    tokenBalance: toBigNumber(farm.userData?.tokenBalance),\n    stakedBalance: toBigNumber(farm.userData?.stakedBalance),\n    earnings: toBigNumber(farm.userData?.earnings),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}