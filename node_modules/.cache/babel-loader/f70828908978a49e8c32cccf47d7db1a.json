{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { SNAPSHOT_SPACE } from '@/config/constants/dao';\nimport { getSnapshotContext } from '@/services/apolloClient';\nexport const GET_PROPOSALS_PREVIEW = gql`\n  query GetProposalsPreview($first: Int!, $skip: Int!, $space: String!) {\n    proposals(\n      first: $first\n      skip: $skip\n      orderBy: \"end\"\n      orderDirection: desc\n      where: {\n        space_in: [$space]\n        # state: \"closed\"\n      }\n    ) {\n      id\n      title\n      # body\n      # choices\n      # start\n      # end\n      # snapshot\n      state\n      # author\n      # space {\n      #   id\n      #   name\n      # }\n      created\n    }\n  }\n`;\n/**\n * Get list of the proposals' previews.\n */\n\nexport const useGetProposalsPreview = options => {\n  _s();\n\n  const [func, responseData] = useLazyQuery(GET_PROPOSALS_PREVIEW, options);\n  const getProposalsPreview = useCallback((first = 20, skip = 0, space = SNAPSHOT_SPACE) => {\n    func({ ...getSnapshotContext(),\n      variables: {\n        first,\n        skip,\n        space\n      }\n    });\n  }, [func]);\n  return {\n    getProposalsPreview,\n    options: [func, responseData]\n  };\n};\n\n_s(useGetProposalsPreview, \"GZLI+WNNnC1YPmSzDRlssQ1n6mg=\", false, function () {\n  return [useLazyQuery];\n});\n\nexport const transformGetProposalsPreview = data => {\n  return data.proposals.map(proposal => {\n    const {\n      state,\n      ...newData\n    } = proposal;\n    return { ...newData,\n      status: state\n    };\n  });\n};\nexport const groupProposalsPreviewByStatus = items => {\n  const map = {};\n  items.forEach(it => {\n    const {\n      status\n    } = it;\n\n    if (map[status]) {\n      map[status].push(it);\n    } else {\n      map[status] = [it];\n    }\n  });\n  return {\n    map,\n    keys: Object.keys(map)\n  };\n};\nexport const sortByCreated = ({\n  created: created1\n}, {\n  created: created2\n}) => {\n  return created2 - created1;\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposalsPreview.ts"],"names":["useCallback","gql","useLazyQuery","SNAPSHOT_SPACE","getSnapshotContext","GET_PROPOSALS_PREVIEW","useGetProposalsPreview","options","func","responseData","getProposalsPreview","first","skip","space","variables","transformGetProposalsPreview","data","proposals","map","proposal","state","newData","status","groupProposalsPreviewByStatus","items","forEach","it","push","keys","Object","sortByCreated","created","created1","created2"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,GAAT,EAAgDC,YAAhD,QAAoE,gBAApE;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAyBA,OAAO,MAAMC,qBAAqB,GAAGJ,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA5BO;AA8BP;AACA;AACA;;AACA,OAAO,MAAMK,sBAAsB,GACjCC,OADoC,IAKjC;AAAA;;AACH,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBP,YAAY,CAGvCG,qBAHuC,EAGhBE,OAHgB,CAAzC;AAKA,QAAMG,mBAAmB,GAAGV,WAAW,CACrC,CAACW,KAAK,GAAG,EAAT,EAAaC,IAAI,GAAG,CAApB,EAAuBC,KAAK,GAAGV,cAA/B,KAAkD;AAChDK,IAAAA,IAAI,CAAC,EACH,GAAGJ,kBAAkB,EADlB;AAEHU,MAAAA,SAAS,EAAE;AACTH,QAAAA,KADS;AAETC,QAAAA,IAFS;AAGTC,QAAAA;AAHS;AAFR,KAAD,CAAJ;AAQD,GAVoC,EAWrC,CAACL,IAAD,CAXqC,CAAvC;AAcA,SAAO;AAAEE,IAAAA,mBAAF;AAAuBH,IAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,YAAP;AAAhC,GAAP;AACD,CA1BM;;GAAMH,sB;UAMkBJ,Y;;;AAsB/B,OAAO,MAAMa,4BAA4B,GACvCC,IAD0C,IAEpB;AACtB,SAAOA,IAAI,CAACC,SAAL,CAAeC,GAAf,CAAoBC,QAAD,IAAc;AACtC,UAAM;AAAEC,MAAAA,KAAF;AAAS,SAAGC;AAAZ,QAAwBF,QAA9B;AACA,WAAO,EACL,GAAGE,OADE;AAELC,MAAAA,MAAM,EAAEF;AAFH,KAAP;AAID,GANM,CAAP;AAOD,CAVM;AAYP,OAAO,MAAMG,6BAA6B,GAAIC,KAAD,IAA8B;AACzE,QAAMN,GAAsC,GAAG,EAA/C;AACAM,EAAAA,KAAK,CAACC,OAAN,CAAeC,EAAD,IAAQ;AACpB,UAAM;AAAEJ,MAAAA;AAAF,QAAaI,EAAnB;;AACA,QAAIR,GAAG,CAACI,MAAD,CAAP,EAAiB;AACfJ,MAAAA,GAAG,CAACI,MAAD,CAAH,CAAYK,IAAZ,CAAiBD,EAAjB;AACD,KAFD,MAEO;AACLR,MAAAA,GAAG,CAACI,MAAD,CAAH,GAAc,CAACI,EAAD,CAAd;AACD;AACF,GAPD;AAQA,SAAO;AAAER,IAAAA,GAAF;AAAOU,IAAAA,IAAI,EAAEC,MAAM,CAACD,IAAP,CAAYV,GAAZ;AAAb,GAAP;AACD,CAXM;AAaP,OAAO,MAAMY,aAAa,GAAG,CAC3B;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAD2B,EAE3B;AAAED,EAAAA,OAAO,EAAEE;AAAX,CAF2B,KAGhB;AACX,SAAOA,QAAQ,GAAGD,QAAlB;AACD,CALM","sourcesContent":["import { useCallback } from 'react';\nimport { gql, LazyQueryHookOptions, QueryTuple, useLazyQuery } from '@apollo/client';\n\nimport { SNAPSHOT_SPACE } from '@/config/constants/dao';\nimport { getSnapshotContext } from '@/services/apolloClient';\nimport { TimestampSeconds } from '@/types';\n\nimport { ProposalStatus } from './types';\n\nexport interface IProposalPreviewRaw {\n  id: string;\n  title: string;\n  state: ProposalStatus;\n  created: TimestampSeconds;\n}\nexport interface IGetProposalsPreviewkResponse {\n  proposals: IProposalPreviewRaw[];\n}\nexport interface IGetProposalsPreviewVariables {\n  first: number;\n  skip: number;\n  space: string;\n}\n\nexport interface IProposalPreview extends Omit<IProposalPreviewRaw, 'state'> {\n  status: ProposalStatus;\n}\nexport type IProposalsPreview = IProposalPreview[];\n\nexport const GET_PROPOSALS_PREVIEW = gql`\n  query GetProposalsPreview($first: Int!, $skip: Int!, $space: String!) {\n    proposals(\n      first: $first\n      skip: $skip\n      orderBy: \"end\"\n      orderDirection: desc\n      where: {\n        space_in: [$space]\n        # state: \"closed\"\n      }\n    ) {\n      id\n      title\n      # body\n      # choices\n      # start\n      # end\n      # snapshot\n      state\n      # author\n      # space {\n      #   id\n      #   name\n      # }\n      created\n    }\n  }\n`;\n\n/**\n * Get list of the proposals' previews.\n */\nexport const useGetProposalsPreview = (\n  options?: LazyQueryHookOptions<IGetProposalsPreviewkResponse, IGetProposalsPreviewVariables>,\n): {\n  getProposalsPreview: (first?: number, skip?: number, space?: string) => void;\n  options: QueryTuple<IGetProposalsPreviewkResponse, IGetProposalsPreviewVariables>;\n} => {\n  const [func, responseData] = useLazyQuery<\n    IGetProposalsPreviewkResponse,\n    IGetProposalsPreviewVariables\n  >(GET_PROPOSALS_PREVIEW, options);\n\n  const getProposalsPreview = useCallback(\n    (first = 20, skip = 0, space = SNAPSHOT_SPACE) => {\n      func({\n        ...getSnapshotContext(),\n        variables: {\n          first,\n          skip,\n          space,\n        },\n      });\n    },\n    [func],\n  );\n\n  return { getProposalsPreview, options: [func, responseData] };\n};\n\nexport const transformGetProposalsPreview = (\n  data: IGetProposalsPreviewkResponse,\n): IProposalsPreview => {\n  return data.proposals.map((proposal) => {\n    const { state, ...newData } = proposal;\n    return {\n      ...newData,\n      status: state,\n    };\n  });\n};\n\nexport const groupProposalsPreviewByStatus = (items: IProposalsPreview) => {\n  const map: Record<string, IProposalsPreview> = {};\n  items.forEach((it) => {\n    const { status } = it;\n    if (map[status]) {\n      map[status].push(it);\n    } else {\n      map[status] = [it];\n    }\n  });\n  return { map, keys: Object.keys(map) };\n};\n\nexport const sortByCreated = (\n  { created: created1 }: { created: TimestampSeconds },\n  { created: created2 }: { created: TimestampSeconds },\n): number => {\n  return created2 - created1;\n};\n"]},"metadata":{},"sourceType":"module"}