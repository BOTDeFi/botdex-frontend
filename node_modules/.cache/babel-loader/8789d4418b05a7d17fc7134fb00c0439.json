{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport { BIG_TEN } from './constants';\n/**\n * @param amount 1 (`decimals` = 18)\n * @returns 1000000000000000000 (=`amount` * 10 ** `decimals`)\n */\n\nexport const getDecimalAmount = (amount, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals));\n};\n/**\n * @param decimalAmount 1000000000000000000 (`decimals` = 18)\n * @returns 1 (=`decimalAmount` / 10 ** `decimals`)\n */\n\nexport const getBalanceAmountBN = (decimalAmount, decimals = 18) => {\n  return new BigNumber(decimalAmount).dividedBy(BIG_TEN.pow(decimals));\n};\n/**\n * @param decimalAmount 1000000000000000000 (`decimals` = 18)\n * @returns 1 (=`decimalAmount` / 10 ** `decimals`)\n */\n\nexport const getBalanceAmount = (decimalAmount, decimals = 18) => {\n  return getBalanceAmountBN(decimalAmount, decimals).toNumber();\n};\nexport const getFullDisplayBalance = params => {\n  const {\n    balance,\n    decimals = 18,\n    displayDecimals\n  } = params;\n  const ret = getBalanceAmount(balance, decimals);\n  return typeof displayDecimals === 'number' ? ret.toFixed(displayDecimals) : ret;\n};\nexport const numberWithCommas = number => {\n  const parts = number.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n};\nexport function feeFormatter(fee, maxValue = 100, noDataDummy = '###') {\n  if (fee === null || fee === undefined) return noDataDummy;\n  return fee / maxValue;\n}\nexport const loadingDataFormatter = (value, options = {}) => {\n  const {\n    noDataDummy = '###',\n    ...otherOptions\n  } = options;\n  if (value === null || value === undefined) return noDataDummy;\n  return getFullDisplayBalance({\n    balance: BigNumber.isBigNumber(value) ? value : new BigNumber(value),\n    ...otherOptions // decimals: options?.decimals,\n    // displayDecimals: options?.\n\n  }); // return getBalanceAmount(BigNumber.isBigNumber(value) ? value : new BigNumber(value));\n};\nexport const addressShortener = (address, charsCountToShow = 10) => {\n  const startCharsCount = Math.floor(charsCountToShow / 2) + 1;\n  const lastCharsCount = Math.floor(charsCountToShow / 2) - 1;\n  const addressAsArray = address.split('');\n  addressAsArray.splice(startCharsCount, address.length - (startCharsCount + lastCharsCount), '...');\n  return addressAsArray.join('');\n};\nexport const ipfsShortener = (ipfsHash, charsCountToShow = 6) => {\n  return `#${ipfsHash.slice(0, charsCountToShow)}`;\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/formatters.ts"],"names":["BigNumber","BIG_TEN","getDecimalAmount","amount","decimals","times","pow","getBalanceAmountBN","decimalAmount","dividedBy","getBalanceAmount","toNumber","getFullDisplayBalance","params","balance","displayDecimals","ret","toFixed","numberWithCommas","number","parts","toString","split","replace","join","feeFormatter","fee","maxValue","noDataDummy","undefined","loadingDataFormatter","value","options","otherOptions","isBigNumber","addressShortener","address","charsCountToShow","startCharsCount","Math","floor","lastCharsCount","addressAsArray","splice","length","ipfsShortener","ipfsHash","slice"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAAoBC,QAAQ,GAAG,EAA/B,KAAiD;AAC/E,SAAO,IAAIJ,SAAJ,CAAcG,MAAd,EAAsBE,KAAtB,CAA4BJ,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAA5B,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;;AACA,OAAO,MAAMG,kBAAkB,GAAG,CAACC,aAAD,EAA2BJ,QAAQ,GAAG,EAAtC,KAAwD;AACxF,SAAO,IAAIJ,SAAJ,CAAcQ,aAAd,EAA6BC,SAA7B,CAAuCR,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAAvC,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;;AACA,OAAO,MAAMM,gBAAgB,GAAG,CAACF,aAAD,EAA2BJ,QAAQ,GAAG,EAAtC,KAAqD;AACnF,SAAOG,kBAAkB,CAACC,aAAD,EAAgBJ,QAAhB,CAAlB,CAA4CO,QAA5C,EAAP;AACD,CAFM;AAIP,OAAO,MAAMC,qBAAqB,GAAIC,MAAD,IAId;AACrB,QAAM;AAAEC,IAAAA,OAAF;AAAWV,IAAAA,QAAQ,GAAG,EAAtB;AAA0BW,IAAAA;AAA1B,MAA8CF,MAApD;AACA,QAAMG,GAAG,GAAGN,gBAAgB,CAACI,OAAD,EAAUV,QAAV,CAA5B;AACA,SAAO,OAAOW,eAAP,KAA2B,QAA3B,GAAsCC,GAAG,CAACC,OAAJ,CAAYF,eAAZ,CAAtC,GAAqEC,GAA5E;AACD,CARM;AAUP,OAAO,MAAME,gBAAgB,GAAIC,MAAD,IAA4B;AAC1D,QAAMC,KAAK,GAAGD,MAAM,CAACE,QAAP,GAAkBC,KAAlB,CAAwB,GAAxB,CAAd;AACAF,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,CAAiB,uBAAjB,EAA0C,GAA1C,CAAX;AACA,SAAOH,KAAK,CAACI,IAAN,CAAW,GAAX,CAAP;AACD,CAJM;AAiBP,OAAO,SAASC,YAAT,CACLC,GADK,EAELC,QAAQ,GAAG,GAFN,EAGLC,WAAW,GAAG,KAHT,EAIY;AACjB,MAAIF,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKG,SAA5B,EAAuC,OAAOD,WAAP;AACvC,SAAOF,GAAG,GAAGC,QAAb;AACD;AAED,OAAO,MAAMG,oBAAoB,GAAG,CAClCC,KADkC,EAElCC,OAIC,GAAG,EAN8B,KAOd;AACpB,QAAM;AAAEJ,IAAAA,WAAW,GAAG,KAAhB;AAAuB,OAAGK;AAA1B,MAA2CD,OAAjD;AACA,MAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKF,SAAhC,EAA2C,OAAOD,WAAP;AAC3C,SAAOhB,qBAAqB,CAAC;AAC3BE,IAAAA,OAAO,EAAEd,SAAS,CAACkC,WAAV,CAAsBH,KAAtB,IAA+BA,KAA/B,GAAuC,IAAI/B,SAAJ,CAAc+B,KAAd,CADrB;AAE3B,OAAGE,YAFwB,CAG3B;AACA;;AAJ2B,GAAD,CAA5B,CAHoB,CASpB;AACD,CAjBM;AAmBP,OAAO,MAAME,gBAAgB,GAAG,CAACC,OAAD,EAAkBC,gBAAgB,GAAG,EAArC,KAAoD;AAClF,QAAMC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWH,gBAAgB,GAAG,CAA9B,IAAmC,CAA3D;AACA,QAAMI,cAAc,GAAGF,IAAI,CAACC,KAAL,CAAWH,gBAAgB,GAAG,CAA9B,IAAmC,CAA1D;AAEA,QAAMK,cAAc,GAAGN,OAAO,CAACd,KAAR,CAAc,EAAd,CAAvB;AACAoB,EAAAA,cAAc,CAACC,MAAf,CACEL,eADF,EAEEF,OAAO,CAACQ,MAAR,IAAkBN,eAAe,GAAGG,cAApC,CAFF,EAGE,KAHF;AAKA,SAAOC,cAAc,CAAClB,IAAf,CAAoB,EAApB,CAAP;AACD,CAXM;AAaP,OAAO,MAAMqB,aAAa,GAAG,CAACC,QAAD,EAAmBT,gBAAgB,GAAG,CAAtC,KAAoD;AAC/E,SAAQ,IAAGS,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBV,gBAAlB,CAAoC,EAA/C;AACD,CAFM","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\n\nimport { BIG_TEN } from './constants';\n\n/**\n * @param amount 1 (`decimals` = 18)\n * @returns 1000000000000000000 (=`amount` * 10 ** `decimals`)\n */\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18): BigNumber => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals));\n};\n\n/**\n * @param decimalAmount 1000000000000000000 (`decimals` = 18)\n * @returns 1 (=`decimalAmount` / 10 ** `decimals`)\n */\nexport const getBalanceAmountBN = (decimalAmount: BigNumber, decimals = 18): BigNumber => {\n  return new BigNumber(decimalAmount).dividedBy(BIG_TEN.pow(decimals));\n};\n\n/**\n * @param decimalAmount 1000000000000000000 (`decimals` = 18)\n * @returns 1 (=`decimalAmount` / 10 ** `decimals`)\n */\nexport const getBalanceAmount = (decimalAmount: BigNumber, decimals = 18): number => {\n  return getBalanceAmountBN(decimalAmount, decimals).toNumber();\n};\n\nexport const getFullDisplayBalance = (params: {\n  balance: BigNumber;\n  decimals?: number;\n  displayDecimals?: number;\n}): string | number => {\n  const { balance, decimals = 18, displayDecimals } = params;\n  const ret = getBalanceAmount(balance, decimals);\n  return typeof displayDecimals === 'number' ? ret.toFixed(displayDecimals) : ret;\n};\n\nexport const numberWithCommas = (number: number): string => {\n  const parts = number.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n};\n\nexport function feeFormatter(\n  fee: null | undefined,\n  maxValue?: number,\n  noDataDummy?: string,\n): string;\nexport function feeFormatter(fee: number, maxValue?: number, noDataDummy?: string): number;\nexport function feeFormatter(\n  fee: number | null | undefined,\n  maxValue?: number,\n  noDataDummy?: string,\n): number | string;\nexport function feeFormatter(\n  fee: number | null | undefined,\n  maxValue = 100,\n  noDataDummy = '###',\n): string | number {\n  if (fee === null || fee === undefined) return noDataDummy;\n  return fee / maxValue;\n}\n\nexport const loadingDataFormatter = (\n  value?: number | string | null | undefined | BigNumber,\n  options: {\n    noDataDummy?: string;\n    decimals?: number;\n    displayDecimals?: number;\n  } = {},\n): string | number => {\n  const { noDataDummy = '###', ...otherOptions } = options;\n  if (value === null || value === undefined) return noDataDummy;\n  return getFullDisplayBalance({\n    balance: BigNumber.isBigNumber(value) ? value : new BigNumber(value),\n    ...otherOptions,\n    // decimals: options?.decimals,\n    // displayDecimals: options?.\n  });\n  // return getBalanceAmount(BigNumber.isBigNumber(value) ? value : new BigNumber(value));\n};\n\nexport const addressShortener = (address: string, charsCountToShow = 10): string => {\n  const startCharsCount = Math.floor(charsCountToShow / 2) + 1;\n  const lastCharsCount = Math.floor(charsCountToShow / 2) - 1;\n\n  const addressAsArray = address.split('');\n  addressAsArray.splice(\n    startCharsCount,\n    address.length - (startCharsCount + lastCharsCount),\n    '...',\n  );\n  return addressAsArray.join('');\n};\n\nexport const ipfsShortener = (ipfsHash: string, charsCountToShow = 6): string => {\n  return `#${ipfsHash.slice(0, charsCountToShow)}`;\n};\n"]},"metadata":{},"sourceType":"module"}