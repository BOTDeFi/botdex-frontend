{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.overlayMode = function (base, overlay, combine) {\n    return {\n      startState: function () {\n        return {\n          base: CodeMirror.startState(base),\n          overlay: CodeMirror.startState(overlay),\n          basePos: 0,\n          baseCur: null,\n          overlayPos: 0,\n          overlayCur: null,\n          streamSeen: null\n        };\n      },\n      copyState: function (state) {\n        return {\n          base: CodeMirror.copyState(base, state.base),\n          overlay: CodeMirror.copyState(overlay, state.overlay),\n          basePos: state.basePos,\n          baseCur: null,\n          overlayPos: state.overlayPos,\n          overlayCur: null\n        };\n      },\n      token: function (stream, state) {\n        if (stream != state.streamSeen || Math.min(state.basePos, state.overlayPos) < stream.start) {\n          state.streamSeen = stream;\n          state.basePos = state.overlayPos = stream.start;\n        }\n\n        if (stream.start == state.basePos) {\n          state.baseCur = base.token(stream, state.base);\n          state.basePos = stream.pos;\n        }\n\n        if (stream.start == state.overlayPos) {\n          stream.pos = stream.start;\n          state.overlayCur = overlay.token(stream, state.overlay);\n          state.overlayPos = stream.pos;\n        }\n\n        stream.pos = Math.min(state.basePos, state.overlayPos); // state.overlay.combineTokens always takes precedence over combine,\n        // unless set to null\n\n        if (state.overlayCur == null) return state.baseCur;else if (state.baseCur != null && state.overlay.combineTokens || combine && state.overlay.combineTokens == null) return state.baseCur + \" \" + state.overlayCur;else return state.overlayCur;\n      },\n      indent: base.indent && function (state, textAfter, line) {\n        return base.indent(state.base, textAfter, line);\n      },\n      electricChars: base.electricChars,\n      innerMode: function (state) {\n        return {\n          state: state.base,\n          mode: base\n        };\n      },\n      blankLine: function (state) {\n        var baseToken, overlayToken;\n        if (base.blankLine) baseToken = base.blankLine(state.base);\n        if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n        return overlayToken == null ? baseToken : combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken;\n      }\n    };\n  };\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/codemirror/addon/mode/overlay.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","overlayMode","base","overlay","combine","startState","basePos","baseCur","overlayPos","overlayCur","streamSeen","copyState","state","token","stream","Math","min","start","pos","combineTokens","indent","textAfter","line","electricChars","innerMode","mode","blankLine","baseToken","overlayToken"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.overlayMode = function(base, overlay, combine) {\n  return {\n    startState: function() {\n      return {\n        base: CodeMirror.startState(base),\n        overlay: CodeMirror.startState(overlay),\n        basePos: 0, baseCur: null,\n        overlayPos: 0, overlayCur: null,\n        streamSeen: null\n      };\n    },\n    copyState: function(state) {\n      return {\n        base: CodeMirror.copyState(base, state.base),\n        overlay: CodeMirror.copyState(overlay, state.overlay),\n        basePos: state.basePos, baseCur: null,\n        overlayPos: state.overlayPos, overlayCur: null\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream != state.streamSeen ||\n          Math.min(state.basePos, state.overlayPos) < stream.start) {\n        state.streamSeen = stream;\n        state.basePos = state.overlayPos = stream.start;\n      }\n\n      if (stream.start == state.basePos) {\n        state.baseCur = base.token(stream, state.base);\n        state.basePos = stream.pos;\n      }\n      if (stream.start == state.overlayPos) {\n        stream.pos = stream.start;\n        state.overlayCur = overlay.token(stream, state.overlay);\n        state.overlayPos = stream.pos;\n      }\n      stream.pos = Math.min(state.basePos, state.overlayPos);\n\n      // state.overlay.combineTokens always takes precedence over combine,\n      // unless set to null\n      if (state.overlayCur == null) return state.baseCur;\n      else if (state.baseCur != null &&\n               state.overlay.combineTokens ||\n               combine && state.overlay.combineTokens == null)\n        return state.baseCur + \" \" + state.overlayCur;\n      else return state.overlayCur;\n    },\n\n    indent: base.indent && function(state, textAfter, line) {\n      return base.indent(state.base, textAfter, line);\n    },\n    electricChars: base.electricChars,\n\n    innerMode: function(state) { return {state: state.base, mode: base}; },\n\n    blankLine: function(state) {\n      var baseToken, overlayToken;\n      if (base.blankLine) baseToken = base.blankLine(state.base);\n      if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n\n      return overlayToken == null ?\n        baseToken :\n        (combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken);\n    }\n  };\n};\n\n});\n"]},"metadata":{},"sourceType":"script"}