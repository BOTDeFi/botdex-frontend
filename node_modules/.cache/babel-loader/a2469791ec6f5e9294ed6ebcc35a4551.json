{"ast":null,"code":"/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n *\n * @typedef {Partial<Point>} PointLike\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\nexport var pointStart = point('start');\nexport var pointEnd = point('end');\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike} [node]\n * @returns {Position}\n */\n\nexport function position(node) {\n  return {\n    start: pointStart(node),\n    end: pointEnd(node)\n  };\n}\n/**\n * Get the positional info of `node`.\n *\n * @param {'start'|'end'} type\n */\n\nfunction point(type) {\n  return point;\n  /**\n   * Get the positional info of `node`.\n   *\n   * @param {NodeLike} [node]\n   * @returns {Point}\n   */\n\n  function point(node) {\n    /** @type {Point} */\n    // @ts-ignore looks like a point\n    var point = node && node.position && node.position[type] || {};\n    return {\n      line: point.line || null,\n      column: point.column || null,\n      offset: point.offset > -1 ? point.offset : null\n    };\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-hast/node_modules/unist-util-position/index.js"],"names":["pointStart","point","pointEnd","position","node","start","end","type","line","column","offset"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,IAAIA,UAAU,GAAGC,KAAK,CAAC,OAAD,CAAtB;AACP,OAAO,IAAIC,QAAQ,GAAGD,KAAK,CAAC,KAAD,CAApB;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,SAAO;AAACC,IAAAA,KAAK,EAAEL,UAAU,CAACI,IAAD,CAAlB;AAA0BE,IAAAA,GAAG,EAAEJ,QAAQ,CAACE,IAAD;AAAvC,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,SAASH,KAAT,CAAeM,IAAf,EAAqB;AACnB,SAAON,KAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,WAASA,KAAT,CAAeG,IAAf,EAAqB;AACnB;AACA;AACA,QAAIH,KAAK,GAAIG,IAAI,IAAIA,IAAI,CAACD,QAAb,IAAyBC,IAAI,CAACD,QAAL,CAAcI,IAAd,CAA1B,IAAkD,EAA9D;AAEA,WAAO;AACLC,MAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,IAAc,IADf;AAELC,MAAAA,MAAM,EAAER,KAAK,CAACQ,MAAN,IAAgB,IAFnB;AAGLC,MAAAA,MAAM,EAAET,KAAK,CAACS,MAAN,GAAe,CAAC,CAAhB,GAAoBT,KAAK,CAACS,MAA1B,GAAmC;AAHtC,KAAP;AAKD;AACF","sourcesContent":["/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n *\n * @typedef {Partial<Point>} PointLike\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\nexport var pointStart = point('start')\nexport var pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike} [node]\n * @returns {Position}\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start'|'end'} type\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the positional info of `node`.\n   *\n   * @param {NodeLike} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    /** @type {Point} */\n    // @ts-ignore looks like a point\n    var point = (node && node.position && node.position[type]) || {}\n\n    return {\n      line: point.line || null,\n      column: point.column || null,\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}