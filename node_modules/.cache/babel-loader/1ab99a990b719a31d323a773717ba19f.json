{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { SNAPSHOT_SPACE } from '@/config/constants/dao';\nimport { useSnapshotService } from '@/services/api/snapshot.org';\nimport { ProposalVotingSystem } from '@/services/api/snapshot.org/types';\nimport { useMst } from '@/store';\nimport { clogError } from '@/utils/logger';\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useCreateProposal = ({\n  onSuccessTx,\n  onStartTx,\n  onEndTx\n}) => {\n  _s();\n\n  const {\n    user,\n    dao: {\n      getBlockNumberAsync\n    }\n  } = useMst();\n  const {\n    snapshotClient,\n    provider\n  } = useSnapshotService();\n  const createProposal = useCallback(async proposalData => {\n    onStartTx();\n\n    try {\n      const blockNumber = await getBlockNumberAsync();\n      const result = await snapshotClient.proposal(provider, user.address, SNAPSHOT_SPACE, { ...proposalData,\n        snapshot: blockNumber,\n        // metadata: {\n        //   plugins: {},\n        //   network: metamaskService.usedChain,\n        //   strategies: [strategies.erc20WithBalance],\n        // },\n        type: ProposalVotingSystem.singleChoice\n      });\n      onSuccessTx(result);\n      successNotification('Success', 'Created a new proposal!');\n    } catch (error) {\n      clogError(error);\n      const errorMessage = (error === null || error === void 0 ? void 0 : error.message) ? error.message : new Error(error).message;\n      errorNotification('Error', errorMessage);\n    } finally {\n      onEndTx();\n    }\n  }, [snapshotClient, provider, user.address, getBlockNumberAsync, onStartTx, onSuccessTx, onEndTx]);\n  return {\n    createProposal\n  };\n};\n\n_s(useCreateProposal, \"Sr3igzcIVMzIUdfgX9oYUm2yzXQ=\", false, function () {\n  return [useMst, useSnapshotService];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useCreateProposal.ts"],"names":["useCallback","errorNotification","successNotification","SNAPSHOT_SPACE","useSnapshotService","ProposalVotingSystem","useMst","clogError","useCreateProposal","onSuccessTx","onStartTx","onEndTx","user","dao","getBlockNumberAsync","snapshotClient","provider","createProposal","proposalData","blockNumber","result","proposal","address","snapshot","type","singleChoice","error","errorMessage","message","Error"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iCAAvD;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,oBAAT,QAAqC,mCAArC;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAUA;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAChCC,EAAAA,WADgC;AAEhCC,EAAAA,SAFgC;AAGhCC,EAAAA;AAHgC,CAAD,KAQ3B;AAAA;;AACJ,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,GAAG,EAAE;AAAEC,MAAAA;AAAF;AAFD,MAGFR,MAAM,EAHV;AAIA,QAAM;AAAES,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAA+BZ,kBAAkB,EAAvD;AAEA,QAAMa,cAAc,GAAGjB,WAAW,CAChC,MAAOkB,YAAP,IAA+F;AAC7FR,IAAAA,SAAS;;AACT,QAAI;AACF,YAAMS,WAAW,GAAG,MAAML,mBAAmB,EAA7C;AACA,YAAMM,MAAM,GAAI,MAAML,cAAc,CAACM,QAAf,CAAwBL,QAAxB,EAAkCJ,IAAI,CAACU,OAAvC,EAAgDnB,cAAhD,EAAgE,EACpF,GAAGe,YADiF;AAEpFK,QAAAA,QAAQ,EAAEJ,WAF0E;AAGpF;AACA;AACA;AACA;AACA;AACAK,QAAAA,IAAI,EAAEnB,oBAAoB,CAACoB;AARyD,OAAhE,CAAtB;AAWAhB,MAAAA,WAAW,CAACW,MAAD,CAAX;AACAlB,MAAAA,mBAAmB,CAAC,SAAD,EAAY,yBAAZ,CAAnB;AACD,KAfD,CAeE,OAAOwB,KAAP,EAAmB;AACnBnB,MAAAA,SAAS,CAACmB,KAAD,CAAT;AACA,YAAMC,YAAY,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,OAAP,IAAiBF,KAAK,CAACE,OAAvB,GAAiC,IAAIC,KAAJ,CAAUH,KAAV,EAAiBE,OAAvE;AACA3B,MAAAA,iBAAiB,CAAC,OAAD,EAAU0B,YAAV,CAAjB;AACD,KAnBD,SAmBU;AACRhB,MAAAA,OAAO;AACR;AACF,GAzB+B,EA0BhC,CAACI,cAAD,EAAiBC,QAAjB,EAA2BJ,IAAI,CAACU,OAAhC,EAAyCR,mBAAzC,EAA8DJ,SAA9D,EAAyED,WAAzE,EAAsFE,OAAtF,CA1BgC,CAAlC;AA6BA,SAAO;AAAEM,IAAAA;AAAF,GAAP;AACD,CA7CM;;GAAMT,iB;UAYPF,M,EACiCF,kB","sourcesContent":["import { useCallback } from 'react';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { SNAPSHOT_SPACE } from '@/config/constants/dao';\nimport { useSnapshotService } from '@/services/api/snapshot.org';\nimport { ProposalVotingSystem } from '@/services/api/snapshot.org/types';\nimport { useMst } from '@/store';\nimport { clogError } from '@/utils/logger';\n\ninterface ICreateProposalResult {\n  id: string;\n  ipfsHash: string;\n  relayer: {\n    address: string;\n    receipt: string;\n  };\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useCreateProposal = ({\n  onSuccessTx,\n  onStartTx,\n  onEndTx,\n}: {\n  onSuccessTx: (proposalCreationResult: ICreateProposalResult) => void;\n  onStartTx: () => void;\n  onEndTx: () => void;\n}) => {\n  const {\n    user,\n    dao: { getBlockNumberAsync },\n  } = useMst();\n  const { snapshotClient, provider } = useSnapshotService();\n\n  const createProposal = useCallback(\n    async (proposalData: { name: any; body: string; choices: any; start: number; end: number }) => {\n      onStartTx();\n      try {\n        const blockNumber = await getBlockNumberAsync();\n        const result = (await snapshotClient.proposal(provider, user.address, SNAPSHOT_SPACE, {\n          ...proposalData,\n          snapshot: blockNumber,\n          // metadata: {\n          //   plugins: {},\n          //   network: metamaskService.usedChain,\n          //   strategies: [strategies.erc20WithBalance],\n          // },\n          type: ProposalVotingSystem.singleChoice,\n        })) as ICreateProposalResult;\n\n        onSuccessTx(result);\n        successNotification('Success', 'Created a new proposal!');\n      } catch (error: any) {\n        clogError(error);\n        const errorMessage = error?.message ? error.message : new Error(error).message;\n        errorNotification('Error', errorMessage);\n      } finally {\n        onEndTx();\n      }\n    },\n    [snapshotClient, provider, user.address, getBlockNumberAsync, onStartTx, onSuccessTx, onEndTx],\n  );\n\n  return { createProposal };\n};\n"]},"metadata":{},"sourceType":"module"}