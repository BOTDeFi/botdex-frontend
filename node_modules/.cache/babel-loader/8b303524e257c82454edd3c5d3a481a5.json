{"ast":null,"code":"/**\n * @callback Map\n * @param {string} value\n * @param {number} line\n * @param {boolean} blank\n * @returns {string}\n */\nconst eol = /\\r?\\n|\\r/g;\n/**\n * @param {string} value\n * @param {Map} map\n * @returns {string}\n */\n\nexport function indentLines(value, map) {\n  /** @type {Array.<string>} */\n  const result = [];\n  let start = 0;\n  let line = 0;\n  /** @type {RegExpExecArray|null} */\n\n  let match;\n\n  while (match = eol.exec(value)) {\n    one(value.slice(start, match.index));\n    result.push(match[0]);\n    start = match.index + match[0].length;\n    line++;\n  }\n\n  one(value.slice(start));\n  return result.join('');\n  /**\n   * @param {string} value\n   */\n\n  function one(value) {\n    result.push(map(value, line, !value));\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js"],"names":["eol","indentLines","value","map","result","start","line","match","exec","one","slice","index","push","length","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,WAAZ;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,GAA5B,EAAiC;AACtC;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAG,CAAX;AACA;;AACA,MAAIC,KAAJ;;AAEA,SAAQA,KAAK,GAAGP,GAAG,CAACQ,IAAJ,CAASN,KAAT,CAAhB,EAAkC;AAChCO,IAAAA,GAAG,CAACP,KAAK,CAACQ,KAAN,CAAYL,KAAZ,EAAmBE,KAAK,CAACI,KAAzB,CAAD,CAAH;AACAP,IAAAA,MAAM,CAACQ,IAAP,CAAYL,KAAK,CAAC,CAAD,CAAjB;AACAF,IAAAA,KAAK,GAAGE,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAAC,CAAD,CAAL,CAASM,MAA/B;AACAP,IAAAA,IAAI;AACL;;AAEDG,EAAAA,GAAG,CAACP,KAAK,CAACQ,KAAN,CAAYL,KAAZ,CAAD,CAAH;AAEA,SAAOD,MAAM,CAACU,IAAP,CAAY,EAAZ,CAAP;AAEA;AACF;AACA;;AACE,WAASL,GAAT,CAAaP,KAAb,EAAoB;AAClBE,IAAAA,MAAM,CAACQ,IAAP,CAAYT,GAAG,CAACD,KAAD,EAAQI,IAAR,EAAc,CAACJ,KAAf,CAAf;AACD;AACF","sourcesContent":["/**\n * @callback Map\n * @param {string} value\n * @param {number} line\n * @param {boolean} blank\n * @returns {string}\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @param {string} value\n * @param {Map} map\n * @returns {string}\n */\nexport function indentLines(value, map) {\n  /** @type {Array.<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}