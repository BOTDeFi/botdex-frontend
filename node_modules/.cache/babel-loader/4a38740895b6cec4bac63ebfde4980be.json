{"ast":null,"code":"/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('../util/indent-lines.js').Map} Map\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').Handle} Handle\n */\nimport { checkBullet } from '../util/check-bullet.js';\nimport { checkListItemIndent } from '../util/check-list-item-indent.js';\nimport { containerFlow } from '../util/container-flow.js';\nimport { indentLines } from '../util/indent-lines.js';\n/**\n * @type {Handle}\n * @param {ListItem} node\n */\n\nexport function listItem(node, parent, context) {\n  const listItemIndent = checkListItemIndent(context);\n  let bullet = context.bulletCurrent || checkBullet(context); // Add the marker value for ordered lists.\n\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet = (typeof parent.start === 'number' && parent.start > -1 ? parent.start : 1) + (context.options.incrementListMarker === false ? 0 : parent.children.indexOf(node)) + bullet;\n  }\n\n  let size = bullet.length + 1;\n\n  if (listItemIndent === 'tab' || listItemIndent === 'mixed' && (parent && parent.type === 'list' && parent.spread || node.spread)) {\n    size = Math.ceil(size / 4) * 4;\n  }\n\n  const exit = context.enter('listItem');\n  const value = indentLines(containerFlow(node, context), map);\n  exit();\n  return value;\n  /** @type {Map} */\n\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line;\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line;\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-markdown/lib/handle/list-item.js"],"names":["checkBullet","checkListItemIndent","containerFlow","indentLines","listItem","node","parent","context","listItemIndent","bullet","bulletCurrent","type","ordered","start","options","incrementListMarker","children","indexOf","size","length","spread","Math","ceil","exit","enter","value","map","line","index","blank","repeat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,WAAR,QAA0B,yBAA1B;AACA,SAAQC,mBAAR,QAAkC,mCAAlC;AACA,SAAQC,aAAR,QAA4B,2BAA5B;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgCC,OAAhC,EAAyC;AAC9C,QAAMC,cAAc,GAAGP,mBAAmB,CAACM,OAAD,CAA1C;AACA,MAAIE,MAAM,GAAGF,OAAO,CAACG,aAAR,IAAyBV,WAAW,CAACO,OAAD,CAAjD,CAF8C,CAI9C;;AACA,MAAID,MAAM,IAAIA,MAAM,CAACK,IAAP,KAAgB,MAA1B,IAAoCL,MAAM,CAACM,OAA/C,EAAwD;AACtDH,IAAAA,MAAM,GACJ,CAAC,OAAOH,MAAM,CAACO,KAAd,KAAwB,QAAxB,IAAoCP,MAAM,CAACO,KAAP,GAAe,CAAC,CAApD,GACGP,MAAM,CAACO,KADV,GAEG,CAFJ,KAGCN,OAAO,CAACO,OAAR,CAAgBC,mBAAhB,KAAwC,KAAxC,GACG,CADH,GAEGT,MAAM,CAACU,QAAP,CAAgBC,OAAhB,CAAwBZ,IAAxB,CALJ,IAMAI,MAPF;AAQD;;AAED,MAAIS,IAAI,GAAGT,MAAM,CAACU,MAAP,GAAgB,CAA3B;;AAEA,MACEX,cAAc,KAAK,KAAnB,IACCA,cAAc,KAAK,OAAnB,KACGF,MAAM,IAAIA,MAAM,CAACK,IAAP,KAAgB,MAA1B,IAAoCL,MAAM,CAACc,MAA5C,IAAuDf,IAAI,CAACe,MAD9D,CAFH,EAIE;AACAF,IAAAA,IAAI,GAAGG,IAAI,CAACC,IAAL,CAAUJ,IAAI,GAAG,CAAjB,IAAsB,CAA7B;AACD;;AAED,QAAMK,IAAI,GAAGhB,OAAO,CAACiB,KAAR,CAAc,UAAd,CAAb;AACA,QAAMC,KAAK,GAAGtB,WAAW,CAACD,aAAa,CAACG,IAAD,EAAOE,OAAP,CAAd,EAA+BmB,GAA/B,CAAzB;AACAH,EAAAA,IAAI;AAEJ,SAAOE,KAAP;AAEA;;AACA,WAASC,GAAT,CAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AAC/B,QAAID,KAAJ,EAAW;AACT,aAAO,CAACC,KAAK,GAAG,EAAH,GAAQ,IAAIC,MAAJ,CAAWZ,IAAX,CAAd,IAAkCS,IAAzC;AACD;;AAED,WAAO,CAACE,KAAK,GAAGpB,MAAH,GAAYA,MAAM,GAAG,IAAIqB,MAAJ,CAAWZ,IAAI,GAAGT,MAAM,CAACU,MAAzB,CAA3B,IAA+DQ,IAAtE;AACD;AACF","sourcesContent":["/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('../util/indent-lines.js').Map} Map\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\nimport {containerFlow} from '../util/container-flow.js'\nimport {indentLines} from '../util/indent-lines.js'\n\n/**\n * @type {Handle}\n * @param {ListItem} node\n */\nexport function listItem(node, parent, context) {\n  const listItemIndent = checkListItemIndent(context)\n  let bullet = context.bulletCurrent || checkBullet(context)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (context.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const exit = context.enter('listItem')\n  const value = indentLines(containerFlow(node, context), map)\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}