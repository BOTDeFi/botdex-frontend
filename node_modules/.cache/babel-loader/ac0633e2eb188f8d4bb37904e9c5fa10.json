{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakeUnstakeButtons/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { toJS } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport { Button } from '@/components/atoms';\nimport { useMst } from '@/store';\nimport { convertSharesToRefinery, getStakingBalance } from '@/store/pools/helpers';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { BIG_ZERO } from '@/utils/constants';\nimport './StakeUnstakeButtons.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StakeUnstakeButtons = observer(_c = _s(({\n  className,\n  pool\n}) => {\n  _s();\n\n  const {\n    id: poolId,\n    isAutoVault,\n    stakingToken,\n    userData,\n    isFinished\n  } = pool;\n  const {\n    pricePerFullShare,\n    userData: {\n      userShares\n    }\n  } = useSelectVaultData();\n  const {\n    modals\n  } = useMst();\n  const maxStakingValue = useMemo(() => {\n    return getStakingBalance(pool);\n  }, [pool]);\n  const maxUnstakingValue = useMemo(() => {\n    if (!userShares || !pricePerFullShare) return BIG_ZERO;\n\n    if (isAutoVault) {\n      return convertSharesToRefinery(userShares, pricePerFullShare).refineryAsBigNumber;\n    }\n\n    return (userData === null || userData === void 0 ? void 0 : userData.stakedBalance) || BIG_ZERO;\n  }, [isAutoVault, pricePerFullShare, userData === null || userData === void 0 ? void 0 : userData.stakedBalance, userShares]);\n  const clonedStakingToken = toJS(stakingToken);\n  const buttons = [{\n    handler: () => {\n      modals.stakeUnstake.open({\n        isStaking: false,\n        maxStakingValue: maxUnstakingValue.toNumber(),\n        stakingToken: clonedStakingToken,\n        isAutoVault: Boolean(isAutoVault),\n        poolId\n      });\n    },\n    text: '-'\n  }, {\n    disabled: isFinished,\n    handler: () => {\n      modals.stakeUnstake.open({\n        isStaking: true,\n        maxStakingValue: maxStakingValue.toNumber(),\n        stakingToken: clonedStakingToken,\n        isAutoVault: Boolean(isAutoVault),\n        poolId\n      });\n    },\n    text: '+'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames(className, 'pools-stake-unstake-buttons', 'box-f'),\n    children: buttons.map(({\n      text,\n      handler,\n      disabled = false\n    }) => /*#__PURE__*/_jsxDEV(Button, {\n      colorScheme: \"outline-purple\",\n      size: \"ssm\",\n      disabled: disabled,\n      onClick: disabled ? undefined : handler,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-smd text-yellow text-bold\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}, \"JuxBhyr94NvfCeUQUWYJ4SSern4=\", false, function () {\n  return [useSelectVaultData, useMst];\n}));\n_c2 = StakeUnstakeButtons;\nexport default StakeUnstakeButtons;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StakeUnstakeButtons$observer\");\n$RefreshReg$(_c2, \"StakeUnstakeButtons\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakeUnstakeButtons/index.tsx"],"names":["React","useMemo","classNames","toJS","observer","Button","useMst","convertSharesToRefinery","getStakingBalance","useSelectVaultData","BIG_ZERO","StakeUnstakeButtons","className","pool","id","poolId","isAutoVault","stakingToken","userData","isFinished","pricePerFullShare","userShares","modals","maxStakingValue","maxUnstakingValue","refineryAsBigNumber","stakedBalance","clonedStakingToken","buttons","handler","stakeUnstake","open","isStaking","toNumber","Boolean","text","disabled","map","undefined"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { toJS } from 'mobx';\nimport { observer } from 'mobx-react-lite';\n\nimport { Button } from '@/components/atoms';\nimport { useMst } from '@/store';\nimport { ITokenMobx } from '@/store/Models/Modals/StakeUnstakeModal';\nimport { convertSharesToRefinery, getStakingBalance } from '@/store/pools/helpers';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { Pool } from '@/types';\nimport { BIG_ZERO } from '@/utils/constants';\n\nimport './StakeUnstakeButtons.scss';\n\nconst StakeUnstakeButtons: React.FC<{\n  className?: string;\n  pool: Pool;\n}> = observer(({ className, pool }) => {\n  const { id: poolId, isAutoVault, stakingToken, userData, isFinished } = pool;\n  const {\n    pricePerFullShare,\n    userData: { userShares },\n  } = useSelectVaultData();\n\n  const { modals } = useMst();\n\n  const maxStakingValue = useMemo(() => {\n    return getStakingBalance(pool);\n  }, [pool]);\n\n  const maxUnstakingValue = useMemo(() => {\n    if (!userShares || !pricePerFullShare) return BIG_ZERO;\n    if (isAutoVault) {\n      return convertSharesToRefinery(userShares, pricePerFullShare).refineryAsBigNumber;\n    }\n    return userData?.stakedBalance || BIG_ZERO;\n  }, [isAutoVault, pricePerFullShare, userData?.stakedBalance, userShares]);\n  const clonedStakingToken = toJS(stakingToken) as ITokenMobx;\n  const buttons = [\n    {\n      handler: () => {\n        modals.stakeUnstake.open({\n          isStaking: false,\n          maxStakingValue: maxUnstakingValue.toNumber(),\n          stakingToken: clonedStakingToken,\n          isAutoVault: Boolean(isAutoVault),\n          poolId,\n        });\n      },\n      text: '-',\n    },\n    {\n      disabled: isFinished,\n      handler: () => {\n        modals.stakeUnstake.open({\n          isStaking: true,\n          maxStakingValue: maxStakingValue.toNumber(),\n          stakingToken: clonedStakingToken,\n          isAutoVault: Boolean(isAutoVault),\n          poolId,\n        });\n      },\n      text: '+',\n    },\n  ];\n  return (\n    <div className={classNames(className, 'pools-stake-unstake-buttons', 'box-f')}>\n      {buttons.map(({ text, handler, disabled = false }) => (\n        <Button\n          key={text}\n          colorScheme=\"outline-purple\"\n          size=\"ssm\"\n          disabled={disabled}\n          onClick={disabled ? undefined : handler}\n        >\n          <span className=\"text-smd text-yellow text-bold\">{text}</span>\n        </Button>\n      ))}\n    </div>\n  );\n});\n\nexport default StakeUnstakeButtons;\n"]},"metadata":{},"sourceType":"module"}