{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ActionsForm/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { DatePicker as DatePickerAntd, Form as FormAntd, TimePicker as TimePickerAntd } from 'antd';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport moment from 'moment';\nimport OpenLink from '@/components/atoms/OpenLink';\nimport { useScannerUrl } from '@/hooks/useScannerUrl';\nimport { useMst } from '@/store';\nimport { getMomentDate, getMomentMergedDateTime } from '../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionsForm = observer(_c = _s(({\n  form,\n  validateForms,\n  snapshotClassName,\n  snapshotTitleClassName\n}) => {\n  _s();\n\n  const actionsFormItems = [{\n    key: 'start_date',\n    labelClassName: 'actions-section__input-label',\n    labelContent: 'Start date',\n    rules: [{\n      required: true,\n      validator: (_, value) => {\n        const formFieldsValues = form.getFieldsValue();\n\n        if (!value) {\n          return Promise.reject(new Error('Please select date'));\n        }\n\n        const startDate = getMomentDate(value);\n\n        if (startDate < getMomentDate(moment())) {\n          return Promise.reject(new Error('Start date cannot be earlier than today'));\n        } // If some of the values is empty then skip validating\n\n\n        if (Object.values(formFieldsValues).some(fieldValue => !fieldValue)) {\n          return Promise.resolve();\n        }\n\n        return Promise.resolve();\n      }\n    }],\n    child: /*#__PURE__*/_jsxDEV(DatePickerAntd, {\n      className: \"actions-section__input\",\n      name: \"start_date\",\n      format: \"YYYY-MM-DD\",\n      placeholder: \"yyyy.mm.dd\",\n      dropdownClassName: \"actions-section__input-dropdown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this)\n  }, {\n    key: 'start_time',\n    labelClassName: 'actions-section__input-label',\n    labelContent: 'Start time',\n    rules: [{\n      type: 'object',\n      required: true,\n      message: 'Please select time'\n    }],\n    child: /*#__PURE__*/_jsxDEV(TimePickerAntd, {\n      className: \"actions-section__input\",\n      name: \"start_time\",\n      format: \"HH:mm\",\n      popupClassName: \"actions-section__input-popup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this)\n  }, {\n    key: 'end_date',\n    labelClassName: 'actions-section__input-label',\n    labelContent: 'End date',\n    rules: [{\n      required: true,\n      validator: (_, value) => {\n        const formFieldsValues = form.getFieldsValue();\n\n        if (!value) {\n          return Promise.reject(new Error('Please select date'));\n        }\n\n        const endDate = getMomentDate(value);\n\n        if (endDate < getMomentDate(moment())) {\n          return Promise.reject(new Error('End date cannot be earlier than today'));\n        } // If some of the values is empty then skip validating\n\n\n        if (Object.values(formFieldsValues).some(fieldValue => !fieldValue)) {\n          return Promise.resolve();\n        }\n\n        const {\n          actionsForm_start_date\n        } = formFieldsValues;\n        const startDate = getMomentDate(actionsForm_start_date);\n\n        if (startDate > endDate) {\n          return Promise.reject(new Error('End date must be after the start date'));\n        }\n\n        return Promise.resolve();\n      }\n    }],\n    child: /*#__PURE__*/_jsxDEV(DatePickerAntd, {\n      className: \"actions-section__input\",\n      name: \"end_date\",\n      format: \"YYYY-MM-DD\",\n      placeholder: \"yyyy.mm.dd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }, this)\n  }, {\n    key: 'end_time',\n    labelClassName: 'actions-section__input-label',\n    labelContent: 'End time',\n    rules: [{\n      required: true,\n      validator: (_, value) => {\n        const formFieldsValues = form.getFieldsValue();\n\n        if (!value) {\n          return Promise.reject(new Error('Please select time'));\n        }\n\n        if (Object.values(formFieldsValues).some(fieldValue => !fieldValue)) {\n          return Promise.resolve();\n        }\n\n        const {\n          actionsForm_start_date,\n          actionsForm_start_time,\n          actionsForm_end_date,\n          actionsForm_end_time\n        } = formFieldsValues;\n        const startDate = getMomentMergedDateTime(actionsForm_start_date, actionsForm_start_time);\n        const endDate = getMomentMergedDateTime(actionsForm_end_date, actionsForm_end_time);\n\n        if (endDate < moment()) {\n          return Promise.reject(new Error('End date cannot be earlier than today'));\n        }\n\n        if (startDate > endDate) {\n          return Promise.reject(new Error('End date must be after the start date'));\n        }\n\n        if (startDate.unix() === endDate.unix()) {\n          return Promise.reject(new Error('The start and end times must not be the same'));\n        }\n\n        return Promise.resolve();\n      }\n    }],\n    child: /*#__PURE__*/_jsxDEV(TimePickerAntd, {\n      className: \"actions-section__input\",\n      name: \"end_time\",\n      format: \"HH:mm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 16\n    }, this)\n  }];\n  const {\n    dao: {\n      blockNumber,\n      getBlockNumberAsync\n    }\n  } = useMst();\n  const latestBlockUrl = useScannerUrl(`block/${blockNumber}`);\n  useEffect(() => {\n    getBlockNumberAsync();\n  }, [getBlockNumberAsync]);\n  return /*#__PURE__*/_jsxDEV(FormAntd, {\n    name: \"actionsForm\",\n    form: form,\n    layout: \"vertical\",\n    onValuesChange: validateForms,\n    children: [actionsFormItems.map(({\n      key,\n      labelClassName,\n      labelContent,\n      rules,\n      child\n    }) => {\n      return /*#__PURE__*/_jsxDEV(FormAntd.Item, {\n        name: `actionsForm_${key}`,\n        label: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classNames(labelClassName, 'text-ssm text-black'),\n          children: labelContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this),\n        rules: rules,\n        children: child\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(FormAntd.Item, {\n      className: snapshotClassName,\n      children: /*#__PURE__*/_jsxDEV(OpenLink, {\n        href: latestBlockUrl,\n        text: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: snapshotTitleClassName,\n          children: [\"Snapshot \", blockNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 7\n  }, this);\n}, \"96tLuPfPxvQP6iUsofBspXscoL8=\", false, function () {\n  return [useMst, useScannerUrl];\n}));\n_c2 = ActionsForm;\nexport default ActionsForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ActionsForm$observer\");\n$RefreshReg$(_c2, \"ActionsForm\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ActionsForm/index.tsx"],"names":["React","useEffect","DatePicker","DatePickerAntd","Form","FormAntd","TimePicker","TimePickerAntd","classNames","observer","moment","OpenLink","useScannerUrl","useMst","getMomentDate","getMomentMergedDateTime","ActionsForm","form","validateForms","snapshotClassName","snapshotTitleClassName","actionsFormItems","key","labelClassName","labelContent","rules","required","validator","_","value","formFieldsValues","getFieldsValue","Promise","reject","Error","startDate","Object","values","some","fieldValue","resolve","child","type","message","endDate","actionsForm_start_date","actionsForm_start_time","actionsForm_end_date","actionsForm_end_time","unix","dao","blockNumber","getBlockNumberAsync","latestBlockUrl","map"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  DatePicker as DatePickerAntd,\n  Form as FormAntd,\n  FormInstance,\n  TimePicker as TimePickerAntd,\n} from 'antd';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport moment, { Moment } from 'moment';\nimport { Rule } from 'rc-field-form/lib/interface';\n\nimport OpenLink from '@/components/atoms/OpenLink';\nimport { useScannerUrl } from '@/hooks/useScannerUrl';\nimport { useMst } from '@/store';\n\nimport { getMomentDate, getMomentMergedDateTime } from '../helpers';\n\ninterface IActionsFormProps {\n  form: FormInstance;\n  validateForms: () => void;\n  snapshotClassName?: string;\n  snapshotTitleClassName?: string;\n}\n\nconst ActionsForm: React.FC<IActionsFormProps> = observer(\n  ({ form, validateForms, snapshotClassName, snapshotTitleClassName }) => {\n    const actionsFormItems: Array<{\n      key: string;\n      labelClassName: string;\n      labelContent: JSX.Element | string;\n      rules: Rule[];\n      child: JSX.Element;\n    }> = [\n      {\n        key: 'start_date',\n        labelClassName: 'actions-section__input-label',\n        labelContent: 'Start date',\n        rules: [\n          {\n            required: true,\n            validator: (_, value: Moment) => {\n              const formFieldsValues: { [key: string]: Moment } = form.getFieldsValue();\n              if (!value) {\n                return Promise.reject(new Error('Please select date'));\n              }\n\n              const startDate = getMomentDate(value);\n              if (startDate < getMomentDate(moment())) {\n                return Promise.reject(new Error('Start date cannot be earlier than today'));\n              }\n\n              // If some of the values is empty then skip validating\n              if (Object.values(formFieldsValues).some((fieldValue) => !fieldValue)) {\n                return Promise.resolve();\n              }\n\n              return Promise.resolve();\n            },\n          },\n        ],\n        child: (\n          <DatePickerAntd\n            className=\"actions-section__input\"\n            name=\"start_date\"\n            format=\"YYYY-MM-DD\"\n            placeholder=\"yyyy.mm.dd\"\n            dropdownClassName=\"actions-section__input-dropdown\"\n          />\n        ),\n      },\n      {\n        key: 'start_time',\n        labelClassName: 'actions-section__input-label',\n        labelContent: 'Start time',\n        rules: [\n          {\n            type: 'object',\n            required: true,\n            message: 'Please select time',\n          },\n        ],\n        child: (\n          <TimePickerAntd\n            className=\"actions-section__input\"\n            name=\"start_time\"\n            format=\"HH:mm\"\n            popupClassName=\"actions-section__input-popup\"\n          />\n        ),\n      },\n      {\n        key: 'end_date',\n        labelClassName: 'actions-section__input-label',\n        labelContent: 'End date',\n        rules: [\n          {\n            required: true,\n            validator: (_, value: Moment) => {\n              const formFieldsValues: { [key: string]: Moment } = form.getFieldsValue();\n              if (!value) {\n                return Promise.reject(new Error('Please select date'));\n              }\n\n              const endDate = getMomentDate(value);\n              if (endDate < getMomentDate(moment())) {\n                return Promise.reject(new Error('End date cannot be earlier than today'));\n              }\n\n              // If some of the values is empty then skip validating\n              if (Object.values(formFieldsValues).some((fieldValue) => !fieldValue)) {\n                return Promise.resolve();\n              }\n\n              const { actionsForm_start_date } = formFieldsValues;\n              const startDate = getMomentDate(actionsForm_start_date);\n\n              if (startDate > endDate) {\n                return Promise.reject(new Error('End date must be after the start date'));\n              }\n\n              return Promise.resolve();\n            },\n          },\n        ],\n        child: (\n          <DatePickerAntd\n            className=\"actions-section__input\"\n            name=\"end_date\"\n            format=\"YYYY-MM-DD\"\n            placeholder=\"yyyy.mm.dd\"\n          />\n        ),\n      },\n      {\n        key: 'end_time',\n        labelClassName: 'actions-section__input-label',\n        labelContent: 'End time',\n        rules: [\n          {\n            required: true,\n            validator: (_, value) => {\n              const formFieldsValues: { [key: string]: Moment } = form.getFieldsValue();\n              if (!value) {\n                return Promise.reject(new Error('Please select time'));\n              }\n\n              if (Object.values(formFieldsValues).some((fieldValue) => !fieldValue)) {\n                return Promise.resolve();\n              }\n\n              const {\n                actionsForm_start_date,\n                actionsForm_start_time,\n                actionsForm_end_date,\n                actionsForm_end_time,\n              } = formFieldsValues;\n\n              const startDate = getMomentMergedDateTime(\n                actionsForm_start_date,\n                actionsForm_start_time,\n              );\n              const endDate = getMomentMergedDateTime(actionsForm_end_date, actionsForm_end_time);\n\n              if (endDate < moment()) {\n                return Promise.reject(new Error('End date cannot be earlier than today'));\n              }\n\n              if (startDate > endDate) {\n                return Promise.reject(new Error('End date must be after the start date'));\n              }\n\n              if (startDate.unix() === endDate.unix()) {\n                return Promise.reject(new Error('The start and end times must not be the same'));\n              }\n\n              return Promise.resolve();\n            },\n          },\n        ],\n        child: <TimePickerAntd className=\"actions-section__input\" name=\"end_time\" format=\"HH:mm\" />,\n      },\n    ];\n\n    const {\n      dao: { blockNumber, getBlockNumberAsync },\n    } = useMst();\n    const latestBlockUrl = useScannerUrl(`block/${blockNumber}`);\n\n    useEffect(() => {\n      getBlockNumberAsync();\n    }, [getBlockNumberAsync]);\n\n    return (\n      <FormAntd name=\"actionsForm\" form={form} layout=\"vertical\" onValuesChange={validateForms}>\n        {actionsFormItems.map(({ key, labelClassName, labelContent, rules, child }) => {\n          return (\n            <FormAntd.Item\n              key={key}\n              name={`actionsForm_${key}`}\n              label={\n                <span className={classNames(labelClassName, 'text-ssm text-black')}>\n                  {labelContent}\n                </span>\n              }\n              rules={rules}\n            >\n              {child}\n            </FormAntd.Item>\n          );\n        })}\n        <FormAntd.Item className={snapshotClassName}>\n          <OpenLink\n            href={latestBlockUrl}\n            text={<span className={snapshotTitleClassName}>Snapshot {blockNumber}</span>}\n          />\n        </FormAntd.Item>\n      </FormAntd>\n    );\n  },\n);\n\nexport default ActionsForm;\n"]},"metadata":{},"sourceType":"module"}