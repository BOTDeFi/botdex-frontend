{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n  if (resultSelector) {\n    return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  return new Observable(function (subscriber) {\n    var handler = function () {\n      var e = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        e[_i] = arguments[_i];\n      }\n\n      return subscriber.next(e.length === 1 ? e[0] : e);\n    };\n\n    var retValue = addHandler(handler);\n    return isFunction(removeHandler) ? function () {\n      return removeHandler(handler, retValue);\n    } : undefined;\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/observable/fromEventPattern.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAEA,SAAS,gBAAT,QAAiC,0BAAjC;AA0IA,OAAM,SAAU,gBAAV,CACJ,UADI,EAEJ,aAFI,EAGJ,cAHI,EAGkC;AAEtC,MAAI,cAAJ,EAAoB;AAClB,WAAO,gBAAgB,CAAI,UAAJ,EAAgB,aAAhB,CAAhB,CAA+C,IAA/C,CAAoD,gBAAgB,CAAC,cAAD,CAApE,CAAP;AACD;;AAED,SAAO,IAAI,UAAJ,CAAwB,UAAC,UAAD,EAAW;AACxC,QAAM,OAAO,GAAG,YAAA;AAAC,UAAA,CAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAS;AAAT,QAAA,CAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAAc,aAAA,UAAU,CAAC,IAAX,CAAgB,CAAC,CAAC,MAAF,KAAa,CAAb,GAAiB,CAAC,CAAC,CAAD,CAAlB,GAAwB,CAAxC,CAAA;AAA0C,KAAzE;;AACA,QAAM,QAAQ,GAAG,UAAU,CAAC,OAAD,CAA3B;AACA,WAAO,UAAU,CAAC,aAAD,CAAV,GAA4B,YAAA;AAAM,aAAA,aAAa,CAAC,OAAD,EAAb,QAAa,CAAb;AAAgC,KAAlE,GAAqE,SAA5E;AACD,GAJM,CAAP;AAKD","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    return new Observable(function (subscriber) {\n        var handler = function () {\n            var e = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                e[_i] = arguments[_i];\n            }\n            return subscriber.next(e.length === 1 ? e[0] : e);\n        };\n        var retValue = addHandler(handler);\n        return isFunction(removeHandler) ? function () { return removeHandler(handler, retValue); } : undefined;\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map"]},"metadata":{},"sourceType":"module"}