{"ast":null,"code":"/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\nimport { u } from 'unist-builder';\nimport { all } from './traverse.js';\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array.<Content>}\n */\n\nexport function revert(h, node) {\n  const subtype = node.referenceType;\n  let suffix = ']';\n\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix);\n  }\n\n  const contents = all(h, node);\n  const head = contents[0];\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift(u('text', '['));\n  }\n\n  const tail = contents[contents.length - 1];\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push(u('text', suffix));\n  }\n\n  return contents;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-hast/lib/revert.js"],"names":["u","all","revert","h","node","subtype","referenceType","suffix","label","identifier","type","alt","contents","head","value","unshift","tail","length","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,CAAR,QAAgB,eAAhB;AACA,SAAQC,GAAR,QAAkB,eAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,CAAhB,EAAmBC,IAAnB,EAAyB;AAC9B,QAAMC,OAAO,GAAGD,IAAI,CAACE,aAArB;AACA,MAAIC,MAAM,GAAG,GAAb;;AAEA,MAAIF,OAAO,KAAK,WAAhB,EAA6B;AAC3BE,IAAAA,MAAM,IAAI,IAAV;AACD,GAFD,MAEO,IAAIF,OAAO,KAAK,MAAhB,EAAwB;AAC7BE,IAAAA,MAAM,IAAI,OAAOH,IAAI,CAACI,KAAL,IAAcJ,IAAI,CAACK,UAA1B,IAAwC,GAAlD;AACD;;AAED,MAAIL,IAAI,CAACM,IAAL,KAAc,gBAAlB,EAAoC;AAClC,WAAOV,CAAC,CAAC,MAAD,EAAS,OAAOI,IAAI,CAACO,GAAZ,GAAkBJ,MAA3B,CAAR;AACD;;AAED,QAAMK,QAAQ,GAAGX,GAAG,CAACE,CAAD,EAAIC,IAAJ,CAApB;AACA,QAAMS,IAAI,GAAGD,QAAQ,CAAC,CAAD,CAArB;;AAEA,MAAIC,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAc,MAA1B,EAAkC;AAChCG,IAAAA,IAAI,CAACC,KAAL,GAAa,MAAMD,IAAI,CAACC,KAAxB;AACD,GAFD,MAEO;AACLF,IAAAA,QAAQ,CAACG,OAAT,CAAiBf,CAAC,CAAC,MAAD,EAAS,GAAT,CAAlB;AACD;;AAED,QAAMgB,IAAI,GAAGJ,QAAQ,CAACA,QAAQ,CAACK,MAAT,GAAkB,CAAnB,CAArB;;AAEA,MAAID,IAAI,IAAIA,IAAI,CAACN,IAAL,KAAc,MAA1B,EAAkC;AAChCM,IAAAA,IAAI,CAACF,KAAL,IAAcP,MAAd;AACD,GAFD,MAEO;AACLK,IAAAA,QAAQ,CAACM,IAAT,CAAclB,CAAC,CAAC,MAAD,EAASO,MAAT,CAAf;AACD;;AAED,SAAOK,QAAP;AACD","sourcesContent":["/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array.<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n"]},"metadata":{},"sourceType":"module"}