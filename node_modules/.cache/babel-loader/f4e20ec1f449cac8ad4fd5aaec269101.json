{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport { BLOCKS_PER_YEAR, RP1_PER_YEAR } from '@/config';\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new RP1 allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\n\nexport const getPoolApr = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked);\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber();\n};\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param refineryPriceUsd Refinery price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\n\nexport const getFarmApr = (poolWeight, refineryPriceUsd, poolLiquidityUsd) => {\n  const yearlyRefineryRewardAllocation = RP1_PER_YEAR.times(poolWeight);\n  const refineryRewardsApr = yearlyRefineryRewardAllocation.times(refineryPriceUsd).div(poolLiquidityUsd).times(100);\n  let refineryRewardsAprAsNumber = 0;\n\n  if (!refineryRewardsApr.isNaN() && refineryRewardsApr.isFinite()) {\n    refineryRewardsAprAsNumber = refineryRewardsApr.toNumber();\n  } // TODO: @see https://github.com/pancakeswap/pancake-frontend/pull/1564\n  //       There using some Github Action script to update APR's via Graphql on TheGraph\n  // const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0;\n\n\n  const lpRewardsApr = 0;\n  return {\n    refineryRewardsApr: refineryRewardsAprAsNumber,\n    lpRewardsApr\n  };\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/apr.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","RP1_PER_YEAR","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","refineryPriceUsd","poolLiquidityUsd","yearlyRefineryRewardAllocation","refineryRewardsApr","refineryRewardsAprAsNumber","lpRewardsApr"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AAEA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,UAA9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,iBADwB,EAExBC,gBAFwB,EAGxBC,WAHwB,EAIxBC,aAJwB,KAKN;AAClB,QAAMC,uBAAuB,GAAG,IAAIR,SAAJ,CAAcK,gBAAd,EAC7BI,KAD6B,CACvBF,aADuB,EAE7BE,KAF6B,CAEvBR,eAFuB,CAAhC;AAGA,QAAMS,uBAAuB,GAAG,IAAIV,SAAJ,CAAcI,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC;AACA,QAAMK,GAAG,GAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ;AACA,SAAOE,GAAG,CAACE,KAAJ,MAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,GAAiC,IAAjC,GAAwCH,GAAG,CAACI,QAAJ,EAA/C;AACD,CAZM;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,UADwB,EAExBC,gBAFwB,EAGxBC,gBAHwB,KAKiC;AACzD,QAAMC,8BAA8B,GAAGlB,YAAY,CAACO,KAAb,CAAmBQ,UAAnB,CAAvC;AACA,QAAMI,kBAAkB,GAAGD,8BAA8B,CACtDX,KADwB,CAClBS,gBADkB,EAExBN,GAFwB,CAEpBO,gBAFoB,EAGxBV,KAHwB,CAGlB,GAHkB,CAA3B;AAIA,MAAIa,0BAA0B,GAAG,CAAjC;;AACA,MAAI,CAACD,kBAAkB,CAACR,KAAnB,EAAD,IAA+BQ,kBAAkB,CAACP,QAAnB,EAAnC,EAAkE;AAChEQ,IAAAA,0BAA0B,GAAGD,kBAAkB,CAACN,QAAnB,EAA7B;AACD,GATwD,CAUzD;AACA;AACA;;;AACA,QAAMQ,YAAY,GAAG,CAArB;AACA,SAAO;AAAEF,IAAAA,kBAAkB,EAAEC,0BAAtB;AAAkDC,IAAAA;AAAlD,GAAP;AACD,CApBM","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\n\nimport { BLOCKS_PER_YEAR, RP1_PER_YEAR } from '@/config';\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new RP1 allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number | null => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice)\n    .times(tokenPerBlock)\n    .times(BLOCKS_PER_YEAR);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked);\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber();\n};\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param refineryPriceUsd Refinery price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (\n  poolWeight: BigNumber,\n  refineryPriceUsd: BigNumber,\n  poolLiquidityUsd: BigNumber,\n  // farmAddress: string,\n): { refineryRewardsApr: number; lpRewardsApr: number } => {\n  const yearlyRefineryRewardAllocation = RP1_PER_YEAR.times(poolWeight);\n  const refineryRewardsApr = yearlyRefineryRewardAllocation\n    .times(refineryPriceUsd)\n    .div(poolLiquidityUsd)\n    .times(100);\n  let refineryRewardsAprAsNumber = 0;\n  if (!refineryRewardsApr.isNaN() && refineryRewardsApr.isFinite()) {\n    refineryRewardsAprAsNumber = refineryRewardsApr.toNumber();\n  }\n  // TODO: @see https://github.com/pancakeswap/pancake-frontend/pull/1564\n  //       There using some Github Action script to update APR's via Graphql on TheGraph\n  // const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0;\n  const lpRewardsApr = 0;\n  return { refineryRewardsApr: refineryRewardsAprAsNumber, lpRewardsApr };\n};\n"]},"metadata":{},"sourceType":"module"}