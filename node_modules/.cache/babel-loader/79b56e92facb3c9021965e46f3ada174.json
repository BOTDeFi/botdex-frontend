{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { clog, clogError } from '@/utils/logger';\nimport { useUpdateView } from './useUpdateView';\nconst gasOptions = {\n  gas: 380000\n};\nexport const useVaultStake = onFinally => {\n  _s();\n\n  const {\n    updateViewByFetchingBlockchainData\n  } = useUpdateView();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const refineryVaultContract = getContract('REFINERY_VAULT');\n  const vaultStake = useCallback(async valueToStakeDecimal => {\n    clog('STAKING AUTO ', valueToStakeDecimal.toFixed());\n\n    try {\n      const tx = await callWithGasPrice({\n        contract: refineryVaultContract,\n        methodName: 'deposit',\n        methodArgs: [valueToStakeDecimal.toFixed()],\n        options: gasOptions\n      });\n\n      if (tx.status) {\n        successNotification('Staked!', 'Your funds have been staked in the pool');\n        updateViewByFetchingBlockchainData();\n      }\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      onFinally();\n    }\n  }, [refineryVaultContract, callWithGasPrice, updateViewByFetchingBlockchainData, onFinally]);\n  return {\n    vaultStake\n  };\n};\n\n_s(useVaultStake, \"3teo+9I6eca+m5QwZ951efpaqMQ=\", false, function () {\n  return [useUpdateView, useCallWithGasPrice];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useStakeVault.ts"],"names":["useCallback","errorNotification","successNotification","getContract","useCallWithGasPrice","clog","clogError","useUpdateView","gasOptions","gas","useVaultStake","onFinally","updateViewByFetchingBlockchainData","callWithGasPrice","refineryVaultContract","vaultStake","valueToStakeDecimal","toFixed","tx","contract","methodName","methodArgs","options","status","error"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iCAAvD;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,gBAAhC;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,MAAMC,UAAU,GAAG;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAnB;AAEA,OAAO,MAAMC,aAAa,GAAIC,SAAD,IAA2B;AAAA;;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAyCL,aAAa,EAA5D;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAuBT,mBAAmB,EAAhD;AAEA,QAAMU,qBAAqB,GAAGX,WAAW,CAAC,gBAAD,CAAzC;AAEA,QAAMY,UAAU,GAAGf,WAAW,CAC5B,MAAOgB,mBAAP,IAA0C;AACxCX,IAAAA,IAAI,CAAC,eAAD,EAAkBW,mBAAmB,CAACC,OAApB,EAAlB,CAAJ;;AACA,QAAI;AACF,YAAMC,EAAE,GAAG,MAAML,gBAAgB,CAAC;AAChCM,QAAAA,QAAQ,EAAEL,qBADsB;AAEhCM,QAAAA,UAAU,EAAE,SAFoB;AAGhCC,QAAAA,UAAU,EAAE,CAACL,mBAAmB,CAACC,OAApB,EAAD,CAHoB;AAIhCK,QAAAA,OAAO,EAAEd;AAJuB,OAAD,CAAjC;;AAMA,UAAIU,EAAE,CAACK,MAAP,EAAe;AACbrB,QAAAA,mBAAmB,CAAC,SAAD,EAAY,yCAAZ,CAAnB;AACAU,QAAAA,kCAAkC;AACnC;AACF,KAXD,CAWE,OAAOY,KAAP,EAAc;AACdlB,MAAAA,SAAS,CAACkB,KAAD,CAAT;AACAvB,MAAAA,iBAAiB,CACf,OADe,EAEf,oFAFe,CAAjB;AAID,KAjBD,SAiBU;AACRU,MAAAA,SAAS;AACV;AACF,GAvB2B,EAwB5B,CAACG,qBAAD,EAAwBD,gBAAxB,EAA0CD,kCAA1C,EAA8ED,SAA9E,CAxB4B,CAA9B;AA2BA,SAAO;AAAEI,IAAAA;AAAF,GAAP;AACD,CAlCM;;GAAML,a;UACoCH,a,EAClBH,mB","sourcesContent":["import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { clog, clogError } from '@/utils/logger';\n\nimport { useUpdateView } from './useUpdateView';\n\nconst gasOptions = { gas: 380000 };\n\nexport const useVaultStake = (onFinally: () => void) => {\n  const { updateViewByFetchingBlockchainData } = useUpdateView();\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const refineryVaultContract = getContract('REFINERY_VAULT');\n\n  const vaultStake = useCallback(\n    async (valueToStakeDecimal: BigNumber) => {\n      clog('STAKING AUTO ', valueToStakeDecimal.toFixed());\n      try {\n        const tx = await callWithGasPrice({\n          contract: refineryVaultContract,\n          methodName: 'deposit',\n          methodArgs: [valueToStakeDecimal.toFixed()],\n          options: gasOptions,\n        });\n        if (tx.status) {\n          successNotification('Staked!', 'Your funds have been staked in the pool');\n          updateViewByFetchingBlockchainData();\n        }\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [refineryVaultContract, callWithGasPrice, updateViewByFetchingBlockchainData, onFinally],\n  );\n\n  return { vaultStake };\n};\n"]},"metadata":{},"sourceType":"module"}