{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/FarmsStakeUnstakeModal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\nimport { Button, InputNumber, Slider } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { Modal } from '@/components/molecules';\nimport useStakeFarms from '@/hooks/farms/useStakeFarms';\nimport useUnstakeFarms from '@/hooks/farms/useUnstakeFarms';\nimport { useMst } from '@/store';\nimport { Precisions } from '@/types';\nimport { getTokenUsdPrice } from '@/utils';\nimport { BIG_ZERO, DEFAULT_TOKEN_POWER } from '@/utils/constants';\nimport { getBalanceAmountBN } from '@/utils/formatters';\nimport { clog, clogError } from '@/utils/logger';\nimport './FarmsStakeUnstakeModal.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockData = {\n  additionalCurrency: 'USD'\n};\nconst MAX_PERCENTAGE = 100;\nconst percentBoundariesButtons = [{\n  value: 25,\n  name: '25%'\n}, {\n  value: 50,\n  name: '50%'\n}, {\n  value: 75,\n  name: '75%'\n}, {\n  value: MAX_PERCENTAGE,\n  name: 'Max'\n}];\nconst FarmsStakeUnstakeModal = observer(_c = _s(() => {\n  _s();\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const [percent, setPercent] = useState(MAX_PERCENTAGE / 4);\n  const [inputValue, setInputValue] = useState(BIG_ZERO);\n  const {\n    modals,\n    farms: farmsStore,\n    user\n  } = useMst();\n  const modal = modals.farmsStakeUnstake;\n  const {\n    isStaking,\n    farmId,\n    maxValue: maxStakeUnstakeValueRaw\n  } = modal;\n  const tokenUsdPrice = modal.lpPrice;\n  const {\n    onStake\n  } = useStakeFarms(farmId);\n  const {\n    onUnstake\n  } = useUnstakeFarms(farmId);\n  const maxStakeUnstakeValueBN = useMemo(() => getBalanceAmountBN(new BigNumber(maxStakeUnstakeValueRaw)), [maxStakeUnstakeValueRaw]);\n  const calculateValueByPercent = useCallback(newPercentValue => maxStakeUnstakeValueBN.times(newPercentValue).dividedBy(MAX_PERCENTAGE), [maxStakeUnstakeValueBN]);\n\n  const calculatePercentByValue = newValue => newValue.times(MAX_PERCENTAGE).dividedBy(maxStakeUnstakeValueBN).toNumber();\n\n  const validateInputValue = useCallback(value => {\n    return new BigNumber(new BigNumber(value).toFixed(DEFAULT_TOKEN_POWER));\n  }, []);\n  const updateInputValue = useCallback(newValue => {\n    setInputValue(validateInputValue(newValue));\n  }, [validateInputValue]);\n  const updateValueByPercent = useCallback(newPercent => {\n    updateInputValue(calculateValueByPercent(newPercent));\n  }, [updateInputValue, calculateValueByPercent]);\n\n  const updatePercentByValue = newValue => {\n    const validatedValue = validateInputValue(newValue);\n    setPercent(calculatePercentByValue(validatedValue));\n  };\n\n  const handleValueChange = newValue => {\n    if (newValue === null) return;\n    updateInputValue(newValue);\n    updatePercentByValue(newValue);\n  };\n\n  const handlePercentChange = newPercentValue => {\n    if (percent === newPercentValue) return;\n    setPercent(newPercentValue);\n    updateValueByPercent(newPercentValue);\n  };\n\n  const inputValueAsString = useMemo(() => inputValue.toFixed(), [inputValue]);\n  const handleStake = useCallback(async () => {\n    try {\n      await onStake(inputValueAsString);\n      farmsStore.fetchFarmUserDataAsync(user.address, [farmId]);\n      successNotification('Staked!', 'Your funds have been staked in the farm!');\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      setPendingTx(false);\n    }\n  }, [user.address, farmId, inputValueAsString, farmsStore, onStake]);\n  const handleUnstake = useCallback(async () => {\n    try {\n      await onUnstake(inputValueAsString);\n      farmsStore.fetchFarmUserDataAsync(user.address, [farmId]);\n      successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet!');\n    } catch (error) {\n      clogError(error);\n      errorNotification('Error', 'Please try again. Confirm the transaction and make sure you are paying enough gas!');\n    } finally {\n      setPendingTx(false);\n    }\n  }, [user.address, farmId, inputValueAsString, farmsStore, onUnstake]);\n\n  const handleConfirm = async () => {\n    clog(inputValue);\n    setPendingTx(true);\n\n    if (isStaking) {\n      await handleStake();\n    } else {\n      await handleUnstake();\n    }\n\n    modal.close();\n  };\n\n  useEffect(() => {\n    updateValueByPercent(percent);\n  }, [percent, updateValueByPercent]);\n  useEffect(() => {\n    // for any 'location' changes with opened modal\n    return () => {\n      modal.close();\n    };\n  }, [modal]);\n  const inputValueUsdToDisplay = useMemo(() => getTokenUsdPrice(inputValue, tokenUsdPrice), [inputValue, tokenUsdPrice]);\n  const balanceToDisplay = useMemo(() => maxStakeUnstakeValueBN.toFixed(Precisions.shortToken), [maxStakeUnstakeValueBN]);\n  const isNotEnoughBalanceToStake = maxStakeUnstakeValueRaw === '0';\n  const hasValidationErrors = isNotEnoughBalanceToStake || inputValue.eq(0) || inputValue.isNaN();\n  const {\n    addLiquidityUrl,\n    tokenSymbol\n  } = modal;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isVisible: modal.isOpen,\n    className: \"farms-stake-unstake-modal\",\n    handleCancel: modal.close,\n    width: 390,\n    closeIcon: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"farms-stake-unstake-modal__content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"farms-stake-unstake-modal__title text-smd text-bold text-yellow\",\n        children: isStaking ? 'Stake in Farm' : 'Unstake'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"farms-stake-unstake-modal__subtitle box-f-ai-c box-f-jc-sb\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-yellow text-med text\",\n          children: isStaking ? 'Stake' : 'Unstake'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-f-ai-c farms-stake-unstake-modal__currency text-smd text-yellow\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: tokenSymbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputNumber, {\n        className: \"farms-stake-unstake-modal__input\",\n        value: inputValueAsString,\n        colorScheme: \"outline\",\n        inputSize: \"md\",\n        inputPrefix: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-ssm text-gray\",\n          children: [\"~\", inputValueUsdToDisplay, \" \", mockData.additionalCurrency]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this),\n        prefixPosition: \"button\",\n        min: 0,\n        max: maxStakeUnstakeValueBN.toFixed(),\n        stringMode: true // to support high precision decimals\n        ,\n        onChange: handleValueChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"farms-stake-unstake-modal__balance text-right\",\n        children: [\"Balance: \", balanceToDisplay]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: percent,\n        onChange: handlePercentChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-f-ai-c box-f-jc-sb farms-stake-unstake-modal__btns\",\n        children: percentBoundariesButtons.map(({\n          value,\n          name = value\n        }) => /*#__PURE__*/_jsxDEV(Button, {\n          colorScheme: \"yellow-l\",\n          size: \"smd\",\n          onClick: () => handlePercentChange(value),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-ssmd\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"farms-stake-unstake-modal__btn\",\n        loading: pendingTx,\n        disabled: hasValidationErrors,\n        onClick: hasValidationErrors ? undefined : handleConfirm,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white text-bold text-smd\",\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), isStaking && /*#__PURE__*/_jsxDEV(Button, {\n        className: \"farms-stake-unstake-modal__btn farms-stake-unstake-modal__btn-get-currency\",\n        colorScheme: \"outline-purple\",\n        link: addLiquidityUrl,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-bold text-smd\",\n          children: [\"Get \", tokenSymbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}, \"W7JsFNpP87EoEwg+N+wzCK2iqf4=\", false, function () {\n  return [useMst, useStakeFarms, useUnstakeFarms];\n}));\n_c2 = FarmsStakeUnstakeModal;\nexport default FarmsStakeUnstakeModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FarmsStakeUnstakeModal$observer\");\n$RefreshReg$(_c2, \"FarmsStakeUnstakeModal\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/FarmsStakeUnstakeModal/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","BigNumber","observer","Button","InputNumber","Slider","errorNotification","successNotification","Modal","useStakeFarms","useUnstakeFarms","useMst","Precisions","getTokenUsdPrice","BIG_ZERO","DEFAULT_TOKEN_POWER","getBalanceAmountBN","clog","clogError","mockData","additionalCurrency","MAX_PERCENTAGE","percentBoundariesButtons","value","name","FarmsStakeUnstakeModal","pendingTx","setPendingTx","percent","setPercent","inputValue","setInputValue","modals","farms","farmsStore","user","modal","farmsStakeUnstake","isStaking","farmId","maxValue","maxStakeUnstakeValueRaw","tokenUsdPrice","lpPrice","onStake","onUnstake","maxStakeUnstakeValueBN","calculateValueByPercent","newPercentValue","times","dividedBy","calculatePercentByValue","newValue","toNumber","validateInputValue","toFixed","updateInputValue","updateValueByPercent","newPercent","updatePercentByValue","validatedValue","handleValueChange","handlePercentChange","inputValueAsString","handleStake","fetchFarmUserDataAsync","address","error","handleUnstake","handleConfirm","close","inputValueUsdToDisplay","balanceToDisplay","shortToken","isNotEnoughBalanceToStake","hasValidationErrors","eq","isNaN","addLiquidityUrl","tokenSymbol","isOpen","map","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\nimport { ValueType } from 'rc-input-number/lib/utils/MiniDecimal';\n\nimport { Button, InputNumber, Slider } from '@/components/atoms';\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { Modal } from '@/components/molecules';\nimport useStakeFarms from '@/hooks/farms/useStakeFarms';\nimport useUnstakeFarms from '@/hooks/farms/useUnstakeFarms';\nimport { useMst } from '@/store';\nimport { Precisions } from '@/types';\nimport { getTokenUsdPrice } from '@/utils';\nimport { BIG_ZERO, DEFAULT_TOKEN_POWER } from '@/utils/constants';\nimport { getBalanceAmountBN } from '@/utils/formatters';\nimport { clog, clogError } from '@/utils/logger';\n\nimport './FarmsStakeUnstakeModal.scss';\n\nconst mockData = {\n  additionalCurrency: 'USD',\n};\n\nconst MAX_PERCENTAGE = 100;\nconst percentBoundariesButtons = [\n  {\n    value: 25,\n    name: '25%',\n  },\n  {\n    value: 50,\n    name: '50%',\n  },\n  {\n    value: 75,\n    name: '75%',\n  },\n  {\n    value: MAX_PERCENTAGE,\n    name: 'Max',\n  },\n];\n\nconst FarmsStakeUnstakeModal: React.FC = observer(() => {\n  const [pendingTx, setPendingTx] = useState(false);\n  const [percent, setPercent] = useState(MAX_PERCENTAGE / 4);\n  const [inputValue, setInputValue] = useState(BIG_ZERO);\n\n  const { modals, farms: farmsStore, user } = useMst();\n  const modal = modals.farmsStakeUnstake;\n  const { isStaking, farmId, maxValue: maxStakeUnstakeValueRaw } = modal;\n  const tokenUsdPrice = modal.lpPrice;\n  const { onStake } = useStakeFarms(farmId);\n  const { onUnstake } = useUnstakeFarms(farmId);\n\n  const maxStakeUnstakeValueBN = useMemo(\n    () => getBalanceAmountBN(new BigNumber(maxStakeUnstakeValueRaw)),\n    [maxStakeUnstakeValueRaw],\n  );\n\n  const calculateValueByPercent = useCallback(\n    (newPercentValue: number) =>\n      maxStakeUnstakeValueBN.times(newPercentValue).dividedBy(MAX_PERCENTAGE),\n    [maxStakeUnstakeValueBN],\n  );\n  const calculatePercentByValue = (newValue: BigNumber) =>\n    newValue.times(MAX_PERCENTAGE).dividedBy(maxStakeUnstakeValueBN).toNumber();\n\n  const validateInputValue = useCallback((value: string | number | BigNumber) => {\n    return new BigNumber(new BigNumber(value).toFixed(DEFAULT_TOKEN_POWER));\n  }, []);\n\n  const updateInputValue = useCallback(\n    (newValue: string | number | BigNumber) => {\n      setInputValue(validateInputValue(newValue));\n    },\n    [validateInputValue],\n  );\n\n  const updateValueByPercent = useCallback(\n    (newPercent: number) => {\n      updateInputValue(calculateValueByPercent(newPercent));\n    },\n    [updateInputValue, calculateValueByPercent],\n  );\n  const updatePercentByValue = (newValue: string | number | BigNumber) => {\n    const validatedValue = validateInputValue(newValue);\n    setPercent(calculatePercentByValue(validatedValue));\n  };\n\n  const handleValueChange = (newValue: ValueType | null) => {\n    if (newValue === null) return;\n    updateInputValue(newValue);\n    updatePercentByValue(newValue);\n  };\n\n  const handlePercentChange = (newPercentValue: number) => {\n    if (percent === newPercentValue) return;\n    setPercent(newPercentValue);\n    updateValueByPercent(newPercentValue);\n  };\n\n  const inputValueAsString = useMemo(() => inputValue.toFixed(), [inputValue]);\n  const handleStake = useCallback(async () => {\n    try {\n      await onStake(inputValueAsString);\n      farmsStore.fetchFarmUserDataAsync(user.address, [farmId]);\n      successNotification('Staked!', 'Your funds have been staked in the farm!');\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    } finally {\n      setPendingTx(false);\n    }\n  }, [user.address, farmId, inputValueAsString, farmsStore, onStake]);\n\n  const handleUnstake = useCallback(async () => {\n    try {\n      await onUnstake(inputValueAsString);\n      farmsStore.fetchFarmUserDataAsync(user.address, [farmId]);\n      successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet!');\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    } finally {\n      setPendingTx(false);\n    }\n  }, [user.address, farmId, inputValueAsString, farmsStore, onUnstake]);\n\n  const handleConfirm = async () => {\n    clog(inputValue);\n    setPendingTx(true);\n    if (isStaking) {\n      await handleStake();\n    } else {\n      await handleUnstake();\n    }\n    modal.close();\n  };\n\n  useEffect(() => {\n    updateValueByPercent(percent);\n  }, [percent, updateValueByPercent]);\n\n  useEffect(() => {\n    // for any 'location' changes with opened modal\n    return () => {\n      modal.close();\n    };\n  }, [modal]);\n\n  const inputValueUsdToDisplay = useMemo(() => getTokenUsdPrice(inputValue, tokenUsdPrice), [\n    inputValue,\n    tokenUsdPrice,\n  ]);\n  const balanceToDisplay = useMemo(() => maxStakeUnstakeValueBN.toFixed(Precisions.shortToken), [\n    maxStakeUnstakeValueBN,\n  ]);\n\n  const isNotEnoughBalanceToStake = maxStakeUnstakeValueRaw === '0';\n  const hasValidationErrors = isNotEnoughBalanceToStake || inputValue.eq(0) || inputValue.isNaN();\n\n  const { addLiquidityUrl, tokenSymbol } = modal;\n\n  return (\n    <Modal\n      isVisible={modal.isOpen}\n      className=\"farms-stake-unstake-modal\"\n      handleCancel={modal.close}\n      width={390}\n      closeIcon\n    >\n      <div className=\"farms-stake-unstake-modal__content\">\n        <div className=\"farms-stake-unstake-modal__title text-smd text-bold text-yellow\">\n          {isStaking ? 'Stake in Farm' : 'Unstake'}\n        </div>\n        <div className=\"farms-stake-unstake-modal__subtitle box-f-ai-c box-f-jc-sb\">\n          <span className=\"text-yellow text-med text\">{isStaking ? 'Stake' : 'Unstake'}</span>\n          <div className=\"box-f-ai-c farms-stake-unstake-modal__currency text-smd text-yellow\">\n            <span>{tokenSymbol}</span>\n          </div>\n        </div>\n        <InputNumber\n          className=\"farms-stake-unstake-modal__input\"\n          value={inputValueAsString}\n          colorScheme=\"outline\"\n          inputSize=\"md\"\n          inputPrefix={\n            <span className=\"text-ssm text-gray\">\n              ~{inputValueUsdToDisplay} {mockData.additionalCurrency}\n            </span>\n          }\n          prefixPosition=\"button\"\n          min={0}\n          max={maxStakeUnstakeValueBN.toFixed()}\n          stringMode // to support high precision decimals\n          onChange={handleValueChange}\n        />\n        <div className=\"farms-stake-unstake-modal__balance text-right\">\n          Balance: {balanceToDisplay}\n        </div>\n        <Slider value={percent} onChange={handlePercentChange} />\n        <div className=\"box-f-ai-c box-f-jc-sb farms-stake-unstake-modal__btns\">\n          {percentBoundariesButtons.map(({ value, name = value }) => (\n            <Button\n              colorScheme=\"yellow-l\"\n              size=\"smd\"\n              key={name}\n              onClick={() => handlePercentChange(value)}\n            >\n              <span className=\"text-ssmd\">{name}</span>\n            </Button>\n          ))}\n        </div>\n        <Button\n          className=\"farms-stake-unstake-modal__btn\"\n          loading={pendingTx}\n          disabled={hasValidationErrors}\n          onClick={hasValidationErrors ? undefined : handleConfirm}\n        >\n          <span className=\"text-white text-bold text-smd\">Confirm</span>\n        </Button>\n        {isStaking && (\n          <Button\n            className=\"farms-stake-unstake-modal__btn farms-stake-unstake-modal__btn-get-currency\"\n            colorScheme=\"outline-purple\"\n            link={addLiquidityUrl}\n          >\n            <span className=\"text-bold text-smd\">Get {tokenSymbol}</span>\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n});\n\nexport default FarmsStakeUnstakeModal;\n"]},"metadata":{},"sourceType":"module"}