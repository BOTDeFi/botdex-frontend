{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/TotalStaked/index.tsx\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Skeleton } from '@/components/atoms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TotalStaked = ({\n  value,\n  currencySymbol,\n  onlyDesktop = false\n}) => {\n  const isLoading = Number.isNaN(Number(value));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames('pools-table-row__total-staked', 'pools-table-row__item', 'box-f-ai-c', 'text-smd', {\n      't-box-none': onlyDesktop\n    }),\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Skeleton.Input, {\n      style: {\n        width: 120\n      },\n      size: \"small\",\n      active: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-med text-yellow\",\n      children: [value, \" \", currencySymbol]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TotalStaked;\nexport default TotalStaked;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalStaked\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/TotalStaked/index.tsx"],"names":["React","classNames","Skeleton","TotalStaked","value","currencySymbol","onlyDesktop","isLoading","Number","isNaN","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,QAAT,QAAyB,oBAAzB;;;AASA,MAAMC,WAA8C,GAAG,CAAC;AACtDC,EAAAA,KADsD;AAEtDC,EAAAA,cAFsD;AAGtDC,EAAAA,WAAW,GAAG;AAHwC,CAAD,KAIjD;AACJ,QAAMC,SAAS,GAAGC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACJ,KAAD,CAAnB,CAAlB;AACA,sBACE;AACE,IAAA,SAAS,EAAEH,UAAU,CACnB,+BADmB,EAEnB,uBAFmB,EAGnB,YAHmB,EAInB,UAJmB,EAKnB;AACE,oBAAcK;AADhB,KALmB,CADvB;AAAA,cAWGC,SAAS,gBACR,QAAC,QAAD,CAAU,KAAV;AAAgB,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAAvB;AAAuC,MAAA,IAAI,EAAC,OAA5C;AAAoD,MAAA,MAAM;AAA1D;AAAA;AAAA;AAAA;AAAA,YADQ,gBAGR;AAAM,MAAA,SAAS,EAAC,sBAAhB;AAAA,iBACGN,KADH,OACWC,cADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAdJ;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA3BD;;KAAMF,W;AA6BN,eAAeA,WAAf","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Skeleton } from '@/components/atoms';\n\nimport { IColumn } from '../types';\n\ninterface ITotalStakedColumnProps extends IColumn {\n  value: string;\n  currencySymbol: string;\n}\n\nconst TotalStaked: React.FC<ITotalStakedColumnProps> = ({\n  value,\n  currencySymbol,\n  onlyDesktop = false,\n}) => {\n  const isLoading = Number.isNaN(Number(value));\n  return (\n    <div\n      className={classNames(\n        'pools-table-row__total-staked',\n        'pools-table-row__item',\n        'box-f-ai-c',\n        'text-smd',\n        {\n          't-box-none': onlyDesktop,\n        },\n      )}\n    >\n      {isLoading ? (\n        <Skeleton.Input style={{ width: 120 }} size=\"small\" active />\n      ) : (\n        <span className=\"text-med text-yellow\">\n          {value} {currencySymbol}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default TotalStaked;\n"]},"metadata":{},"sourceType":"module"}