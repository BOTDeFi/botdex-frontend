{"ast":null,"code":"import getLength from './_getLength.js';\nimport isArrayLike from './_isArrayLike.js';\nimport isArray from './isArray.js';\nimport isArguments from './isArguments.js'; // Internal implementation of a recursive `flatten` function.\n\nexport default function flatten(input, depth, strict, output) {\n  output = output || [];\n\n  if (!depth && depth !== 0) {\n    depth = Infinity;\n  } else if (depth <= 0) {\n    return output.concat(input);\n  }\n\n  var idx = output.length;\n\n  for (var i = 0, length = getLength(input); i < length; i++) {\n    var value = input[i];\n\n    if (isArrayLike(value) && (isArray(value) || isArguments(value))) {\n      // Flatten current level of array or arguments object.\n      if (depth > 1) {\n        flatten(value, depth - 1, strict, output);\n        idx = output.length;\n      } else {\n        var j = 0,\n            len = value.length;\n\n        while (j < len) output[idx++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/underscore/modules/_flatten.js"],"names":["getLength","isArrayLike","isArray","isArguments","flatten","input","depth","strict","output","Infinity","concat","idx","length","i","value","j","len"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,kBAAxB,C,CAEA;;AACA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;AAC5DA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,MAAI,CAACF,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;AACzBA,IAAAA,KAAK,GAAGG,QAAR;AACD,GAFD,MAEO,IAAIH,KAAK,IAAI,CAAb,EAAgB;AACrB,WAAOE,MAAM,CAACE,MAAP,CAAcL,KAAd,CAAP;AACD;;AACD,MAAIM,GAAG,GAAGH,MAAM,CAACI,MAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWD,MAAM,GAAGZ,SAAS,CAACK,KAAD,CAAlC,EAA2CQ,CAAC,GAAGD,MAA/C,EAAuDC,CAAC,EAAxD,EAA4D;AAC1D,QAAIC,KAAK,GAAGT,KAAK,CAACQ,CAAD,CAAjB;;AACA,QAAIZ,WAAW,CAACa,KAAD,CAAX,KAAuBZ,OAAO,CAACY,KAAD,CAAP,IAAkBX,WAAW,CAACW,KAAD,CAApD,CAAJ,EAAkE;AAChE;AACA,UAAIR,KAAK,GAAG,CAAZ,EAAe;AACbF,QAAAA,OAAO,CAACU,KAAD,EAAQR,KAAK,GAAG,CAAhB,EAAmBC,MAAnB,EAA2BC,MAA3B,CAAP;AACAG,QAAAA,GAAG,GAAGH,MAAM,CAACI,MAAb;AACD,OAHD,MAGO;AACL,YAAIG,CAAC,GAAG,CAAR;AAAA,YAAWC,GAAG,GAAGF,KAAK,CAACF,MAAvB;;AACA,eAAOG,CAAC,GAAGC,GAAX,EAAgBR,MAAM,CAACG,GAAG,EAAJ,CAAN,GAAgBG,KAAK,CAACC,CAAC,EAAF,CAArB;AACjB;AACF,KATD,MASO,IAAI,CAACR,MAAL,EAAa;AAClBC,MAAAA,MAAM,CAACG,GAAG,EAAJ,CAAN,GAAgBG,KAAhB;AACD;AACF;;AACD,SAAON,MAAP;AACD","sourcesContent":["import getLength from './_getLength.js';\nimport isArrayLike from './_isArrayLike.js';\nimport isArray from './isArray.js';\nimport isArguments from './isArguments.js';\n\n// Internal implementation of a recursive `flatten` function.\nexport default function flatten(input, depth, strict, output) {\n  output = output || [];\n  if (!depth && depth !== 0) {\n    depth = Infinity;\n  } else if (depth <= 0) {\n    return output.concat(input);\n  }\n  var idx = output.length;\n  for (var i = 0, length = getLength(input); i < length; i++) {\n    var value = input[i];\n    if (isArrayLike(value) && (isArray(value) || isArguments(value))) {\n      // Flatten current level of array or arguments object.\n      if (depth > 1) {\n        flatten(value, depth - 1, strict, output);\n        idx = output.length;\n      } else {\n        var j = 0, len = value.length;\n        while (j < len) output[idx++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}