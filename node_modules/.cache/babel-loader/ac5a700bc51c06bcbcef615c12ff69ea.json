{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { labelEnd } from './label-end.js';\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage');\n    effects.enter('labelImageMarker');\n    effects.consume(code);\n    effects.exit('labelImageMarker');\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker');\n      effects.consume(code);\n      effects.exit('labelMarker');\n      effects.exit('labelImage');\n      return after;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-core-commonmark/lib/label-start-image.js"],"names":["labelEnd","labelStartImage","name","tokenize","tokenizeLabelStartImage","resolveAll","effects","ok","nok","self","start","code","enter","consume","exit","open","after","parser","constructs"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,QAAR,QAAuB,gBAAvB;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,iBADuB;AAE7BC,EAAAA,QAAQ,EAAEC,uBAFmB;AAG7BC,EAAAA,UAAU,EAAEL,QAAQ,CAACK;AAHQ,CAAxB;AAKP;;AAEA,SAASD,uBAAT,CAAiCE,OAAjC,EAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;AACjD,QAAMC,IAAI,GAAG,IAAb;AACA,SAAOC,KAAP;AACA;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBL,IAAAA,OAAO,CAACM,KAAR,CAAc,YAAd;AACAN,IAAAA,OAAO,CAACM,KAAR,CAAc,kBAAd;AACAN,IAAAA,OAAO,CAACO,OAAR,CAAgBF,IAAhB;AACAL,IAAAA,OAAO,CAACQ,IAAR,CAAa,kBAAb;AACA,WAAOC,IAAP;AACD;AACD;;;AAEA,WAASA,IAAT,CAAcJ,IAAd,EAAoB;AAClB,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACfL,MAAAA,OAAO,CAACM,KAAR,CAAc,aAAd;AACAN,MAAAA,OAAO,CAACO,OAAR,CAAgBF,IAAhB;AACAL,MAAAA,OAAO,CAACQ,IAAR,CAAa,aAAb;AACAR,MAAAA,OAAO,CAACQ,IAAR,CAAa,YAAb;AACA,aAAOE,KAAP;AACD;;AAED,WAAOR,GAAG,CAACG,IAAD,CAAV;AACD;AACD;;;AAEA,WAASK,KAAT,CAAeL,IAAf,EAAqB;AACnB;;AAEA;AACA,WAAOA,IAAI,KAAK,EAAT,IAAe,4BAA4BF,IAAI,CAACQ,MAAL,CAAYC,UAAvD,GACHV,GAAG,CAACG,IAAD,CADA,GAEHJ,EAAE,CAACI,IAAD,CAFN;AAGD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}