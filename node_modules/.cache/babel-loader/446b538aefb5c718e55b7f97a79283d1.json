{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useWithdrawalFeeTimer = (lastDepositedTime, userShares, withdrawalFeePeriod = 259200) => {\n  _s();\n\n  const [secondsRemaining, setSecondsRemaining] = useState(null);\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false);\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000));\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod;\n    const secondsRemainingCalc = feeEndTime - currentSeconds;\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0;\n\n    const tick = () => {\n      setCurrentSeconds(prevSeconds => prevSeconds + 1);\n    };\n\n    const timerInterval = setInterval(() => tick(), 1000);\n\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc);\n      setHasUnstakingFee(true);\n    } else {\n      setHasUnstakingFee(false);\n      clearInterval(timerInterval);\n    }\n\n    return () => clearInterval(timerInterval);\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares]);\n  return {\n    hasUnstakingFee,\n    secondsRemaining\n  };\n};\n\n_s(useWithdrawalFeeTimer, \"AKhu/nLNlDI69v08ggl2JO+xkc0=\");\n\nexport default useWithdrawalFeeTimer;","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useWithdrawalTimer.ts"],"names":["useEffect","useState","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","currentSeconds","setCurrentSeconds","Math","floor","Date","now","feeEndTime","secondsRemainingCalc","doesUnstakingFeeApply","gt","tick","prevSeconds","timerInterval","setInterval","clearInterval"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,MAAMC,qBAAqB,GAAG,CAC5BC,iBAD4B,EAE5BC,UAF4B,EAG5BC,mBAAmB,GAAG,MAHM,KAIzB;AAAA;;AACH,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CN,QAAQ,CAAgB,IAAhB,CAAxD;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAACW,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAAD,CAApD;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,UAAU,GAAGb,iBAAiB,GAAGE,mBAAvC;AACA,UAAMY,oBAAoB,GAAGD,UAAU,GAAGN,cAA1C;AACA,UAAMQ,qBAAqB,GAAGd,UAAU,CAACe,EAAX,CAAc,CAAd,KAAoBF,oBAAoB,GAAG,CAAzE;;AAEA,UAAMG,IAAI,GAAG,MAAM;AACjBT,MAAAA,iBAAiB,CAAEU,WAAD,IAAiBA,WAAW,GAAG,CAAhC,CAAjB;AACD,KAFD;;AAGA,UAAMC,aAAa,GAAGC,WAAW,CAAC,MAAMH,IAAI,EAAX,EAAe,IAAf,CAAjC;;AACA,QAAIF,qBAAJ,EAA2B;AACzBX,MAAAA,mBAAmB,CAACU,oBAAD,CAAnB;AACAR,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAHD,MAGO;AACLA,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAe,MAAAA,aAAa,CAACF,aAAD,CAAb;AACD;;AAED,WAAO,MAAME,aAAa,CAACF,aAAD,CAA1B;AACD,GAlBQ,EAkBN,CAACnB,iBAAD,EAAoBE,mBAApB,EAAyCE,mBAAzC,EAA8DG,cAA9D,EAA8EN,UAA9E,CAlBM,CAAT;AAoBA,SAAO;AAAEI,IAAAA,eAAF;AAAmBF,IAAAA;AAAnB,GAAP;AACD,CA9BD;;GAAMJ,qB;;AAgCN,eAAeA,qBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\n\nconst useWithdrawalFeeTimer = (\n  lastDepositedTime: number,\n  userShares: BigNumber,\n  withdrawalFeePeriod = 259200,\n) => {\n  const [secondsRemaining, setSecondsRemaining] = useState<number | null>(null);\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false);\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000));\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod;\n    const secondsRemainingCalc = feeEndTime - currentSeconds;\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0;\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1);\n    };\n    const timerInterval = setInterval(() => tick(), 1000);\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc);\n      setHasUnstakingFee(true);\n    } else {\n      setHasUnstakingFee(false);\n      clearInterval(timerInterval);\n    }\n\n    return () => clearInterval(timerInterval);\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares]);\n\n  return { hasUnstakingFee, secondsRemaining };\n};\n\nexport default useWithdrawalFeeTimer;\n"]},"metadata":{},"sourceType":"module"}