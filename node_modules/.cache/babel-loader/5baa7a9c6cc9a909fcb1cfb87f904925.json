{"ast":null,"code":"import { metamaskService } from '@/services/MetamaskConnect';\nimport MetamaskService from '@/services/web3';\nimport { getContract } from '@/services/web3/contractHelpers';\nexport const multicall = async (abi, calls, options = {\n  requireSuccess: true\n}) => {\n  const {\n    requireSuccess\n  } = options;\n  const multiCallContract = getContract('MULTICALL');\n  const contract = metamaskService.getContract(calls[0].address, abi);\n  const callData = calls.map(call => {\n    const {\n      address,\n      name,\n      params\n    } = call;\n    const method = contract.methods[name];\n    const txObject = params ? method(...params) : method();\n    return [address.toLowerCase(), txObject.encodeABI()];\n  });\n  const returnData = await multiCallContract.methods.tryAggregate(requireSuccess, callData).call();\n  const res = returnData.map((call, index) => {\n    const [result, data] = call;\n    if (!result) return null;\n    const methodInterface = MetamaskService.getMethodInterface(abi, calls[index].name);\n    const decodedResult = metamaskService.web3Provider.eth.abi.decodeParameters(methodInterface.outputs, data);\n    return Array.from({ ...decodedResult,\n      // eslint-disable-next-line no-underscore-dangle\n      length: decodedResult.__length__\n    });\n  });\n  return res;\n};","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/multicall.ts"],"names":["metamaskService","MetamaskService","getContract","multicall","abi","calls","options","requireSuccess","multiCallContract","contract","address","callData","map","call","name","params","method","methods","txObject","toLowerCase","encodeABI","returnData","tryAggregate","res","index","result","data","methodInterface","getMethodInterface","decodedResult","web3Provider","eth","decodeParameters","outputs","Array","from","length","__length__"],"mappings":"AAAA,SAASA,eAAT,QAAgC,4BAAhC;AACA,OAAOC,eAAP,MAA4B,iBAA5B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAcA,OAAO,MAAMC,SAAS,GAAG,OACvBC,GADuB,EAEvBC,KAFuB,EAGvBC,OAAyB,GAAG;AAAEC,EAAAA,cAAc,EAAE;AAAlB,CAHL,KAIW;AAClC,QAAM;AAAEA,IAAAA;AAAF,MAAqBD,OAA3B;AACA,QAAME,iBAAiB,GAAGN,WAAW,CAAC,WAAD,CAArC;AAEA,QAAMO,QAAQ,GAAGT,eAAe,CAACE,WAAhB,CAA4BG,KAAK,CAAC,CAAD,CAAL,CAASK,OAArC,EAA8CN,GAA9C,CAAjB;AAEA,QAAMO,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAWC,IAAD,IAAU;AACnC,UAAM;AAAEH,MAAAA,OAAF;AAAWI,MAAAA,IAAX;AAAiBC,MAAAA;AAAjB,QAA4BF,IAAlC;AACA,UAAMG,MAAM,GAAGP,QAAQ,CAACQ,OAAT,CAAiBH,IAAjB,CAAf;AACA,UAAMI,QAAQ,GAAGH,MAAM,GAAGC,MAAM,CAAC,GAAGD,MAAJ,CAAT,GAAuBC,MAAM,EAApD;AACA,WAAO,CAACN,OAAO,CAACS,WAAR,EAAD,EAAwBD,QAAQ,CAACE,SAAT,EAAxB,CAAP;AACD,GALgB,CAAjB;AAOA,QAAMC,UAAU,GAAG,MAAMb,iBAAiB,CAACS,OAAlB,CAA0BK,YAA1B,CAAuCf,cAAvC,EAAuDI,QAAvD,EAAiEE,IAAjE,EAAzB;AACA,QAAMU,GAAG,GAAGF,UAAU,CAACT,GAAX,CAAe,CAACC,IAAD,EAAYW,KAAZ,KAA8B;AACvD,UAAM,CAACC,MAAD,EAASC,IAAT,IAAiBb,IAAvB;AACA,QAAI,CAACY,MAAL,EAAa,OAAO,IAAP;AACb,UAAME,eAAe,GAAG1B,eAAe,CAAC2B,kBAAhB,CAAmCxB,GAAnC,EAAwCC,KAAK,CAACmB,KAAD,CAAL,CAAaV,IAArD,CAAxB;AACA,UAAMe,aAAa,GAAG7B,eAAe,CAAC8B,YAAhB,CAA6BC,GAA7B,CAAiC3B,GAAjC,CAAqC4B,gBAArC,CACpBL,eAAe,CAACM,OADI,EAEpBP,IAFoB,CAAtB;AAIA,WAAOQ,KAAK,CAACC,IAAN,CAAW,EAChB,GAAGN,aADa;AAEhB;AACAO,MAAAA,MAAM,EAAEP,aAAa,CAACQ;AAHN,KAAX,CAAP;AAKD,GAbW,CAAZ;AAeA,SAAOd,GAAP;AACD,CAlCM","sourcesContent":["import { metamaskService } from '@/services/MetamaskConnect';\nimport MetamaskService from '@/services/web3';\nimport { getContract } from '@/services/web3/contractHelpers';\n\nexport interface Call {\n  address: string; // Address of the contract\n  name: string; // Function name on the contract (example: balanceOf)\n  params?: any[]; // Function params\n}\n\ninterface MulticallOptions {\n  requireSuccess?: boolean;\n}\n\nexport type MultiCallResponse<T> = T | null;\n\nexport const multicall = async <T = any>(\n  abi: any[],\n  calls: Call[],\n  options: MulticallOptions = { requireSuccess: true },\n): Promise<MultiCallResponse<T>> => {\n  const { requireSuccess } = options;\n  const multiCallContract = getContract('MULTICALL');\n\n  const contract = metamaskService.getContract(calls[0].address, abi);\n\n  const callData = calls.map((call) => {\n    const { address, name, params } = call;\n    const method = contract.methods[name];\n    const txObject = params ? method(...params) : method();\n    return [address.toLowerCase(), txObject.encodeABI()];\n  });\n\n  const returnData = await multiCallContract.methods.tryAggregate(requireSuccess, callData).call();\n  const res = returnData.map((call: any, index: number) => {\n    const [result, data] = call;\n    if (!result) return null;\n    const methodInterface = MetamaskService.getMethodInterface(abi, calls[index].name);\n    const decodedResult = metamaskService.web3Provider.eth.abi.decodeParameters(\n      methodInterface.outputs,\n      data,\n    );\n    return Array.from({\n      ...decodedResult,\n      // eslint-disable-next-line no-underscore-dangle\n      length: decodedResult.__length__,\n    });\n  });\n\n  return res;\n};\n"]},"metadata":{},"sourceType":"module"}