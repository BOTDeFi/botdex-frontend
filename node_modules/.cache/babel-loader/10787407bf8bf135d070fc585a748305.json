{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\n\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n\n  let content;\n  /** @type {Token} */\n\n  let text; // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2;\n  } // Suffix whitespace, part of the closing.\n\n\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === 'whitespace') {\n    contentEnd -= 2;\n  }\n\n  if (events[contentEnd][1].type === 'atxHeadingSequence' && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === 'whitespace')) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading');\n    effects.enter('atxHeadingSequence');\n    return fenceOpenInside(code);\n  }\n  /** @type {State} */\n\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return fenceOpenInside;\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence');\n      return self.interrupt ? ok(code) : headingBreak(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence');\n      return sequence(code);\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading');\n      return ok(code);\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code);\n    }\n\n    effects.enter('atxHeadingText');\n    return data(code);\n  }\n  /** @type {State} */\n\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequence;\n    }\n\n    effects.exit('atxHeadingSequence');\n    return headingBreak(code);\n  }\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText');\n      return headingBreak(code);\n    }\n\n    effects.consume(code);\n    return data;\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-core-commonmark/lib/heading-atx.js"],"names":["factorySpace","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","splice","headingAtx","name","tokenize","tokenizeHeadingAtx","resolve","resolveHeadingAtx","events","context","contentEnd","length","contentStart","content","text","type","start","end","contentType","effects","ok","nok","self","size","code","enter","fenceOpenInside","consume","exit","interrupt","headingBreak","sequence","data"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}