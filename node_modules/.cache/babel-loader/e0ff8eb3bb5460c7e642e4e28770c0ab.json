{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Button/index.tsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button as BtnAntd } from 'antd';\nimport classNames from 'classnames';\nimport { ReactComponent as ArrowImg } from \"@svgr/webpack?-svgo,+titleProp,+ref!@/assets/img/icons/arrow-btn.svg\";\nimport 'antd/lib/button/style/css';\nimport './Button.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Button = /*#__PURE__*/React.memo(_c = ({\n  children,\n  className,\n  size = 'md',\n  colorScheme = 'purple',\n  onClick,\n  disabled = false,\n  loading = false,\n  link,\n  linkClassName,\n  icon,\n  arrow,\n  toggle,\n  isActive = null,\n  onToggle,\n  noclick,\n  loadingText,\n  title,\n  onKeyDown\n}) => {\n  const handleClick = e => {\n    if (!link) e.stopPropagation();\n\n    if (toggle && onToggle) {\n      onToggle(!isActive);\n    }\n\n    return onClick && onClick();\n  };\n\n  const BtnContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [icon ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: icon,\n      alt: \"icon\",\n      className: \"btn-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), children, arrow ? /*#__PURE__*/_jsxDEV(ArrowImg, {\n      className: \"btn__arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 18\n    }, this) : '']\n  }, void 0, true);\n\n  const Btn = /*#__PURE__*/_jsxDEV(BtnAntd, {\n    className: classNames(className || '', 'text btn box-f-c', `btn-${size}`, `btn-${colorScheme}`, {\n      'btn-loading': loading,\n      'active': isActive,\n      noclick\n    }),\n    title: title,\n    disabled: disabled || loading,\n    onClick: handleClick,\n    onKeyDown: onKeyDown,\n    children: loading ? `${loadingText || 'In progress...'}` : BtnContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n\n  if (link) {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      className: classNames('btn-link', linkClassName),\n      to: link,\n      children: Btn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this);\n  }\n\n  return Btn;\n});\n_c2 = Button;\nexport default Button;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button$React.memo\");\n$RefreshReg$(_c2, \"Button\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Button/index.tsx"],"names":["React","Link","Button","BtnAntd","classNames","memo","children","className","size","colorScheme","onClick","disabled","loading","link","linkClassName","icon","arrow","toggle","isActive","onToggle","noclick","loadingText","title","onKeyDown","handleClick","e","stopPropagation","BtnContent","Btn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAM,IAAIC,OAAnB,QAAkC,MAAlC;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAIA,OAAO,2BAAP;AAEA,OAAO,eAAP;;;AAuCA,MAAMF,MAA6B,gBAAGF,KAAK,CAACK,IAAN,MACpC,CAAC;AACCC,EAAAA,QADD;AAECC,EAAAA,SAFD;AAGCC,EAAAA,IAAI,GAAG,IAHR;AAICC,EAAAA,WAAW,GAAG,QAJf;AAKCC,EAAAA,OALD;AAMCC,EAAAA,QAAQ,GAAG,KANZ;AAOCC,EAAAA,OAAO,GAAG,KAPX;AAQCC,EAAAA,IARD;AASCC,EAAAA,aATD;AAUCC,EAAAA,IAVD;AAWCC,EAAAA,KAXD;AAYCC,EAAAA,MAZD;AAaCC,EAAAA,QAAQ,GAAG,IAbZ;AAcCC,EAAAA,QAdD;AAeCC,EAAAA,OAfD;AAgBCC,EAAAA,WAhBD;AAiBCC,EAAAA,KAjBD;AAkBCC,EAAAA;AAlBD,CAAD,KAmBM;AACJ,QAAMC,WAAW,GAAIC,CAAD,IAA4C;AAC9D,QAAI,CAACZ,IAAL,EAAWY,CAAC,CAACC,eAAF;;AACX,QAAIT,MAAM,IAAIE,QAAd,EAAwB;AACtBA,MAAAA,QAAQ,CAAC,CAACD,QAAF,CAAR;AACD;;AACD,WAAOR,OAAO,IAAIA,OAAO,EAAzB;AACD,GAND;;AAQA,QAAMiB,UAAU,gBACd;AAAA,eACGZ,IAAI,gBAAG;AAAK,MAAA,GAAG,EAAEA,IAAV;AAAgB,MAAA,GAAG,EAAC,MAApB;AAA2B,MAAA,SAAS,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAwD,qCAD/D,EAEGT,QAFH,EAGGU,KAAK,gBAAG,QAAC,QAAD;AAAU,MAAA,SAAS,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAyC,EAHjD;AAAA,kBADF;;AAQA,QAAMY,GAAG,gBACP,QAAC,OAAD;AACE,IAAA,SAAS,EAAExB,UAAU,CACnBG,SAAS,IAAI,EADM,EAEnB,kBAFmB,EAGlB,OAAMC,IAAK,EAHO,EAIlB,OAAMC,WAAY,EAJA,EAKnB;AACE,qBAAeG,OADjB;AAEE,gBAAUM,QAFZ;AAGEE,MAAAA;AAHF,KALmB,CADvB;AAYE,IAAA,KAAK,EAAEE,KAZT;AAaE,IAAA,QAAQ,EAAEX,QAAQ,IAAIC,OAbxB;AAcE,IAAA,OAAO,EAAEY,WAdX;AAeE,IAAA,SAAS,EAAED,SAfb;AAAA,cAiBGX,OAAO,GAAI,GAAES,WAAW,IAAI,gBAAiB,EAAtC,GAA0CM;AAjBpD;AAAA;AAAA;AAAA;AAAA,UADF;;AAqBA,MAAId,IAAJ,EAAU;AACR,wBACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAET,UAAU,CAAC,UAAD,EAAaU,aAAb,CAA3B;AAAwD,MAAA,EAAE,EAAED,IAA5D;AAAA,gBACGe;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,SAAOA,GAAP;AACD,CAlEmC,CAAtC;MAAM1B,M;AAqEN,eAAeA,MAAf","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button as BtnAntd } from 'antd';\nimport classNames from 'classnames';\n\nimport { ReactComponent as ArrowImg } from '@/assets/img/icons/arrow-btn.svg';\n\nimport 'antd/lib/button/style/css';\n\nimport './Button.scss';\n\nexport type ColorScheme =\n  | 'yellow'\n  | 'outline'\n  | 'white'\n  | 'outline-purple'\n  | 'outline-green'\n  | 'outline-black'\n  | 'purple'\n  | 'gray'\n  | 'yellow-l';\nexport interface IColorScheme {\n  colorScheme?: ColorScheme;\n}\n\nexport interface ISize {\n  size?: 'ssm' | 'sm' | 'lsm' | 'smd' | 'md' | 'lmd' | 'lg';\n}\n\nexport interface ButtonProps extends IColorScheme, ISize {\n  onClick?: (e?: any) => void;\n  className?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n  link?: any;\n  linkClassName?: string;\n  shadow?: boolean;\n  icon?: string;\n  arrow?: boolean;\n  toggle?: boolean;\n  onToggle?: (value: boolean) => void;\n  isActive?: boolean | null;\n  noclick?: boolean;\n  title?: string;\n  onKeyDown?: (e: any) => void;\n}\n\nconst Button: React.FC<ButtonProps> = React.memo(\n  ({\n    children,\n    className,\n    size = 'md',\n    colorScheme = 'purple',\n    onClick,\n    disabled = false,\n    loading = false,\n    link,\n    linkClassName,\n    icon,\n    arrow,\n    toggle,\n    isActive = null,\n    onToggle,\n    noclick,\n    loadingText,\n    title,\n    onKeyDown,\n  }) => {\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (!link) e.stopPropagation();\n      if (toggle && onToggle) {\n        onToggle(!isActive);\n      }\n      return onClick && onClick();\n    };\n\n    const BtnContent = (\n      <>\n        {icon ? <img src={icon} alt=\"icon\" className=\"btn-icon\" /> : <></>}\n        {children}\n        {arrow ? <ArrowImg className=\"btn__arrow\" /> : ''}\n      </>\n    );\n\n    const Btn = (\n      <BtnAntd\n        className={classNames(\n          className || '',\n          'text btn box-f-c',\n          `btn-${size}`,\n          `btn-${colorScheme}`,\n          {\n            'btn-loading': loading,\n            'active': isActive,\n            noclick,\n          },\n        )}\n        title={title}\n        disabled={disabled || loading}\n        onClick={handleClick}\n        onKeyDown={onKeyDown}\n      >\n        {loading ? `${loadingText || 'In progress...'}` : BtnContent}\n      </BtnAntd>\n    );\n    if (link) {\n      return (\n        <Link className={classNames('btn-link', linkClassName)} to={link}>\n          {Btn}\n        </Link>\n      );\n    }\n    return Btn;\n  },\n);\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}