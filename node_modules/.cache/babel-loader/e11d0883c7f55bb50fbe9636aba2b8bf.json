{"ast":null,"code":"/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\nimport { u } from 'unist-builder';\n/**\n * @type {Handler}\n * @param {Code} node\n */\n\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''; // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/);\n  /** @type {Properties} */\n\n  const props = {};\n\n  if (lang) {\n    props.className = ['language-' + lang];\n  }\n\n  const code = h(node, 'code', props, [u('text', value)]);\n\n  if (node.meta) {\n    code.data = {\n      meta: node.meta\n    };\n  }\n\n  return h(node.position, 'pre', [code]);\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-hast/lib/handlers/code.js"],"names":["u","code","h","node","value","lang","match","props","className","meta","data","position"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,CAAR,QAAgB,eAAhB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcC,CAAd,EAAiBC,IAAjB,EAAuB;AAC5B,QAAMC,KAAK,GAAGD,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACC,KAAL,GAAa,IAA1B,GAAiC,EAA/C,CAD4B,CAE5B;AACA;;AACA,QAAMC,IAAI,GAAGF,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgB,qBAAhB,CAA1B;AACA;;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,MAAIF,IAAJ,EAAU;AACRE,IAAAA,KAAK,CAACC,SAAN,GAAkB,CAAC,cAAcH,IAAf,CAAlB;AACD;;AAED,QAAMJ,IAAI,GAAGC,CAAC,CAACC,IAAD,EAAO,MAAP,EAAeI,KAAf,EAAsB,CAACP,CAAC,CAAC,MAAD,EAASI,KAAT,CAAF,CAAtB,CAAd;;AAEA,MAAID,IAAI,CAACM,IAAT,EAAe;AACbR,IAAAA,IAAI,CAACS,IAAL,GAAY;AAACD,MAAAA,IAAI,EAAEN,IAAI,CAACM;AAAZ,KAAZ;AACD;;AAED,SAAOP,CAAC,CAACC,IAAI,CAACQ,QAAN,EAAgB,KAAhB,EAAuB,CAACV,IAAD,CAAvB,CAAR;AACD","sourcesContent":["/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n"]},"metadata":{},"sourceType":"module"}