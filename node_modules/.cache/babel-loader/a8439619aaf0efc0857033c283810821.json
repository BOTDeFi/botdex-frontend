{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker;\n  /** @type {string} */\n\n  let buffer;\n  /** @type {number} */\n\n  let index;\n  /** @type {State} */\n\n  let returnState;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText');\n    effects.enter('htmlTextData');\n    effects.consume(code);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpen;\n    }\n\n    if (code === 91) {\n      effects.consume(code);\n      buffer = 'CDATA[';\n      index = 0;\n      return cdataOpen;\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentStart;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code);\n    }\n\n    if (code === 45) {\n      effects.consume(code);\n      return commentStartDash;\n    }\n\n    return comment(code);\n  }\n  /** @type {State} */\n\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code);\n    }\n\n    return comment(code);\n  }\n  /** @type {State} */\n\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return comment;\n  }\n  /** @type {State} */\n\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return end;\n    }\n\n    return comment(code);\n  }\n  /** @type {State} */\n\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === buffer.length ? cdata : cdataOpen;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return cdata;\n  }\n  /** @type {State} */\n\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n\n    return cdata(code);\n  }\n  /** @type {State} */\n\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n\n    return cdata(code);\n  }\n  /** @type {State} */\n\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return declaration;\n  }\n  /** @type {State} */\n\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return instruction;\n  }\n  /** @type {State} */\n\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n  /** @type {State} */\n\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n\n    return tagCloseBetween(code);\n  }\n  /** @type {State} */\n\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n\n    return end(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n\n    return end(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeName(code) {\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n\n    return tagOpenAttributeNameAfter(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n\n    return tagOpenBetween(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n\n    effects.consume(code);\n    marker = undefined;\n    return tagOpenAttributeValueUnquoted;\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return tagOpenAttributeValueQuotedAfter;\n    }\n\n    if (code === null) {\n      return nok(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  } // We canâ€™t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData');\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, afterPrefix, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n  }\n  /** @type {State} */\n\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData');\n    return returnState(code);\n  }\n  /** @type {State} */\n\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit('htmlTextData');\n      effects.exit('htmlText');\n      return ok;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-core-commonmark/lib/html-text.js"],"names":["factorySpace","asciiAlpha","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","htmlText","name","tokenize","tokenizeHtmlText","effects","ok","nok","self","marker","buffer","index","returnState","start","code","enter","consume","open","declarationOpen","tagCloseStart","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","end","charCodeAt","length","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","undefined","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","exit","afterPrefix","parser","constructs","disable","null","includes"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We canâ€™t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}