{"ast":null,"code":"import now from './now.js'; // Returns a function, that, when invoked, will only be triggered at most once\n// during a given window of time. Normally, the throttled function will run\n// as much as it can, without ever going more than once per `wait` duration;\n// but if you'd like to disable the execution on the leading edge, pass\n// `{leading: false}`. To disable execution on the trailing edge, ditto.\n\nexport default function throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function () {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function () {\n    var _now = now();\n\n    if (!previous && options.leading === false) previous = _now;\n    var remaining = wait - (_now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = _now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n\n  throttled.cancel = function () {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/underscore/modules/throttle.js"],"names":["now","throttle","func","wait","options","timeout","context","args","result","previous","later","leading","apply","throttled","_now","remaining","arguments","clearTimeout","trailing","setTimeout","cancel"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,UAAhB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AACpD,MAAIC,OAAJ,EAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,MAA5B;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAI,CAACL,OAAL,EAAcA,OAAO,GAAG,EAAV;;AAEd,MAAIM,KAAK,GAAG,YAAW;AACrBD,IAAAA,QAAQ,GAAGL,OAAO,CAACO,OAAR,KAAoB,KAApB,GAA4B,CAA5B,GAAgCX,GAAG,EAA9C;AACAK,IAAAA,OAAO,GAAG,IAAV;AACAG,IAAAA,MAAM,GAAGN,IAAI,CAACU,KAAL,CAAWN,OAAX,EAAoBC,IAApB,CAAT;AACA,QAAI,CAACF,OAAL,EAAcC,OAAO,GAAGC,IAAI,GAAG,IAAjB;AACf,GALD;;AAOA,MAAIM,SAAS,GAAG,YAAW;AACzB,QAAIC,IAAI,GAAGd,GAAG,EAAd;;AACA,QAAI,CAACS,QAAD,IAAaL,OAAO,CAACO,OAAR,KAAoB,KAArC,EAA4CF,QAAQ,GAAGK,IAAX;AAC5C,QAAIC,SAAS,GAAGZ,IAAI,IAAIW,IAAI,GAAGL,QAAX,CAApB;AACAH,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,IAAI,GAAGS,SAAP;;AACA,QAAID,SAAS,IAAI,CAAb,IAAkBA,SAAS,GAAGZ,IAAlC,EAAwC;AACtC,UAAIE,OAAJ,EAAa;AACXY,QAAAA,YAAY,CAACZ,OAAD,CAAZ;AACAA,QAAAA,OAAO,GAAG,IAAV;AACD;;AACDI,MAAAA,QAAQ,GAAGK,IAAX;AACAN,MAAAA,MAAM,GAAGN,IAAI,CAACU,KAAL,CAAWN,OAAX,EAAoBC,IAApB,CAAT;AACA,UAAI,CAACF,OAAL,EAAcC,OAAO,GAAGC,IAAI,GAAG,IAAjB;AACf,KARD,MAQO,IAAI,CAACF,OAAD,IAAYD,OAAO,CAACc,QAAR,KAAqB,KAArC,EAA4C;AACjDb,MAAAA,OAAO,GAAGc,UAAU,CAACT,KAAD,EAAQK,SAAR,CAApB;AACD;;AACD,WAAOP,MAAP;AACD,GAlBD;;AAoBAK,EAAAA,SAAS,CAACO,MAAV,GAAmB,YAAW;AAC5BH,IAAAA,YAAY,CAACZ,OAAD,CAAZ;AACAI,IAAAA,QAAQ,GAAG,CAAX;AACAJ,IAAAA,OAAO,GAAGC,OAAO,GAAGC,IAAI,GAAG,IAA3B;AACD,GAJD;;AAMA,SAAOM,SAAP;AACD","sourcesContent":["import now from './now.js';\n\n// Returns a function, that, when invoked, will only be triggered at most once\n// during a given window of time. Normally, the throttled function will run\n// as much as it can, without ever going more than once per `wait` duration;\n// but if you'd like to disable the execution on the leading edge, pass\n// `{leading: false}`. To disable execution on the trailing edge, ditto.\nexport default function throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function() {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function() {\n    var _now = now();\n    if (!previous && options.leading === false) previous = _now;\n    var remaining = wait - (_now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = _now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n\n  throttled.cancel = function() {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}\n"]},"metadata":{},"sourceType":"module"}