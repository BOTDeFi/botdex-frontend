{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\n// import { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useHarvestFarm } from '@/hooks/farms/useHarvestFarm';\nimport { metamaskService } from '@/services/MetamaskConnect';\nimport { getAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\n\nconst useHarvestPoolDeposit = smartRefinerInitContract => {\n  _s();\n\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const harvestPool = useCallback(async () => {\n    const tx = await callWithGasPrice({\n      contract: smartRefinerInitContract,\n      methodName: 'deposit',\n      methodArgs: ['0'],\n      options: {\n        gas: 300000\n      }\n    });\n    return tx.status;\n  }, [callWithGasPrice, smartRefinerInitContract]);\n  return {\n    harvestPool\n  };\n};\n\n_s(useHarvestPoolDeposit, \"R65PkLmb9vaZ01vF1T9nbMjvHfg=\", false, function () {\n  return [useCallWithGasPrice];\n});\n\nconst useHarvestPool = poolId => {\n  _s2();\n\n  const {\n    user,\n    pools\n  } = useMst();\n  const [foundPool] = poolsConfig.filter(pool => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(getAddress(foundPool.contractAddress), SmartRefinerInitializableAbi);\n  const {\n    harvestPool\n  } = useHarvestPoolDeposit(smartRefinerInitContract);\n  const {\n    harvestFarm\n  } = useHarvestFarm(0);\n  const handleHarvest = useCallback(async () => {\n    if (poolId === 0) {\n      await harvestFarm();\n    } else {\n      await harvestPool();\n    }\n\n    pools.updateUserPendingReward(poolId, user.address);\n    pools.updateUserBalance(poolId, user.address);\n  }, [harvestFarm, harvestPool, poolId, pools, user.address]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s2(useHarvestPool, \"1SG1DbOeFKKKPseVy/oWN9OCbQI=\", false, function () {\n  return [useMst, useHarvestPoolDeposit, useHarvestFarm];\n});\n\nexport default useHarvestPool;","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useHarvestPool.ts"],"names":["useCallback","pools","poolsConfig","SmartRefinerInitializable","SmartRefinerInitializableAbi","useHarvestFarm","metamaskService","getAddress","useCallWithGasPrice","useMst","useHarvestPoolDeposit","smartRefinerInitContract","callWithGasPrice","harvestPool","tx","contract","methodName","methodArgs","options","gas","status","useHarvestPool","poolId","user","foundPool","filter","pool","id","getContract","contractAddress","harvestFarm","handleHarvest","updateUserPendingReward","address","updateUserBalance","onReward"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA;AACA,SAASC,KAAK,IAAIC,WAAlB,QAAqC,UAArC;AACA,SAASC,yBAAyB,IAAIC,4BAAtC,QAA0E,cAA1E;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,UAAT,QAA2B,iCAA3B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,MAAT,QAAuB,SAAvB;;AAEA,MAAMC,qBAAqB,GAAIC,wBAAD,IAAwC;AAAA;;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAuBJ,mBAAmB,EAAhD;AACA,QAAMK,WAAW,GAAGb,WAAW,CAAC,YAAY;AAC1C,UAAMc,EAAE,GAAG,MAAMF,gBAAgB,CAAC;AAChCG,MAAAA,QAAQ,EAAEJ,wBADsB;AAEhCK,MAAAA,UAAU,EAAE,SAFoB;AAGhCC,MAAAA,UAAU,EAAE,CAAC,GAAD,CAHoB;AAIhCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAE;AADE;AAJuB,KAAD,CAAjC;AAQA,WAAOL,EAAE,CAACM,MAAV;AACD,GAV8B,EAU5B,CAACR,gBAAD,EAAmBD,wBAAnB,CAV4B,CAA/B;AAYA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD,CAfD;;GAAMH,qB;UACyBF,mB;;;AAgB/B,MAAMa,cAAc,GAAIC,MAAD,IAAoB;AAAA;;AACzC,QAAM;AAAEC,IAAAA,IAAF;AAAQtB,IAAAA;AAAR,MAAkBQ,MAAM,EAA9B;AAEA,QAAM,CAACe,SAAD,IAActB,WAAW,CAACuB,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAzC,CAApB;AACA,QAAMX,wBAAwB,GAAGL,eAAe,CAACsB,WAAhB,CAC/BrB,UAAU,CAACiB,SAAS,CAACK,eAAX,CADqB,EAE/BzB,4BAF+B,CAAjC;AAIA,QAAM;AAAES,IAAAA;AAAF,MAAkBH,qBAAqB,CAACC,wBAAD,CAA7C;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAkBzB,cAAc,CAAC,CAAD,CAAtC;AAEA,QAAM0B,aAAa,GAAG/B,WAAW,CAAC,YAAY;AAC5C,QAAIsB,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMQ,WAAW,EAAjB;AACD,KAFD,MAEO;AACL,YAAMjB,WAAW,EAAjB;AACD;;AACDZ,IAAAA,KAAK,CAAC+B,uBAAN,CAA8BV,MAA9B,EAAsCC,IAAI,CAACU,OAA3C;AACAhC,IAAAA,KAAK,CAACiC,iBAAN,CAAwBZ,MAAxB,EAAgCC,IAAI,CAACU,OAArC;AACD,GARgC,EAQ9B,CAACH,WAAD,EAAcjB,WAAd,EAA2BS,MAA3B,EAAmCrB,KAAnC,EAA0CsB,IAAI,CAACU,OAA/C,CAR8B,CAAjC;AAUA,SAAO;AAAEE,IAAAA,QAAQ,EAAEJ;AAAZ,GAAP;AACD,CAtBD;;IAAMV,c;UACoBZ,M,EAOAC,qB,EACAL,c;;;AAe1B,eAAegB,cAAf","sourcesContent":["import { useCallback } from 'react';\nimport { Contract } from 'web3-eth-contract';\n\n// import { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useHarvestFarm } from '@/hooks/farms/useHarvestFarm';\nimport { metamaskService } from '@/services/MetamaskConnect';\nimport { getAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\n\nconst useHarvestPoolDeposit = (smartRefinerInitContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n  const harvestPool = useCallback(async () => {\n    const tx = await callWithGasPrice({\n      contract: smartRefinerInitContract,\n      methodName: 'deposit',\n      methodArgs: ['0'],\n      options: {\n        gas: 300000,\n      },\n    });\n    return tx.status;\n  }, [callWithGasPrice, smartRefinerInitContract]);\n\n  return { harvestPool };\n};\n\nconst useHarvestPool = (poolId: number) => {\n  const { user, pools } = useMst();\n\n  const [foundPool] = poolsConfig.filter((pool) => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n  const { harvestPool } = useHarvestPoolDeposit(smartRefinerInitContract);\n  const { harvestFarm } = useHarvestFarm(0);\n\n  const handleHarvest = useCallback(async () => {\n    if (poolId === 0) {\n      await harvestFarm();\n    } else {\n      await harvestPool();\n    }\n    pools.updateUserPendingReward(poolId, user.address);\n    pools.updateUserBalance(poolId, user.address);\n  }, [harvestFarm, harvestPool, poolId, pools, user.address]);\n\n  return { onReward: handleHarvest };\n};\n\nexport default useHarvestPool;\n"]},"metadata":{},"sourceType":"module"}