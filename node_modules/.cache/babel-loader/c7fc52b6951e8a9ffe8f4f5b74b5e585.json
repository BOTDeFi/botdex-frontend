{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport { autorun } from 'mobx';\nimport { getParent, types } from 'mobx-state-tree';\nimport { Precisions } from '@/types';\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from '@/utils/compoundApy';\nimport { getBalanceAmount } from '@/utils/formatters';\nimport RoiOptionsModel from './RoiOptions'; // Used to track/react which currency user is editing (i.e. USD amount or Token amount)\n\nexport let EditingCurrency; // Calculator works in 2 modes\n\n(function (EditingCurrency) {\n  EditingCurrency[EditingCurrency[\"TOKEN\"] = 0] = \"TOKEN\";\n  EditingCurrency[EditingCurrency[\"USD\"] = 1] = \"USD\";\n})(EditingCurrency || (EditingCurrency = {}));\n\nexport let CalculatorMode;\n\n(function (CalculatorMode) {\n  CalculatorMode[CalculatorMode[\"ROI_BASED_ON_PRINCIPAL\"] = 0] = \"ROI_BASED_ON_PRINCIPAL\";\n  CalculatorMode[CalculatorMode[\"PRINCIPAL_BASED_ON_ROI\"] = 1] = \"PRINCIPAL_BASED_ON_ROI\";\n})(CalculatorMode || (CalculatorMode = {}));\n\nexport const DEFAULT_PRINCIPAL_AS_TOKEN = '0.00';\nexport const DEFAULT_PRINCIPAL_AS_USD = '0.00'; // Mapping from the compounding frequency button index to actual componding frequency\n// in number of compounds per day\n\nconst compoundingIndexToFrequency = {\n  0: 1,\n  1: 0.142857142,\n  2: 0.071428571,\n  // once every 7 days\n  3: 0.033333333 // once every 30 days\n\n};\nexport const initialState = {\n  controls: {\n    compounding: true,\n    compoundingFrequency: 1,\n    // how many compoound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: 0,\n    // active compounding selected in\n    stakingDuration: 3,\n    // value as index associated with stakedOptions\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\n    editingCurrency: EditingCurrency.USD\n  },\n  data: {\n    principalAsToken: DEFAULT_PRINCIPAL_AS_TOKEN,\n    principalAsUSD: DEFAULT_PRINCIPAL_AS_USD,\n    roiUSD: 0,\n    roiTokens: 0,\n    roiPercentage: 0\n  }\n};\nconst RoiStateModel = types.model({\n  controls: types.model({\n    compounding: types.boolean,\n    compoundingFrequency: types.number,\n    // how many compoound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: types.number,\n    // active compounding selected in\n    stakingDuration: types.number,\n    mode: types.number,\n    editingCurrency: types.number\n  }),\n  data: types.model({\n    principalAsToken: types.string,\n    principalAsUSD: types.string,\n    roiUSD: types.number,\n    roiTokens: types.number,\n    roiPercentage: types.number\n  })\n}).actions(_c = self => {\n  const parent = getParent(self);\n\n  const toggleCompounding = () => {\n    self.controls.compounding = !self.controls.compounding;\n  };\n\n  const toggleEditingCurrency = () => {\n    self.controls.editingCurrency = self.controls.editingCurrency === EditingCurrency.TOKEN ? EditingCurrency.USD : EditingCurrency.TOKEN;\n  };\n\n  const setCalculatorMode = mode => {\n    self.controls.mode = mode;\n\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      self.data.roiUSD = parseFloat(self.data.roiUSD.toFixed(Precisions.fiat));\n    }\n  };\n\n  const setCompoundingFrequency = ({\n    index,\n    autoCompoundFrequency\n  }) => {\n    if (autoCompoundFrequency) {\n      self.controls.compoundingFrequency = autoCompoundFrequency;\n    } else {\n      if (index === undefined) return;\n      const compoundingFrequency = compoundingIndexToFrequency[index];\n      self.controls.activeCompoundingIndex = index;\n      self.controls.compoundingFrequency = compoundingFrequency;\n    }\n  };\n\n  const setStakingDuration = stakingDuration => {\n    self.controls.stakingDuration = stakingDuration;\n  };\n\n  const setPrincipal = (asUsd, asToken) => {\n    self.data.principalAsToken = asToken;\n    self.data.principalAsUSD = asUsd;\n    self.controls.mode = CalculatorMode.ROI_BASED_ON_PRINCIPAL;\n  }; // Handler for principal input when in USD mode\n\n\n  const setPrincipalFromUSDValue = principalAmountAsText => {\n    if (!parent.options) return;\n    const {\n      stakingTokenPrice,\n      stakingTokenBalance\n    } = parent.options;\n    const principalAmount = Number(principalAmountAsText);\n    let amount;\n\n    if (Number.isNaN(principalAmount)) {\n      amount = getBalanceAmount(new BigNumber(stakingTokenBalance).times(stakingTokenPrice));\n    } else {\n      amount = principalAmount;\n    }\n\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice);\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(Precisions.token) : DEFAULT_PRINCIPAL_AS_TOKEN;\n    setPrincipal(String(amount), principalAsToken);\n  }; // Handler for principal input when in Token mode\n\n\n  const setPrincipalFromTokenValue = amount => {\n    if (!parent.options) return;\n    const {\n      stakingTokenPrice\n    } = parent.options;\n    const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice);\n    const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(Precisions.fiat) : DEFAULT_PRINCIPAL_AS_USD;\n    setPrincipal(principalAsUsdString, String(amount));\n  }; // Handler for ROI input\n\n\n  const setTargetRoi = amount => {\n    if (!parent.options) return;\n    const {\n      earningTokenPrice\n    } = parent.options;\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice);\n    self.data.roiUSD = Number(amount);\n    self.data.roiTokens = targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber();\n    self.controls.mode = CalculatorMode.PRINCIPAL_BASED_ON_ROI;\n  }; // Calculates and sets ROI whenever related values change\n\n\n  const setRoi = (roiUSD, roiTokens, roiPercentage) => {\n    self.data.roiUSD = roiUSD;\n    self.data.roiTokens = roiTokens;\n    self.data.roiPercentage = roiPercentage;\n  };\n\n  autorun(() => {\n    if (!parent.options) return;\n\n    if (self.controls.mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n      const {\n        compounding,\n        compoundingFrequency,\n        stakingDuration\n      } = self.controls;\n      const {\n        principalAsUSD\n      } = self.data;\n      const {\n        apr,\n        earningTokenPrice,\n        performanceFee\n      } = parent.options;\n      const principalInUSDAsNumber = parseFloat(principalAsUSD);\n      const compoundFrequency = compounding ? compoundingFrequency : 0;\n      const interestBreakdown = getInterestBreakdown({\n        principalInUSD: principalInUSDAsNumber,\n        apr,\n        earningTokenPrice,\n        compoundFrequency,\n        performanceFee\n      });\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration]);\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0;\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0;\n      const roiPercentage = hasInterest ? getRoi({\n        amountEarned: roiAsUSD,\n        amountInvested: principalInUSDAsNumber\n      }) : 0;\n      setRoi(roiAsUSD, roiTokens, roiPercentage);\n    }\n  }); // Calculates and sets principal based on expected ROI value\n\n  const setPrincipalForTargetRoi = (principalAsUSD, principalAsToken, roiPercentage) => {\n    self.data.principalAsUSD = principalAsUSD;\n    self.data.principalAsToken = principalAsToken;\n    self.data.roiPercentage = roiPercentage;\n  };\n\n  autorun(() => {\n    if (!parent.options) return;\n\n    if (self.controls.mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      const {\n        compounding,\n        compoundingFrequency,\n        stakingDuration\n      } = self.controls;\n      const {\n        roiUSD\n      } = self.data;\n      const {\n        apr,\n        performanceFee,\n        stakingTokenPrice\n      } = parent.options;\n      const principalForExpectedRoi = getPrincipalForInterest(roiUSD, apr, compounding ? compoundingFrequency : 0, performanceFee);\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration]) ? principalForExpectedRoi[stakingDuration] : 0;\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice);\n      const roiPercentage = getRoi({\n        amountEarned: roiUSD,\n        amountInvested: principalUSD\n      });\n      setPrincipalForTargetRoi(principalUSD.toFixed(Precisions.fiat), principalToken.toFixed(Precisions.token), roiPercentage);\n    }\n  });\n  return {\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCalculatorMode,\n    setCompoundingFrequency,\n    setStakingDuration,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setPrincipal,\n    setTargetRoi\n  };\n});\n_c2 = RoiStateModel;\nconst RoiModal = types.model({\n  options: types.maybeNull(RoiOptionsModel),\n  state: RoiStateModel\n}).views(self => ({\n  get isOpen() {\n    return Boolean(self.options);\n  }\n\n})).actions(_c3 = self => ({\n  close() {\n    self.options = null;\n    self.state = initialState;\n  },\n\n  open(options) {\n    self.options = options; // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\n\n    if (options.autoCompoundFrequency > 0) {\n      self.state.setCompoundingFrequency({\n        autoCompoundFrequency: options.autoCompoundFrequency\n      });\n    }\n  }\n\n}));\n_c4 = RoiModal;\nexport default RoiModal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"RoiStateModel$types\\n  .model({\\n    controls: types.model({\\n      compounding: types.boolean,\\n      compoundingFrequency: types.number, // how many compoound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\\n      activeCompoundingIndex: types.number, // active compounding selected in\\n      stakingDuration: types.number,\\n      mode: types.number,\\n      editingCurrency: types.number,\\n    }),\\n    data: types.model({\\n      principalAsToken: types.string,\\n      principalAsUSD: types.string,\\n      roiUSD: types.number,\\n      roiTokens: types.number,\\n      roiPercentage: types.number,\\n    }),\\n  })\\n  .actions\");\n$RefreshReg$(_c2, \"RoiStateModel\");\n$RefreshReg$(_c3, \"RoiModal$types\\n  .model({\\n    options: types.maybeNull(RoiOptionsModel),\\n    state: RoiStateModel,\\n  })\\n  .views((self) => ({\\n    get isOpen() {\\n      return Boolean(self.options);\\n    },\\n  }))\\n  .actions\");\n$RefreshReg$(_c4, \"RoiModal\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/RoiModal.ts"],"names":["BigNumber","autorun","getParent","types","Precisions","getInterestBreakdown","getPrincipalForInterest","getRoi","getBalanceAmount","RoiOptionsModel","EditingCurrency","CalculatorMode","DEFAULT_PRINCIPAL_AS_TOKEN","DEFAULT_PRINCIPAL_AS_USD","compoundingIndexToFrequency","initialState","controls","compounding","compoundingFrequency","activeCompoundingIndex","stakingDuration","mode","ROI_BASED_ON_PRINCIPAL","editingCurrency","USD","data","principalAsToken","principalAsUSD","roiUSD","roiTokens","roiPercentage","RoiStateModel","model","boolean","number","string","actions","self","parent","toggleCompounding","toggleEditingCurrency","TOKEN","setCalculatorMode","PRINCIPAL_BASED_ON_ROI","parseFloat","toFixed","fiat","setCompoundingFrequency","index","autoCompoundFrequency","undefined","setStakingDuration","setPrincipal","asUsd","asToken","setPrincipalFromUSDValue","principalAmountAsText","options","stakingTokenPrice","stakingTokenBalance","principalAmount","Number","amount","isNaN","times","principalAsTokenBN","div","gt","token","String","setPrincipalFromTokenValue","principalAsUsdBN","principalAsUsdString","setTargetRoi","earningTokenPrice","targetRoiAsTokens","toNumber","setRoi","apr","performanceFee","principalInUSDAsNumber","compoundFrequency","interestBreakdown","principalInUSD","hasInterest","roiAsUSD","amountEarned","amountInvested","setPrincipalForTargetRoi","principalForExpectedRoi","principalUSD","principalToken","RoiModal","maybeNull","state","views","isOpen","Boolean","close","open"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,SAAT,EAA8BC,KAA9B,QAA2C,iBAA3C;AAEA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,EAAwDC,MAAxD,QAAsE,qBAAtE;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAOC,eAAP,MAA4B,cAA5B,C,CAEA;;AACA,WAAYC,eAAZ,C,CAKA;;WALYA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;GAAAA,e,KAAAA,e;;AAMZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;GAAAA,c,KAAAA,c;;AAKZ,OAAO,MAAMC,0BAA0B,GAAG,MAAnC;AACP,OAAO,MAAMC,wBAAwB,GAAG,MAAjC,C,CAEP;AACA;;AACA,MAAMC,2BAAmD,GAAG;AAC1D,KAAG,CADuD;AAE1D,KAAG,WAFuD;AAG1D,KAAG,WAHuD;AAG1C;AAChB,KAAG,WAJuD,CAI1C;;AAJ0C,CAA5D;AAOA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,IADL;AAERC,IAAAA,oBAAoB,EAAE,CAFd;AAEiB;AACzBC,IAAAA,sBAAsB,EAAE,CAHhB;AAGmB;AAC3BC,IAAAA,eAAe,EAAE,CAJT;AAIY;AACpBC,IAAAA,IAAI,EAAEV,cAAc,CAACW,sBALb;AAMRC,IAAAA,eAAe,EAAEb,eAAe,CAACc;AANzB,GADgB;AAS1BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,gBAAgB,EAAEd,0BADd;AAEJe,IAAAA,cAAc,EAAEd,wBAFZ;AAGJe,IAAAA,MAAM,EAAE,CAHJ;AAIJC,IAAAA,SAAS,EAAE,CAJP;AAKJC,IAAAA,aAAa,EAAE;AALX;AAToB,CAArB;AAkBP,MAAMC,aAAa,GAAG5B,KAAK,CACxB6B,KADmB,CACb;AACLhB,EAAAA,QAAQ,EAAEb,KAAK,CAAC6B,KAAN,CAAY;AACpBf,IAAAA,WAAW,EAAEd,KAAK,CAAC8B,OADC;AAEpBf,IAAAA,oBAAoB,EAAEf,KAAK,CAAC+B,MAFR;AAEgB;AACpCf,IAAAA,sBAAsB,EAAEhB,KAAK,CAAC+B,MAHV;AAGkB;AACtCd,IAAAA,eAAe,EAAEjB,KAAK,CAAC+B,MAJH;AAKpBb,IAAAA,IAAI,EAAElB,KAAK,CAAC+B,MALQ;AAMpBX,IAAAA,eAAe,EAAEpB,KAAK,CAAC+B;AANH,GAAZ,CADL;AASLT,EAAAA,IAAI,EAAEtB,KAAK,CAAC6B,KAAN,CAAY;AAChBN,IAAAA,gBAAgB,EAAEvB,KAAK,CAACgC,MADR;AAEhBR,IAAAA,cAAc,EAAExB,KAAK,CAACgC,MAFN;AAGhBP,IAAAA,MAAM,EAAEzB,KAAK,CAAC+B,MAHE;AAIhBL,IAAAA,SAAS,EAAE1B,KAAK,CAAC+B,MAJD;AAKhBJ,IAAAA,aAAa,EAAE3B,KAAK,CAAC+B;AALL,GAAZ;AATD,CADa,EAkBnBE,OAlBmB,MAkBVC,IAAD,IAAU;AACjB,QAAMC,MAAM,GAAGpC,SAAS,CAACmC,IAAD,CAAxB;;AAEA,QAAME,iBAAiB,GAAG,MAAM;AAC9BF,IAAAA,IAAI,CAACrB,QAAL,CAAcC,WAAd,GAA4B,CAACoB,IAAI,CAACrB,QAAL,CAAcC,WAA3C;AACD,GAFD;;AAIA,QAAMuB,qBAAqB,GAAG,MAAM;AAClCH,IAAAA,IAAI,CAACrB,QAAL,CAAcO,eAAd,GACEc,IAAI,CAACrB,QAAL,CAAcO,eAAd,KAAkCb,eAAe,CAAC+B,KAAlD,GACI/B,eAAe,CAACc,GADpB,GAEId,eAAe,CAAC+B,KAHtB;AAID,GALD;;AAOA,QAAMC,iBAAiB,GAAIrB,IAAD,IAA0B;AAClDgB,IAAAA,IAAI,CAACrB,QAAL,CAAcK,IAAd,GAAqBA,IAArB;;AACA,QAAIA,IAAI,KAAKV,cAAc,CAACgC,sBAA5B,EAAoD;AAClDN,MAAAA,IAAI,CAACZ,IAAL,CAAUG,MAAV,GAAmBgB,UAAU,CAACP,IAAI,CAACZ,IAAL,CAAUG,MAAV,CAAiBiB,OAAjB,CAAyBzC,UAAU,CAAC0C,IAApC,CAAD,CAA7B;AACD;AACF,GALD;;AAOA,QAAMC,uBAAuB,GAAG,CAAC;AAC/BC,IAAAA,KAD+B;AAE/BC,IAAAA;AAF+B,GAAD,KAM1B;AACJ,QAAIA,qBAAJ,EAA2B;AACzBZ,MAAAA,IAAI,CAACrB,QAAL,CAAcE,oBAAd,GAAqC+B,qBAArC;AACD,KAFD,MAEO;AACL,UAAID,KAAK,KAAKE,SAAd,EAAyB;AACzB,YAAMhC,oBAAoB,GAAGJ,2BAA2B,CAACkC,KAAD,CAAxD;AACAX,MAAAA,IAAI,CAACrB,QAAL,CAAcG,sBAAd,GAAuC6B,KAAvC;AACAX,MAAAA,IAAI,CAACrB,QAAL,CAAcE,oBAAd,GAAqCA,oBAArC;AACD;AACF,GAfD;;AAiBA,QAAMiC,kBAAkB,GAAI/B,eAAD,IAA6B;AACtDiB,IAAAA,IAAI,CAACrB,QAAL,CAAcI,eAAd,GAAgCA,eAAhC;AACD,GAFD;;AAIA,QAAMgC,YAAY,GAAG,CAACC,KAAD,EAAgBC,OAAhB,KAAoC;AACvDjB,IAAAA,IAAI,CAACZ,IAAL,CAAUC,gBAAV,GAA6B4B,OAA7B;AACAjB,IAAAA,IAAI,CAACZ,IAAL,CAAUE,cAAV,GAA2B0B,KAA3B;AACAhB,IAAAA,IAAI,CAACrB,QAAL,CAAcK,IAAd,GAAqBV,cAAc,CAACW,sBAApC;AACD,GAJD,CA1CiB,CAgDjB;;;AACA,QAAMiC,wBAAwB,GAAIC,qBAAD,IAA4C;AAC3E,QAAI,CAAClB,MAAM,CAACmB,OAAZ,EAAqB;AACrB,UAAM;AAAEC,MAAAA,iBAAF;AAAqBC,MAAAA;AAArB,QAA6CrB,MAAM,CAACmB,OAA1D;AACA,UAAMG,eAAe,GAAGC,MAAM,CAACL,qBAAD,CAA9B;AAEA,QAAIM,MAAJ;;AACA,QAAID,MAAM,CAACE,KAAP,CAAaH,eAAb,CAAJ,EAAmC;AACjCE,MAAAA,MAAM,GAAGtD,gBAAgB,CAAC,IAAIR,SAAJ,CAAc2D,mBAAd,EAAmCK,KAAnC,CAAyCN,iBAAzC,CAAD,CAAzB;AACD,KAFD,MAEO;AACLI,MAAAA,MAAM,GAAGF,eAAT;AACD;;AAED,UAAMK,kBAAkB,GAAG,IAAIjE,SAAJ,CAAc8D,MAAd,EAAsBI,GAAtB,CAA0BR,iBAA1B,CAA3B;AACA,UAAMhC,gBAAgB,GAAGuC,kBAAkB,CAACE,EAAnB,CAAsB,CAAtB,IACrBF,kBAAkB,CAACpB,OAAnB,CAA2BzC,UAAU,CAACgE,KAAtC,CADqB,GAErBxD,0BAFJ;AAIAwC,IAAAA,YAAY,CAACiB,MAAM,CAACP,MAAD,CAAP,EAAiBpC,gBAAjB,CAAZ;AACD,GAlBD,CAjDiB,CAqEjB;;;AACA,QAAM4C,0BAA0B,GAAIR,MAAD,IAA6B;AAC9D,QAAI,CAACxB,MAAM,CAACmB,OAAZ,EAAqB;AACrB,UAAM;AAAEC,MAAAA;AAAF,QAAwBpB,MAAM,CAACmB,OAArC;AACA,UAAMc,gBAAgB,GAAG,IAAIvE,SAAJ,CAAc8D,MAAd,EAAsBE,KAAtB,CAA4BN,iBAA5B,CAAzB;AACA,UAAMc,oBAAoB,GAAGD,gBAAgB,CAACJ,EAAjB,CAAoB,CAApB,IACzBI,gBAAgB,CAAC1B,OAAjB,CAAyBzC,UAAU,CAAC0C,IAApC,CADyB,GAEzBjC,wBAFJ;AAIAuC,IAAAA,YAAY,CAACoB,oBAAD,EAAuBH,MAAM,CAACP,MAAD,CAA7B,CAAZ;AACD,GATD,CAtEiB,CAiFjB;;;AACA,QAAMW,YAAY,GAAIX,MAAD,IAA6B;AAChD,QAAI,CAACxB,MAAM,CAACmB,OAAZ,EAAqB;AACrB,UAAM;AAAEiB,MAAAA;AAAF,QAAwBpC,MAAM,CAACmB,OAArC;AACA,UAAMkB,iBAAiB,GAAG,IAAI3E,SAAJ,CAAc8D,MAAd,EAAsBI,GAAtB,CAA0BQ,iBAA1B,CAA1B;AAEArC,IAAAA,IAAI,CAACZ,IAAL,CAAUG,MAAV,GAAmBiC,MAAM,CAACC,MAAD,CAAzB;AACAzB,IAAAA,IAAI,CAACZ,IAAL,CAAUI,SAAV,GAAsB8C,iBAAiB,CAACZ,KAAlB,KAA4B,CAA5B,GAAgCY,iBAAiB,CAACC,QAAlB,EAAtD;AACAvC,IAAAA,IAAI,CAACrB,QAAL,CAAcK,IAAd,GAAqBV,cAAc,CAACgC,sBAApC;AACD,GARD,CAlFiB,CA4FjB;;;AACA,QAAMkC,MAAM,GAAG,CAACjD,MAAD,EAAiBC,SAAjB,EAAoCC,aAApC,KAA8D;AAC3EO,IAAAA,IAAI,CAACZ,IAAL,CAAUG,MAAV,GAAmBA,MAAnB;AACAS,IAAAA,IAAI,CAACZ,IAAL,CAAUI,SAAV,GAAsBA,SAAtB;AACAQ,IAAAA,IAAI,CAACZ,IAAL,CAAUK,aAAV,GAA0BA,aAA1B;AACD,GAJD;;AAKA7B,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAI,CAACqC,MAAM,CAACmB,OAAZ,EAAqB;;AACrB,QAAIpB,IAAI,CAACrB,QAAL,CAAcK,IAAd,KAAuBV,cAAc,CAACW,sBAA1C,EAAkE;AAChE,YAAM;AAAEL,QAAAA,WAAF;AAAeC,QAAAA,oBAAf;AAAqCE,QAAAA;AAArC,UAAyDiB,IAAI,CAACrB,QAApE;AACA,YAAM;AAAEW,QAAAA;AAAF,UAAqBU,IAAI,CAACZ,IAAhC;AACA,YAAM;AAAEqD,QAAAA,GAAF;AAAOJ,QAAAA,iBAAP;AAA0BK,QAAAA;AAA1B,UAA6CzC,MAAM,CAACmB,OAA1D;AACA,YAAMuB,sBAAsB,GAAGpC,UAAU,CAACjB,cAAD,CAAzC;AACA,YAAMsD,iBAAiB,GAAGhE,WAAW,GAAGC,oBAAH,GAA0B,CAA/D;AACA,YAAMgE,iBAAiB,GAAG7E,oBAAoB,CAAC;AAC7C8E,QAAAA,cAAc,EAAEH,sBAD6B;AAE7CF,QAAAA,GAF6C;AAG7CJ,QAAAA,iBAH6C;AAI7CO,QAAAA,iBAJ6C;AAK7CF,QAAAA;AAL6C,OAAD,CAA9C;AAOA,YAAMK,WAAW,GAAG,CAACvB,MAAM,CAACE,KAAP,CAAamB,iBAAiB,CAAC9D,eAAD,CAA9B,CAArB;AACA,YAAMS,SAAS,GAAGuD,WAAW,GAAGF,iBAAiB,CAAC9D,eAAD,CAApB,GAAwC,CAArE;AACA,YAAMiE,QAAQ,GAAGD,WAAW,GAAGvD,SAAS,GAAG6C,iBAAf,GAAmC,CAA/D;AACA,YAAM5C,aAAa,GAAGsD,WAAW,GAC7B7E,MAAM,CAAC;AACL+E,QAAAA,YAAY,EAAED,QADT;AAELE,QAAAA,cAAc,EAAEP;AAFX,OAAD,CADuB,GAK7B,CALJ;AAMAH,MAAAA,MAAM,CAACQ,QAAD,EAAWxD,SAAX,EAAsBC,aAAtB,CAAN;AACD;AACF,GA1BM,CAAP,CAlGiB,CA8HjB;;AACA,QAAM0D,wBAAwB,GAAG,CAC/B7D,cAD+B,EAE/BD,gBAF+B,EAG/BI,aAH+B,KAI5B;AACHO,IAAAA,IAAI,CAACZ,IAAL,CAAUE,cAAV,GAA2BA,cAA3B;AACAU,IAAAA,IAAI,CAACZ,IAAL,CAAUC,gBAAV,GAA6BA,gBAA7B;AACAW,IAAAA,IAAI,CAACZ,IAAL,CAAUK,aAAV,GAA0BA,aAA1B;AACD,GARD;;AASA7B,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAI,CAACqC,MAAM,CAACmB,OAAZ,EAAqB;;AACrB,QAAIpB,IAAI,CAACrB,QAAL,CAAcK,IAAd,KAAuBV,cAAc,CAACgC,sBAA1C,EAAkE;AAChE,YAAM;AAAE1B,QAAAA,WAAF;AAAeC,QAAAA,oBAAf;AAAqCE,QAAAA;AAArC,UAAyDiB,IAAI,CAACrB,QAApE;AACA,YAAM;AAAEY,QAAAA;AAAF,UAAaS,IAAI,CAACZ,IAAxB;AACA,YAAM;AAAEqD,QAAAA,GAAF;AAAOC,QAAAA,cAAP;AAAuBrB,QAAAA;AAAvB,UAA6CpB,MAAM,CAACmB,OAA1D;AAEA,YAAMgC,uBAAuB,GAAGnF,uBAAuB,CACrDsB,MADqD,EAErDkD,GAFqD,EAGrD7D,WAAW,GAAGC,oBAAH,GAA0B,CAHgB,EAIrD6D,cAJqD,CAAvD;AAMA,YAAMW,YAAY,GAAG,CAAC7B,MAAM,CAACE,KAAP,CAAa0B,uBAAuB,CAACrE,eAAD,CAApC,CAAD,GACjBqE,uBAAuB,CAACrE,eAAD,CADN,GAEjB,CAFJ;AAGA,YAAMuE,cAAc,GAAG,IAAI3F,SAAJ,CAAc0F,YAAd,EAA4BxB,GAA5B,CAAgCR,iBAAhC,CAAvB;AACA,YAAM5B,aAAa,GAAGvB,MAAM,CAAC;AAC3B+E,QAAAA,YAAY,EAAE1D,MADa;AAE3B2D,QAAAA,cAAc,EAAEG;AAFW,OAAD,CAA5B;AAKAF,MAAAA,wBAAwB,CACtBE,YAAY,CAAC7C,OAAb,CAAqBzC,UAAU,CAAC0C,IAAhC,CADsB,EAEtB6C,cAAc,CAAC9C,OAAf,CAAuBzC,UAAU,CAACgE,KAAlC,CAFsB,EAGtBtC,aAHsB,CAAxB;AAKD;AACF,GA5BM,CAAP;AA8BA,SAAO;AACLS,IAAAA,iBADK;AAELC,IAAAA,qBAFK;AAGLE,IAAAA,iBAHK;AAILK,IAAAA,uBAJK;AAKLI,IAAAA,kBALK;AAMLI,IAAAA,wBANK;AAOLe,IAAAA,0BAPK;AAQLlB,IAAAA,YARK;AASLqB,IAAAA;AATK,GAAP;AAWD,CAnMmB,CAAtB;MAAM1C,a;AAqMN,MAAM6D,QAAQ,GAAGzF,KAAK,CACnB6B,KADc,CACR;AACLyB,EAAAA,OAAO,EAAEtD,KAAK,CAAC0F,SAAN,CAAgBpF,eAAhB,CADJ;AAELqF,EAAAA,KAAK,EAAE/D;AAFF,CADQ,EAKdgE,KALc,CAKP1D,IAAD,KAAW;AAChB,MAAI2D,MAAJ,GAAa;AACX,WAAOC,OAAO,CAAC5D,IAAI,CAACoB,OAAN,CAAd;AACD;;AAHe,CAAX,CALQ,EAUdrB,OAVc,OAULC,IAAD,KAAW;AAClB6D,EAAAA,KAAK,GAAG;AACN7D,IAAAA,IAAI,CAACoB,OAAL,GAAe,IAAf;AACApB,IAAAA,IAAI,CAACyD,KAAL,GAAa/E,YAAb;AACD,GAJiB;;AAKlBoF,EAAAA,IAAI,CAAC1C,OAAD,EAA4C;AAC9CpB,IAAAA,IAAI,CAACoB,OAAL,GAAeA,OAAf,CAD8C,CAE9C;;AACA,QAAIA,OAAO,CAACR,qBAAR,GAAgC,CAApC,EAAuC;AACrCZ,MAAAA,IAAI,CAACyD,KAAL,CAAW/C,uBAAX,CAAmC;AACjCE,QAAAA,qBAAqB,EAAEQ,OAAO,CAACR;AADE,OAAnC;AAGD;AACF;;AAbiB,CAAX,CAVM,CAAjB;MAAM2C,Q;AA0BN,eAAeA,QAAf","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\nimport { autorun } from 'mobx';\nimport { getParent, Instance, types } from 'mobx-state-tree';\n\nimport { Precisions } from '@/types';\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from '@/utils/compoundApy';\nimport { getBalanceAmount } from '@/utils/formatters';\n\nimport RoiOptionsModel from './RoiOptions';\n\n// Used to track/react which currency user is editing (i.e. USD amount or Token amount)\nexport enum EditingCurrency {\n  TOKEN,\n  USD,\n}\n\n// Calculator works in 2 modes\nexport enum CalculatorMode {\n  ROI_BASED_ON_PRINCIPAL, // User edits principal value and sees what ROI they get\n  PRINCIPAL_BASED_ON_ROI, // User edits ROI value and sees what principal they need to invest to reach it\n}\n\nexport const DEFAULT_PRINCIPAL_AS_TOKEN = '0.00';\nexport const DEFAULT_PRINCIPAL_AS_USD = '0.00';\n\n// Mapping from the compounding frequency button index to actual componding frequency\n// in number of compounds per day\nconst compoundingIndexToFrequency: Record<string, number> = {\n  0: 1,\n  1: 0.142857142,\n  2: 0.071428571, // once every 7 days\n  3: 0.033333333, // once every 30 days\n};\n\nexport const initialState = {\n  controls: {\n    compounding: true,\n    compoundingFrequency: 1, // how many compoound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: 0, // active compounding selected in\n    stakingDuration: 3, // value as index associated with stakedOptions\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\n    editingCurrency: EditingCurrency.USD,\n  },\n  data: {\n    principalAsToken: DEFAULT_PRINCIPAL_AS_TOKEN,\n    principalAsUSD: DEFAULT_PRINCIPAL_AS_USD,\n    roiUSD: 0,\n    roiTokens: 0,\n    roiPercentage: 0,\n  },\n};\n\nconst RoiStateModel = types\n  .model({\n    controls: types.model({\n      compounding: types.boolean,\n      compoundingFrequency: types.number, // how many compoound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n      activeCompoundingIndex: types.number, // active compounding selected in\n      stakingDuration: types.number,\n      mode: types.number,\n      editingCurrency: types.number,\n    }),\n    data: types.model({\n      principalAsToken: types.string,\n      principalAsUSD: types.string,\n      roiUSD: types.number,\n      roiTokens: types.number,\n      roiPercentage: types.number,\n    }),\n  })\n  .actions((self) => {\n    const parent = getParent(self) as Instance<typeof RoiModal>;\n\n    const toggleCompounding = () => {\n      self.controls.compounding = !self.controls.compounding;\n    };\n\n    const toggleEditingCurrency = () => {\n      self.controls.editingCurrency =\n        self.controls.editingCurrency === EditingCurrency.TOKEN\n          ? EditingCurrency.USD\n          : EditingCurrency.TOKEN;\n    };\n\n    const setCalculatorMode = (mode: CalculatorMode) => {\n      self.controls.mode = mode;\n      if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n        self.data.roiUSD = parseFloat(self.data.roiUSD.toFixed(Precisions.fiat));\n      }\n    };\n\n    const setCompoundingFrequency = ({\n      index,\n      autoCompoundFrequency,\n    }: {\n      index?: number;\n      autoCompoundFrequency?: number;\n    }) => {\n      if (autoCompoundFrequency) {\n        self.controls.compoundingFrequency = autoCompoundFrequency;\n      } else {\n        if (index === undefined) return;\n        const compoundingFrequency = compoundingIndexToFrequency[index];\n        self.controls.activeCompoundingIndex = index;\n        self.controls.compoundingFrequency = compoundingFrequency;\n      }\n    };\n\n    const setStakingDuration = (stakingDuration: number) => {\n      self.controls.stakingDuration = stakingDuration;\n    };\n\n    const setPrincipal = (asUsd: string, asToken: string) => {\n      self.data.principalAsToken = asToken;\n      self.data.principalAsUSD = asUsd;\n      self.controls.mode = CalculatorMode.ROI_BASED_ON_PRINCIPAL;\n    };\n\n    // Handler for principal input when in USD mode\n    const setPrincipalFromUSDValue = (principalAmountAsText: string | number) => {\n      if (!parent.options) return;\n      const { stakingTokenPrice, stakingTokenBalance } = parent.options;\n      const principalAmount = Number(principalAmountAsText);\n\n      let amount: number;\n      if (Number.isNaN(principalAmount)) {\n        amount = getBalanceAmount(new BigNumber(stakingTokenBalance).times(stakingTokenPrice));\n      } else {\n        amount = principalAmount;\n      }\n\n      const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice);\n      const principalAsToken = principalAsTokenBN.gt(0)\n        ? principalAsTokenBN.toFixed(Precisions.token)\n        : DEFAULT_PRINCIPAL_AS_TOKEN;\n\n      setPrincipal(String(amount), principalAsToken);\n    };\n\n    // Handler for principal input when in Token mode\n    const setPrincipalFromTokenValue = (amount: string | number) => {\n      if (!parent.options) return;\n      const { stakingTokenPrice } = parent.options;\n      const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice);\n      const principalAsUsdString = principalAsUsdBN.gt(0)\n        ? principalAsUsdBN.toFixed(Precisions.fiat)\n        : DEFAULT_PRINCIPAL_AS_USD;\n\n      setPrincipal(principalAsUsdString, String(amount));\n    };\n\n    // Handler for ROI input\n    const setTargetRoi = (amount: string | number) => {\n      if (!parent.options) return;\n      const { earningTokenPrice } = parent.options;\n      const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice);\n\n      self.data.roiUSD = Number(amount);\n      self.data.roiTokens = targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber();\n      self.controls.mode = CalculatorMode.PRINCIPAL_BASED_ON_ROI;\n    };\n\n    // Calculates and sets ROI whenever related values change\n    const setRoi = (roiUSD: number, roiTokens: number, roiPercentage: number) => {\n      self.data.roiUSD = roiUSD;\n      self.data.roiTokens = roiTokens;\n      self.data.roiPercentage = roiPercentage;\n    };\n    autorun(() => {\n      if (!parent.options) return;\n      if (self.controls.mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n        const { compounding, compoundingFrequency, stakingDuration } = self.controls;\n        const { principalAsUSD } = self.data;\n        const { apr, earningTokenPrice, performanceFee } = parent.options;\n        const principalInUSDAsNumber = parseFloat(principalAsUSD);\n        const compoundFrequency = compounding ? compoundingFrequency : 0;\n        const interestBreakdown = getInterestBreakdown({\n          principalInUSD: principalInUSDAsNumber,\n          apr,\n          earningTokenPrice,\n          compoundFrequency,\n          performanceFee,\n        });\n        const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration]);\n        const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0;\n        const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0;\n        const roiPercentage = hasInterest\n          ? getRoi({\n              amountEarned: roiAsUSD,\n              amountInvested: principalInUSDAsNumber,\n            })\n          : 0;\n        setRoi(roiAsUSD, roiTokens, roiPercentage);\n      }\n    });\n\n    // Calculates and sets principal based on expected ROI value\n    const setPrincipalForTargetRoi = (\n      principalAsUSD: string,\n      principalAsToken: string,\n      roiPercentage: number,\n    ) => {\n      self.data.principalAsUSD = principalAsUSD;\n      self.data.principalAsToken = principalAsToken;\n      self.data.roiPercentage = roiPercentage;\n    };\n    autorun(() => {\n      if (!parent.options) return;\n      if (self.controls.mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n        const { compounding, compoundingFrequency, stakingDuration } = self.controls;\n        const { roiUSD } = self.data;\n        const { apr, performanceFee, stakingTokenPrice } = parent.options;\n\n        const principalForExpectedRoi = getPrincipalForInterest(\n          roiUSD,\n          apr,\n          compounding ? compoundingFrequency : 0,\n          performanceFee,\n        );\n        const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration])\n          ? principalForExpectedRoi[stakingDuration]\n          : 0;\n        const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice);\n        const roiPercentage = getRoi({\n          amountEarned: roiUSD,\n          amountInvested: principalUSD,\n        });\n\n        setPrincipalForTargetRoi(\n          principalUSD.toFixed(Precisions.fiat),\n          principalToken.toFixed(Precisions.token),\n          roiPercentage,\n        );\n      }\n    });\n\n    return {\n      toggleCompounding,\n      toggleEditingCurrency,\n      setCalculatorMode,\n      setCompoundingFrequency,\n      setStakingDuration,\n      setPrincipalFromUSDValue,\n      setPrincipalFromTokenValue,\n      setPrincipal,\n      setTargetRoi,\n    };\n  });\n\nconst RoiModal = types\n  .model({\n    options: types.maybeNull(RoiOptionsModel),\n    state: RoiStateModel,\n  })\n  .views((self) => ({\n    get isOpen() {\n      return Boolean(self.options);\n    },\n  }))\n  .actions((self) => ({\n    close() {\n      self.options = null;\n      self.state = initialState as Instance<typeof RoiStateModel>;\n    },\n    open(options: Instance<typeof RoiOptionsModel>) {\n      self.options = options;\n      // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\n      if (options.autoCompoundFrequency > 0) {\n        self.state.setCompoundingFrequency({\n          autoCompoundFrequency: options.autoCompoundFrequency,\n        });\n      }\n    },\n  }));\n\nexport default RoiModal;\n"]},"metadata":{},"sourceType":"module"}