{"ast":null,"code":"/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\nimport { fromMarkdown } from 'mdast-util-from-markdown';\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\n\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = doc => {\n    // Assume options.\n    const settings =\n    /** @type {Options} */\n    this.data('settings');\n    return fromMarkdown(doc, Object.assign({}, settings, options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: this.data('micromarkExtensions') || [],\n      mdastExtensions: this.data('fromMarkdownExtensions') || []\n    }));\n  };\n\n  Object.assign(this, {\n    Parser: parser\n  });\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/remark-parse/lib/index.js"],"names":["fromMarkdown","remarkParse","options","parser","doc","settings","data","Object","assign","extensions","mdastExtensions","Parser"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,0BAA3B;AAEA;;AACA,eAAe,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC3C;AACA,QAAMC,MAAM,GAAIC,GAAD,IAAS;AACtB;AACA,UAAMC,QAAQ;AAAG;AAAwB,SAAKC,IAAL,CAAU,UAAV,CAAzC;AAEA,WAAON,YAAY,CACjBI,GADiB,EAEjBG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,EAA4BH,OAA5B,EAAqC;AACnC;AACA;AACA;AACAO,MAAAA,UAAU,EAAE,KAAKH,IAAL,CAAU,qBAAV,KAAoC,EAJb;AAKnCI,MAAAA,eAAe,EAAE,KAAKJ,IAAL,CAAU,wBAAV,KAAuC;AALrB,KAArC,CAFiB,CAAnB;AAUD,GAdD;;AAgBAC,EAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;AAACG,IAAAA,MAAM,EAAER;AAAT,GAApB;AACD","sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n"]},"metadata":{},"sourceType":"module"}