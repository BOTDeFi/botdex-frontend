{"ast":null,"code":"import { flow, types } from 'mobx-state-tree';\nimport { tokensApi } from '@/services/api';\nimport { clogError } from '@/utils/logger';\nconst TokenModel = types.model({\n  name: types.string,\n  symbol: types.string,\n  address: types.string,\n  chainId: types.optional(types.number, 56),\n  decimals: types.union(types.number, types.string),\n  logoURI: types.optional(types.string, '')\n});\nconst TokensModel = types.model({\n  default: types.optional(types.array(TokenModel), []),\n  top: types.optional(types.array(TokenModel), []),\n  extended: types.optional(types.array(TokenModel), []),\n  imported: types.optional(types.array(TokenModel), [])\n}).actions(_c = self => {\n  const getTokens = flow(function* getTokens(type) {\n    try {\n      let responce = {};\n\n      switch (type) {\n        case 'top':\n          responce = yield tokensApi.getTopTokens();\n          break;\n\n        case 'extended':\n          responce = yield tokensApi.getExtendedTokens();\n          break;\n\n        case 'imported':\n          responce.data = localStorage.importTokens ? JSON.parse(localStorage.importTokens) : [];\n          break;\n\n        default:\n          responce = yield tokensApi.getDefaultTokens();\n          break;\n      }\n\n      self[type] = responce.data;\n    } catch (err) {\n      clogError(err);\n    }\n  });\n\n  const setTokens = (type, tokens) => {\n    self[type] = tokens;\n  };\n\n  return {\n    getTokens,\n    setTokens\n  };\n});\n_c2 = TokensModel;\nexport default TokensModel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TokensModel$types\\n  .model({\\n    default: types.optional(types.array(TokenModel), []),\\n    top: types.optional(types.array(TokenModel), []),\\n    extended: types.optional(types.array(TokenModel), []),\\n    imported: types.optional(types.array(TokenModel), []),\\n  })\\n  .actions\");\n$RefreshReg$(_c2, \"TokensModel\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Tokens.ts"],"names":["flow","types","tokensApi","clogError","TokenModel","model","name","string","symbol","address","chainId","optional","number","decimals","union","logoURI","TokensModel","default","array","top","extended","imported","actions","self","getTokens","type","responce","getTopTokens","getExtendedTokens","data","localStorage","importTokens","JSON","parse","getDefaultTokens","err","setTokens","tokens"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,iBAA5B;AAEA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,MAAMC,UAAU,GAAGH,KAAK,CAACI,KAAN,CAAY;AAC7BC,EAAAA,IAAI,EAAEL,KAAK,CAACM,MADiB;AAE7BC,EAAAA,MAAM,EAAEP,KAAK,CAACM,MAFe;AAG7BE,EAAAA,OAAO,EAAER,KAAK,CAACM,MAHc;AAI7BG,EAAAA,OAAO,EAAET,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACW,MAArB,EAA6B,EAA7B,CAJoB;AAK7BC,EAAAA,QAAQ,EAAEZ,KAAK,CAACa,KAAN,CAAYb,KAAK,CAACW,MAAlB,EAA0BX,KAAK,CAACM,MAAhC,CALmB;AAM7BQ,EAAAA,OAAO,EAAEd,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACM,MAArB,EAA6B,EAA7B;AANoB,CAAZ,CAAnB;AASA,MAAMS,WAAW,GAAGf,KAAK,CACtBI,KADiB,CACX;AACLY,EAAAA,OAAO,EAAEhB,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACiB,KAAN,CAAYd,UAAZ,CAAf,EAAwC,EAAxC,CADJ;AAELe,EAAAA,GAAG,EAAElB,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACiB,KAAN,CAAYd,UAAZ,CAAf,EAAwC,EAAxC,CAFA;AAGLgB,EAAAA,QAAQ,EAAEnB,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACiB,KAAN,CAAYd,UAAZ,CAAf,EAAwC,EAAxC,CAHL;AAILiB,EAAAA,QAAQ,EAAEpB,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACiB,KAAN,CAAYd,UAAZ,CAAf,EAAwC,EAAxC;AAJL,CADW,EAOjBkB,OAPiB,MAORC,IAAD,IAAU;AACjB,QAAMC,SAAS,GAAGxB,IAAI,CAAC,UAAUwB,SAAV,CAAoBC,IAApB,EAAuE;AAC5F,QAAI;AACF,UAAIC,QAAa,GAAG,EAApB;;AACA,cAAQD,IAAR;AACE,aAAK,KAAL;AACEC,UAAAA,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,YAAV,EAAjB;AACA;;AACF,aAAK,UAAL;AACED,UAAAA,QAAQ,GAAG,MAAMxB,SAAS,CAAC0B,iBAAV,EAAjB;AACA;;AACF,aAAK,UAAL;AACEF,UAAAA,QAAQ,CAACG,IAAT,GAAgBC,YAAY,CAACC,YAAb,GAA4BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,YAAxB,CAA5B,GAAoE,EAApF;AACA;;AACF;AACEL,UAAAA,QAAQ,GAAG,MAAMxB,SAAS,CAACgC,gBAAV,EAAjB;AACA;AAZJ;;AAeAX,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaC,QAAQ,CAACG,IAAtB;AACD,KAlBD,CAkBE,OAAOM,GAAP,EAAY;AACZhC,MAAAA,SAAS,CAACgC,GAAD,CAAT;AACD;AACF,GAtBqB,CAAtB;;AAwBA,QAAMC,SAAS,GAAG,CAACX,IAAD,EAAoDY,MAApD,KAAoE;AACpFd,IAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaY,MAAb;AACD,GAFD;;AAIA,SAAO;AACLb,IAAAA,SADK;AAELY,IAAAA;AAFK,GAAP;AAID,CAxCiB,CAApB;MAAMpB,W;AA0CN,eAAeA,WAAf","sourcesContent":["import { flow, types } from 'mobx-state-tree';\n\nimport { tokensApi } from '@/services/api';\nimport { clogError } from '@/utils/logger';\n\nconst TokenModel = types.model({\n  name: types.string,\n  symbol: types.string,\n  address: types.string,\n  chainId: types.optional(types.number, 56),\n  decimals: types.union(types.number, types.string),\n  logoURI: types.optional(types.string, ''),\n});\n\nconst TokensModel = types\n  .model({\n    default: types.optional(types.array(TokenModel), []),\n    top: types.optional(types.array(TokenModel), []),\n    extended: types.optional(types.array(TokenModel), []),\n    imported: types.optional(types.array(TokenModel), []),\n  })\n  .actions((self) => {\n    const getTokens = flow(function* getTokens(type: 'top' | 'default' | 'extended' | 'imported') {\n      try {\n        let responce: any = {};\n        switch (type) {\n          case 'top':\n            responce = yield tokensApi.getTopTokens();\n            break;\n          case 'extended':\n            responce = yield tokensApi.getExtendedTokens();\n            break;\n          case 'imported':\n            responce.data = localStorage.importTokens ? JSON.parse(localStorage.importTokens) : [];\n            break;\n          default:\n            responce = yield tokensApi.getDefaultTokens();\n            break;\n        }\n\n        self[type] = responce.data;\n      } catch (err) {\n        clogError(err);\n      }\n    });\n\n    const setTokens = (type: 'top' | 'default' | 'extended' | 'imported', tokens: any) => {\n      self[type] = tokens;\n    };\n\n    return {\n      getTokens,\n      setTokens,\n    };\n  });\n\nexport default TokensModel;\n"]},"metadata":{},"sourceType":"module"}