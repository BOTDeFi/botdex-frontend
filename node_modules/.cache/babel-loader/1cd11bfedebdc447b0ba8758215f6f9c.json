{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useRefresh.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FAST_INTERVAL = 15000;\nconst SLOW_INTERVAL = 60000;\nexport const RefreshContext = /*#__PURE__*/React.createContext({\n  slow: 0,\n  fast: 0\n}); // Check if the tab is active in the user browser\n\nconst useIsBrowserTabActive = () => {\n  _s();\n\n  const isBrowserTabActiveRef = useRef(true);\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      isBrowserTabActiveRef.current = !document.hidden;\n    };\n\n    window.addEventListener('visibilitychange', onVisibilityChange);\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange);\n    };\n  }, []);\n  return isBrowserTabActiveRef;\n}; // This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\n\n\n_s(useIsBrowserTabActive, \"dHtYsQ80fnJK1GTuqt9M0MimixU=\");\n\nexport const RefreshContextProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n  const isBrowserTabActiveRef = useIsBrowserTabActive();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setFast(prev => prev + 1);\n      }\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setSlow(prev => prev + 1);\n      }\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n  return /*#__PURE__*/_jsxDEV(RefreshContext.Provider, {\n    value: {\n      slow,\n      fast\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n}; // This hook is used to perform components/fetches to update the displayed data\n\n_s2(RefreshContextProvider, \"wbvesbeiso+IX+rX4jBoetIyo3s=\", false, function () {\n  return [useIsBrowserTabActive];\n});\n\n_c = RefreshContextProvider;\n\nconst useRefresh = () => {\n  _s3();\n\n  const {\n    fast,\n    slow\n  } = useContext(RefreshContext);\n  return {\n    fastRefresh: fast,\n    slowRefresh: slow\n  };\n};\n\n_s3(useRefresh, \"c9EV4Bk20RQ6/TC8eBUqPcZQJqg=\");\n\nexport default useRefresh;\n\nvar _c;\n\n$RefreshReg$(_c, \"RefreshContextProvider\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useRefresh.tsx"],"names":["React","useContext","useEffect","useRef","useState","FAST_INTERVAL","SLOW_INTERVAL","RefreshContext","createContext","slow","fast","useIsBrowserTabActive","isBrowserTabActiveRef","onVisibilityChange","current","document","hidden","window","addEventListener","removeEventListener","RefreshContextProvider","children","setSlow","setFast","interval","setInterval","prev","clearInterval","useRefresh","fastRefresh","slowRefresh"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,QAA/C,QAA+D,OAA/D;;AAEA,MAAMC,aAAa,GAAG,KAAtB;AACA,MAAMC,aAAa,GAAG,KAAtB;AAEA,OAAO,MAAMC,cAAc,gBAAGP,KAAK,CAACQ,aAAN,CAAoB;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,IAAI,EAAE;AAAjB,CAApB,CAAvB,C,CAEP;;AACA,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AAClC,QAAMC,qBAAqB,GAAGT,MAAM,CAAC,IAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,kBAAkB,GAAG,MAAM;AAC/BD,MAAAA,qBAAqB,CAACE,OAAtB,GAAgC,CAACC,QAAQ,CAACC,MAA1C;AACD,KAFD;;AAIAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4CL,kBAA5C;AAEA,WAAO,MAAM;AACXI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,kBAA3B,EAA+CN,kBAA/C;AACD,KAFD;AAGD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAOD,qBAAP;AACD,CAhBD,C,CAkBA;;;GAlBMD,qB;;AAmBN,OAAO,MAAMS,sBAAgC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChE,QAAM,CAACZ,IAAD,EAAOa,OAAP,IAAkBlB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACM,IAAD,EAAOa,OAAP,IAAkBnB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMQ,qBAAqB,GAAGD,qBAAqB,EAAnD;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,UAAIb,qBAAqB,CAACE,OAA1B,EAAmC;AACjCS,QAAAA,OAAO,CAAEG,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;AACF,KAJ2B,EAIzBrB,aAJyB,CAA5B;AAKA,WAAO,MAAMsB,aAAa,CAACH,QAAD,CAA1B;AACD,GAPQ,EAON,CAACZ,qBAAD,CAPM,CAAT;AASAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,UAAIb,qBAAqB,CAACE,OAA1B,EAAmC;AACjCQ,QAAAA,OAAO,CAAEI,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;AACF,KAJ2B,EAIzBpB,aAJyB,CAA5B;AAKA,WAAO,MAAMqB,aAAa,CAACH,QAAD,CAA1B;AACD,GAPQ,EAON,CAACZ,qBAAD,CAPM,CAAT;AASA,sBAAO,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEH,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhC;AAAA,cAAiDW;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxBM,C,CA0BP;;IA1BaD,sB;UAGmBT,qB;;;KAHnBS,sB;;AA2Bb,MAAMQ,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM;AAAElB,IAAAA,IAAF;AAAQD,IAAAA;AAAR,MAAiBR,UAAU,CAACM,cAAD,CAAjC;AACA,SAAO;AAAEsB,IAAAA,WAAW,EAAEnB,IAAf;AAAqBoB,IAAAA,WAAW,EAAErB;AAAlC,GAAP;AACD,CAHD;;IAAMmB,U;;AAKN,eAAeA,UAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\n\nconst FAST_INTERVAL = 15000;\nconst SLOW_INTERVAL = 60000;\n\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 });\n\n// Check if the tab is active in the user browser\nconst useIsBrowserTabActive = () => {\n  const isBrowserTabActiveRef = useRef(true);\n\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      isBrowserTabActiveRef.current = !document.hidden;\n    };\n\n    window.addEventListener('visibilitychange', onVisibilityChange);\n\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange);\n    };\n  }, []);\n\n  return isBrowserTabActiveRef;\n};\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({ children }) => {\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n  const isBrowserTabActiveRef = useIsBrowserTabActive();\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setFast((prev) => prev + 1);\n      }\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setSlow((prev) => prev + 1);\n      }\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>;\n};\n\n// This hook is used to perform components/fetches to update the displayed data\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext);\n  return { fastRefresh: fast, slowRefresh: slow };\n};\n\nexport default useRefresh;\n"]},"metadata":{},"sourceType":"module"}