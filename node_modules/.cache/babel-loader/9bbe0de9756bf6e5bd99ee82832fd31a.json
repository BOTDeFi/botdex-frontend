{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport useRefresh from '@/hooks/useRefresh';\nimport { PoolFarmingMode } from '@/types';\nimport { toBigNumber } from '@/utils';\nimport { useMst } from '..';\nimport { getStakedValue, transformPool } from './helpers';\nexport const usePools = () => {\n  _s();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const {\n    pools: poolStore,\n    user\n  } = useMst();\n  useEffect(() => {\n    if (user.address) {\n      poolStore.fetchPoolsUserDataAsync(user.address);\n    }\n  }, [user.address, poolStore, fastRefresh]);\n  return {\n    pools: poolStore.data.slice().map(transformPool)\n  };\n};\n\n_s(usePools, \"A8zrdpMJUszpmXzV8AlqAJRLc2Y=\", false, function () {\n  return [useRefresh, useMst];\n});\n\nexport const useSelectVaultData = () => {\n  _s2();\n\n  const {\n    pools: {\n      estimatedRefineryBountyReward: estimatedRefineryBountyRewardRaw,\n      totalRefineryInVault: totalRefineryInVaultRaw,\n      pricePerFullShare: pricePerFullShareRaw,\n      totalShares: totalSharesRaw,\n      availableRefineryAmountToCompound: availableRefineryAmountToCompoundRaw,\n      fuelTokensAmount: fuelTokensAmountRaw,\n      fees,\n      userData: {\n        isLoading,\n        userShares: userSharesAsString,\n        refineryAtLastUserAction: refineryAtLastUserActionAsString,\n        lastDepositedTime,\n        lastUserActionTime\n      }\n    }\n  } = useMst();\n  const estimatedRefineryBountyReward = useMemo(() => toBigNumber(estimatedRefineryBountyRewardRaw, true), [estimatedRefineryBountyRewardRaw]);\n  const totalRefineryInVault = useMemo(() => toBigNumber(totalRefineryInVaultRaw, true), [totalRefineryInVaultRaw]);\n  const pricePerFullShare = useMemo(() => toBigNumber(pricePerFullShareRaw, true), [pricePerFullShareRaw]);\n  const totalShares = useMemo(() => toBigNumber(totalSharesRaw, true), [totalSharesRaw]);\n  const availableRefineryAmountToCompound = useMemo(() => toBigNumber(availableRefineryAmountToCompoundRaw), [availableRefineryAmountToCompoundRaw]);\n  const fuelTokensAmount = useMemo(() => toBigNumber(fuelTokensAmountRaw), [fuelTokensAmountRaw]);\n  const userShares = useMemo(() => toBigNumber(userSharesAsString, true), [userSharesAsString]);\n  const refineryAtLastUserAction = useMemo(() => toBigNumber(refineryAtLastUserActionAsString, true), [refineryAtLastUserActionAsString]);\n  return {\n    estimatedRefineryBountyReward,\n    totalRefineryInVault,\n    pricePerFullShare,\n    totalShares,\n    availableRefineryAmountToCompound,\n    fuelTokensAmount,\n    fees,\n    userData: {\n      isLoading,\n      userShares,\n      refineryAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  };\n};\n\n_s2(useSelectVaultData, \"qVvxi18Gf8NQOqmbqiB/SeD/ag4=\", false, function () {\n  return [useMst];\n});\n\nexport const useStakedValue = (farmMode, pool) => {\n  _s3();\n\n  const {\n    pricePerFullShare,\n    userData: {\n      userShares\n    }\n  } = useSelectVaultData();\n  const {\n    userData\n  } = pool;\n  const hasStakedValue = useMemo(() => {\n    if (farmMode === PoolFarmingMode.auto) {\n      return userShares ? userShares.gt(0) : false;\n    }\n\n    const stakedBalance = toBigNumber(userData === null || userData === void 0 ? void 0 : userData.stakedBalance);\n    return stakedBalance.gt(0);\n  }, [farmMode, userData === null || userData === void 0 ? void 0 : userData.stakedBalance, userShares]);\n  const stakedValue = useMemo(() => getStakedValue(farmMode, pool, userShares, pricePerFullShare), [farmMode, pool, pricePerFullShare, userShares]);\n  return {\n    hasStakedValue,\n    stakedValue\n  };\n};\n\n_s3(useStakedValue, \"zGzEMrrRab4GS5JOwOcRH0sY9SQ=\", false, function () {\n  return [useSelectVaultData];\n});","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/hooks.ts"],"names":["useEffect","useMemo","useRefresh","PoolFarmingMode","toBigNumber","useMst","getStakedValue","transformPool","usePools","fastRefresh","pools","poolStore","user","address","fetchPoolsUserDataAsync","data","slice","map","useSelectVaultData","estimatedRefineryBountyReward","estimatedRefineryBountyRewardRaw","totalRefineryInVault","totalRefineryInVaultRaw","pricePerFullShare","pricePerFullShareRaw","totalShares","totalSharesRaw","availableRefineryAmountToCompound","availableRefineryAmountToCompoundRaw","fuelTokensAmount","fuelTokensAmountRaw","fees","userData","isLoading","userShares","userSharesAsString","refineryAtLastUserAction","refineryAtLastUserActionAsString","lastDepositedTime","lastUserActionTime","useStakedValue","farmMode","pool","hasStakedValue","auto","gt","stakedBalance","stakedValue"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\n\nimport useRefresh from '@/hooks/useRefresh';\nimport { IPoolFarmingMode, Pool, PoolFarmingMode } from '@/types';\nimport { toBigNumber } from '@/utils';\n\nimport { useMst } from '..';\n\nimport { getStakedValue, transformPool } from './helpers';\n\nexport const usePools = (): { pools: Pool[] } => {\n  const { fastRefresh } = useRefresh();\n  const { pools: poolStore, user } = useMst();\n\n  useEffect(() => {\n    if (user.address) {\n      poolStore.fetchPoolsUserDataAsync(user.address);\n    }\n  }, [user.address, poolStore, fastRefresh]);\n\n  return { pools: poolStore.data.slice().map(transformPool as any) };\n};\n\nexport const useSelectVaultData = () => {\n  const {\n    pools: {\n      estimatedRefineryBountyReward: estimatedRefineryBountyRewardRaw,\n      totalRefineryInVault: totalRefineryInVaultRaw,\n      pricePerFullShare: pricePerFullShareRaw,\n      totalShares: totalSharesRaw,\n      availableRefineryAmountToCompound: availableRefineryAmountToCompoundRaw,\n      fuelTokensAmount: fuelTokensAmountRaw,\n      fees,\n      userData: {\n        isLoading,\n        userShares: userSharesAsString,\n        refineryAtLastUserAction: refineryAtLastUserActionAsString,\n        lastDepositedTime,\n        lastUserActionTime,\n      },\n    },\n  } = useMst();\n\n  const estimatedRefineryBountyReward = useMemo(\n    () => toBigNumber(estimatedRefineryBountyRewardRaw, true),\n    [estimatedRefineryBountyRewardRaw],\n  );\n\n  const totalRefineryInVault = useMemo(() => toBigNumber(totalRefineryInVaultRaw, true), [\n    totalRefineryInVaultRaw,\n  ]);\n\n  const pricePerFullShare = useMemo(() => toBigNumber(pricePerFullShareRaw, true), [\n    pricePerFullShareRaw,\n  ]);\n\n  const totalShares = useMemo(() => toBigNumber(totalSharesRaw, true), [totalSharesRaw]);\n\n  const availableRefineryAmountToCompound = useMemo(\n    () => toBigNumber(availableRefineryAmountToCompoundRaw),\n    [availableRefineryAmountToCompoundRaw],\n  );\n\n  const fuelTokensAmount = useMemo(() => toBigNumber(fuelTokensAmountRaw), [fuelTokensAmountRaw]);\n\n  const userShares = useMemo(() => toBigNumber(userSharesAsString, true), [userSharesAsString]);\n\n  const refineryAtLastUserAction = useMemo(\n    () => toBigNumber(refineryAtLastUserActionAsString, true),\n    [refineryAtLastUserActionAsString],\n  );\n\n  return {\n    estimatedRefineryBountyReward,\n    totalRefineryInVault,\n    pricePerFullShare,\n    totalShares,\n    availableRefineryAmountToCompound,\n    fuelTokensAmount,\n    fees,\n    userData: {\n      isLoading,\n      userShares,\n      refineryAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  };\n};\n\nexport const useStakedValue = (\n  farmMode: IPoolFarmingMode,\n  pool: Pool,\n): {\n  hasStakedValue: boolean;\n  stakedValue: BigNumber;\n} => {\n  const {\n    pricePerFullShare,\n    userData: { userShares },\n  } = useSelectVaultData();\n\n  const { userData } = pool;\n\n  const hasStakedValue = useMemo(() => {\n    if (farmMode === PoolFarmingMode.auto) {\n      return userShares ? userShares.gt(0) : false;\n    }\n    const stakedBalance = toBigNumber(userData?.stakedBalance);\n    return stakedBalance.gt(0);\n  }, [farmMode, userData?.stakedBalance, userShares]);\n\n  const stakedValue = useMemo(() => getStakedValue(farmMode, pool, userShares, pricePerFullShare), [\n    farmMode,\n    pool,\n    pricePerFullShare,\n    userShares,\n  ]);\n\n  return {\n    hasStakedValue,\n    stakedValue,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}