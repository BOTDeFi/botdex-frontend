{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Search/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport cn from 'classnames';\nimport LupaImg from \"../../../assets/img/icons/lupa-white.svg\";\nimport { Button, Input, InputNumber } from '..';\nimport './Search.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = /*#__PURE__*/React.memo(_c = _s(({\n  className,\n  type = 'text',\n  placeholder,\n  size = 'sm',\n  realtime,\n  onChange,\n  btn,\n  colorScheme = 'transparent',\n  value\n}) => {\n  _s();\n\n  const [inputValue, setInputValue] = React.useState(value || '');\n  const inputRef = React.useRef(null);\n  const inputNumberRef = React.useRef(null);\n\n  const handleChange = impValue => {\n    setInputValue(impValue);\n\n    if (realtime && onChange) {\n      onChange(impValue);\n    }\n  };\n\n  const handleImgClick = () => {\n    if (inputValue) {\n      return onChange && onChange(inputValue);\n    }\n\n    if (type === 'text') {\n      return inputRef.current && inputRef.current.focus();\n    }\n\n    if (type === 'number') {\n      return inputNumberRef.current && inputNumberRef.current.focus();\n    }\n\n    return undefined;\n  };\n\n  const handleEnterDown = e => {\n    if (e.key === 'Enter' && e.currentTarget.value && !e.repeat) {\n      return onChange && onChange(inputValue);\n    }\n\n    return undefined;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn('search box-f-ai-c', `input-${size}`, `search-${colorScheme}`, className),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search__img\",\n      onClick: handleImgClick,\n      onKeyDown: handleImgClick,\n      role: \"button\",\n      tabIndex: -1,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: LupaImg,\n        alt: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), type === 'number' && /*#__PURE__*/_jsxDEV(InputNumber, {\n      onChange: handleChange,\n      onKeyDown: handleEnterDown,\n      colorScheme: \"transparent\",\n      ref: inputNumberRef,\n      inputSize: size,\n      value: inputValue,\n      inputClass: cn({\n        'text-md': size === 'lg'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }, this), type === 'text' && /*#__PURE__*/_jsxDEV(Input, {\n      value: inputValue,\n      className: cn({\n        'text-md': size === 'lg',\n        'text': size === 'sm'\n      }, 'text-white'),\n      ref: inputRef,\n      placeholder: placeholder,\n      onChange: e => handleChange(e.target.value),\n      onKeyDown: handleEnterDown,\n      colorScheme: \"transparent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }, this), btn && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleImgClick,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-bold text-md text-white\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 7\n  }, this);\n}, \"RxLXkdSQCN+Uxh8qf8oY5tV0Xr0=\"));\n_c2 = Search;\nexport default Search;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Search$React.memo\");\n$RefreshReg$(_c2, \"Search\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Search/index.tsx"],"names":["React","cn","Button","Input","InputNumber","Search","memo","className","type","placeholder","size","realtime","onChange","btn","colorScheme","value","inputValue","setInputValue","useState","inputRef","useRef","inputNumberRef","handleChange","impValue","handleImgClick","current","focus","undefined","handleEnterDown","e","key","currentTarget","repeat","LupaImg","target"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Input as AntdInput } from 'antd';\nimport cn from 'classnames';\n\nimport LupaImg from '../../../assets/img/icons/lupa-white.svg';\nimport { Button, Input, InputNumber } from '..';\n\nimport './Search.scss';\n\ninterface ISearch {\n  className?: string;\n  size?: 'sm' | 'lg' | 'md';\n  realtime?: boolean;\n  type?: 'text' | 'number';\n  placeholder?: string;\n  value?: string;\n  onChange?: (value: number | string) => void;\n  btn?: boolean;\n  colorScheme?: 'transparent' | 'gray';\n}\n\nconst Search: React.FC<ISearch> = React.memo(\n  ({\n    className,\n    type = 'text',\n    placeholder,\n    size = 'sm',\n    realtime,\n    onChange,\n    btn,\n    colorScheme = 'transparent',\n    value,\n  }) => {\n    const [inputValue, setInputValue] = React.useState<number | string>(value || '');\n\n    const inputRef = React.useRef<AntdInput>(null);\n    const inputNumberRef = React.useRef<HTMLInputElement>(null);\n\n    const handleChange = (impValue: number | string) => {\n      setInputValue(impValue);\n      if (realtime && onChange) {\n        onChange(impValue);\n      }\n    };\n\n    const handleImgClick = () => {\n      if (inputValue) {\n        return onChange && onChange(inputValue);\n      }\n      if (type === 'text') {\n        return inputRef.current && inputRef.current.focus();\n      }\n      if (type === 'number') {\n        return inputNumberRef.current && inputNumberRef.current.focus();\n      }\n      return undefined;\n    };\n\n    const handleEnterDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter' && e.currentTarget.value && !e.repeat) {\n        return onChange && onChange(inputValue);\n      }\n      return undefined;\n    };\n\n    return (\n      <div className={cn('search box-f-ai-c', `input-${size}`, `search-${colorScheme}`, className)}>\n        <div\n          className=\"search__img\"\n          onClick={handleImgClick}\n          onKeyDown={handleImgClick}\n          role=\"button\"\n          tabIndex={-1}\n        >\n          <img src={LupaImg} alt=\"search\" />\n        </div>\n        {type === 'number' && (\n          <InputNumber\n            onChange={handleChange}\n            onKeyDown={handleEnterDown}\n            colorScheme=\"transparent\"\n            ref={inputNumberRef}\n            inputSize={size}\n            value={inputValue}\n            inputClass={cn({\n              'text-md': size === 'lg',\n            })}\n          />\n        )}\n        {type === 'text' && (\n          <Input\n            value={inputValue}\n            className={cn(\n              {\n                'text-md': size === 'lg',\n                'text': size === 'sm',\n              },\n              'text-white',\n            )}\n            ref={inputRef}\n            placeholder={placeholder}\n            onChange={(e: any) => handleChange(e.target.value)}\n            onKeyDown={handleEnterDown}\n            colorScheme=\"transparent\"\n          />\n        )}\n        {btn && (\n          <Button onClick={handleImgClick}>\n            <span className=\"text-bold text-md text-white\">Search</span>\n          </Button>\n        )}\n      </div>\n    );\n  },\n);\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}