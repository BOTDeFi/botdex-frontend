{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ChoicesForm/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form as FormAntd } from 'antd';\nimport classNames from 'classnames';\nimport closeIcon from \"@/assets/img/icons/cross.svg\";\nimport Button from '@/components/atoms/Button';\nimport Input from '@/components/atoms/Input';\nimport { debounce } from '@/utils/debounce';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChoicesForm = ({\n  form,\n  validateForms,\n  inputClassName,\n  inputPostfixClassName,\n  formErrorsClassName,\n  buttonClassName\n}) => {\n  _s();\n\n  const [choicesFormError, setChoicesFormError] = useState(['']);\n  const debouncedUpdateChoicesFormFieldsError = debounce(() => {\n    const formFields = form.getFieldsError();\n    formFields.some(({\n      errors\n    }, index) => {\n      if (errors.length || index === formFields.length - 1) {\n        setChoicesFormError(errors);\n      }\n\n      return Boolean(errors.length);\n    });\n  }, 1000, false);\n\n  const onFormChange = () => {\n    debouncedUpdateChoicesFormFieldsError();\n    validateForms();\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormAntd, {\n    name: \"choicesForm\",\n    form: form,\n    initialValues: {\n      choices: [undefined, undefined]\n    },\n    onValuesChange: onFormChange,\n    children: /*#__PURE__*/_jsxDEV(FormAntd.List, {\n      name: \"choices\",\n      children: (fields, {\n        add,\n        remove\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [fields.map(field => /*#__PURE__*/_jsxDEV(FormAntd.Item, {\n          required: false,\n          help: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n          children: [/*#__PURE__*/_jsxDEV(FormAntd.Item, { ...field,\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: 'Choices must not be empty'\n            }, {\n              max: 36,\n              message: 'Character limit exceeded'\n            }],\n            noStyle: true,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              className: classNames(inputClassName),\n              placeholder: \"Input choice text\",\n              colorScheme: \"outline\",\n              inputSize: \"lg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this), fields.length > 2 && /*#__PURE__*/_jsxDEV(Button, {\n            className: classNames(inputPostfixClassName),\n            icon: closeIcon,\n            colorScheme: \"outline-purple\",\n            size: \"md\",\n            onClick: () => remove(field.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 19\n          }, this)]\n        }, field.key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(formErrorsClassName, 'text-ssm'),\n          children: choicesFormError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classNames(buttonClassName, 'text-bold'),\n          onClick: () => add(),\n          children: \"Add choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChoicesForm, \"Vr3fEdBcYufsbxfgsDETPrROFzE=\");\n\n_c = ChoicesForm;\nexport default ChoicesForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChoicesForm\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ChoicesForm/index.tsx"],"names":["React","useState","Form","FormAntd","classNames","Button","Input","debounce","ChoicesForm","form","validateForms","inputClassName","inputPostfixClassName","formErrorsClassName","buttonClassName","choicesFormError","setChoicesFormError","debouncedUpdateChoicesFormFieldsError","formFields","getFieldsError","some","errors","index","length","Boolean","onFormChange","choices","undefined","fields","add","remove","map","field","required","whitespace","message","max","closeIcon","name","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Form as FormAntd, FormInstance } from 'antd';\nimport classNames from 'classnames';\n\nimport closeIcon from '@/assets/img/icons/cross.svg';\nimport Button from '@/components/atoms/Button';\nimport Input from '@/components/atoms/Input';\nimport { debounce } from '@/utils/debounce';\n\ninterface IChoicesFormProps {\n  form: FormInstance;\n  validateForms: () => void;\n  inputClassName?: string;\n  inputPostfixClassName?: string;\n  formErrorsClassName?: string;\n  buttonClassName?: string;\n}\n\nconst ChoicesForm: React.FC<IChoicesFormProps> = ({\n  form,\n  validateForms,\n  inputClassName,\n  inputPostfixClassName,\n  formErrorsClassName,\n  buttonClassName,\n}) => {\n  const [choicesFormError, setChoicesFormError] = useState(['']);\n  const debouncedUpdateChoicesFormFieldsError = debounce(\n    () => {\n      const formFields = form.getFieldsError();\n      formFields.some(({ errors }, index) => {\n        if (errors.length || index === formFields.length - 1) {\n          setChoicesFormError(errors);\n        }\n        return Boolean(errors.length);\n      });\n    },\n    1000,\n    false,\n  );\n\n  const onFormChange = () => {\n    debouncedUpdateChoicesFormFieldsError();\n    validateForms();\n  };\n\n  return (\n    <FormAntd\n      name=\"choicesForm\"\n      form={form}\n      initialValues={{\n        choices: [undefined, undefined],\n      }}\n      onValuesChange={onFormChange}\n    >\n      <FormAntd.List name=\"choices\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map((field) => (\n              <FormAntd.Item key={field.key} required={false} help={<></>}>\n                <FormAntd.Item\n                  {...field}\n                  rules={[\n                    {\n                      required: true,\n                      whitespace: true,\n                      message: 'Choices must not be empty',\n                    },\n                    {\n                      max: 36,\n                      message: 'Character limit exceeded',\n                    },\n                  ]}\n                  noStyle\n                >\n                  <Input\n                    className={classNames(inputClassName)}\n                    placeholder=\"Input choice text\"\n                    colorScheme=\"outline\"\n                    inputSize=\"lg\"\n                  />\n                </FormAntd.Item>\n                {fields.length > 2 && (\n                  <Button\n                    className={classNames(inputPostfixClassName)}\n                    icon={closeIcon}\n                    colorScheme=\"outline-purple\"\n                    size=\"md\"\n                    onClick={() => remove(field.name)}\n                  />\n                )}\n              </FormAntd.Item>\n            ))}\n            <div className={classNames(formErrorsClassName, 'text-ssm')}>{choicesFormError}</div>\n            <Button className={classNames(buttonClassName, 'text-bold')} onClick={() => add()}>\n              Add choice\n            </Button>\n          </>\n        )}\n      </FormAntd.List>\n    </FormAntd>\n  );\n};\n\nexport default ChoicesForm;\n"]},"metadata":{},"sourceType":"module"}