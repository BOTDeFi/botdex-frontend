{"ast":null,"code":"/**\n * @typedef {import('./index.js').Content} Content\n */\nimport { u } from 'unist-builder';\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array.<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array.<Content>}\n */\n\nexport function wrap(nodes, loose) {\n  /** @type {Array.<Content>} */\n  const result = [];\n  let index = -1;\n\n  if (loose) {\n    result.push(u('text', '\\n'));\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'));\n    result.push(nodes[index]);\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/mdast-util-to-hast/lib/wrap.js"],"names":["u","wrap","nodes","loose","result","index","push","length"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,CAAR,QAAgB,eAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4B;AACjC;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,MAAIF,KAAJ,EAAW;AACTC,IAAAA,MAAM,CAACE,IAAP,CAAYN,CAAC,CAAC,MAAD,EAAS,IAAT,CAAb;AACD;;AAED,SAAO,EAAEK,KAAF,GAAUH,KAAK,CAACK,MAAvB,EAA+B;AAC7B,QAAIF,KAAJ,EAAWD,MAAM,CAACE,IAAP,CAAYN,CAAC,CAAC,MAAD,EAAS,IAAT,CAAb;AACXI,IAAAA,MAAM,CAACE,IAAP,CAAYJ,KAAK,CAACG,KAAD,CAAjB;AACD;;AAED,MAAIF,KAAK,IAAID,KAAK,CAACK,MAAN,GAAe,CAA5B,EAA+B;AAC7BH,IAAAA,MAAM,CAACE,IAAP,CAAYN,CAAC,CAAC,MAAD,EAAS,IAAT,CAAb;AACD;;AAED,SAAOI,MAAP;AACD","sourcesContent":["/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array.<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array.<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array.<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}