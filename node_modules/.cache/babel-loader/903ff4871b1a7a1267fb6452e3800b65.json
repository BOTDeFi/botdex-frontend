{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape');\n    effects.enter('escapeMarker');\n    effects.consume(code);\n    effects.exit('escapeMarker');\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue');\n      effects.consume(code);\n      effects.exit('characterEscapeValue');\n      effects.exit('characterEscape');\n      return ok;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/node_modules/micromark-core-commonmark/lib/character-escape.js"],"names":["asciiPunctuation","characterEscape","name","tokenize","tokenizeCharacterEscape","effects","ok","nok","start","code","enter","consume","exit","open"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,gBAAR,QAA+B,0BAA/B;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,iBADuB;AAE7BC,EAAAA,QAAQ,EAAEC;AAFmB,CAAxB;AAIP;;AAEA,SAASA,uBAAT,CAAiCC,OAAjC,EAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;AACjD,SAAOC,KAAP;AACA;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBJ,IAAAA,OAAO,CAACK,KAAR,CAAc,iBAAd;AACAL,IAAAA,OAAO,CAACK,KAAR,CAAc,cAAd;AACAL,IAAAA,OAAO,CAACM,OAAR,CAAgBF,IAAhB;AACAJ,IAAAA,OAAO,CAACO,IAAR,CAAa,cAAb;AACA,WAAOC,IAAP;AACD;AACD;;;AAEA,WAASA,IAAT,CAAcJ,IAAd,EAAoB;AAClB,QAAIT,gBAAgB,CAACS,IAAD,CAApB,EAA4B;AAC1BJ,MAAAA,OAAO,CAACK,KAAR,CAAc,sBAAd;AACAL,MAAAA,OAAO,CAACM,OAAR,CAAgBF,IAAhB;AACAJ,MAAAA,OAAO,CAACO,IAAR,CAAa,sBAAb;AACAP,MAAAA,OAAO,CAACO,IAAR,CAAa,iBAAb;AACA,aAAON,EAAP;AACD;;AAED,WAAOC,GAAG,CAACE,IAAD,CAAV;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}