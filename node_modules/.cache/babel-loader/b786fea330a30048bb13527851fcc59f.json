{"ast":null,"code":"var _jsxFileName = \"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/ImgWebp/index.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * This function creates webp picture component\n *\n * @param src-src to jpg/png etc img,  srcWebp-src to webp img\n * @returns Component\n * @expample\n            import picture from 'src/assets/img/space.jpg';\n            <ImgWebp loading=\"lazy\" src={picture} alt=\"Space\" />\n */\nconst ImgWebp = ({\n  loading,\n  src,\n  alt,\n  className\n}) => {\n  const concatedResolution = imgSrc => {\n    return imgSrc.slice(0, imgSrc.lastIndexOf('.'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"picture\", {\n      className: className,\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        type: \"image/webp\",\n        srcSet: `${concatedResolution(src)}.webp`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        loading: loading,\n        src: `${src}`,\n        alt: alt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = ImgWebp;\nexport default ImgWebp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImgWebp\");","map":{"version":3,"sources":["/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/ImgWebp/index.tsx"],"names":["React","ImgWebp","loading","src","alt","className","concatedResolution","imgSrc","slice","lastIndexOf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,GAAX;AAAgBC,EAAAA,GAAhB;AAAqBC,EAAAA;AAArB,CAAD,KAAsC;AAC5E,QAAMC,kBAAkB,GAAIC,MAAD,IAAoB;AAC7C,WAAOA,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBD,MAAM,CAACE,WAAP,CAAmB,GAAnB,CAAhB,CAAP;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE;AAAS,MAAA,SAAS,EAAEJ,SAApB;AAAA,8BACE;AAAQ,QAAA,IAAI,EAAC,YAAb;AAA0B,QAAA,MAAM,EAAG,GAAEC,kBAAkB,CAACH,GAAD,CAAM;AAA7D;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,OAAO,EAAED,OAAd;AAAuB,QAAA,GAAG,EAAG,GAAEC,GAAI,EAAnC;AAAsC,QAAA,GAAG,EAAEC;AAA3C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAQD,CAbD;;KAAMH,O;AAeN,eAAeA,OAAf","sourcesContent":["import React from 'react';\n\nexport interface ImgWebpProps {\n  loading: 'eager' | 'lazy' | undefined;\n  src: string;\n  alt: string;\n  className?: string;\n}\n/**\n * This function creates webp picture component\n *\n * @param src-src to jpg/png etc img,  srcWebp-src to webp img\n * @returns Component\n * @expample\n            import picture from 'src/assets/img/space.jpg';\n            <ImgWebp loading=\"lazy\" src={picture} alt=\"Space\" />\n */\n\nconst ImgWebp: React.FC<ImgWebpProps> = ({ loading, src, alt, className }) => {\n  const concatedResolution = (imgSrc: string) => {\n    return imgSrc.slice(0, imgSrc.lastIndexOf('.'));\n  };\n\n  return (\n    <>\n      <picture className={className}>\n        <source type=\"image/webp\" srcSet={`${concatedResolution(src)}.webp`} />\n        <img loading={loading} src={`${src}`} alt={alt} />\n      </picture>\n    </>\n  );\n};\n\nexport default ImgWebp;\n"]},"metadata":{},"sourceType":"module"}