[{"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/index.tsx":"1","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/App.tsx":"2","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useRefresh.tsx":"3","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/apolloClient.tsx":"4","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/index.ts":"5","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/MetamaskConnect/index.tsx":"6","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/constants/trade.ts":"7","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/constants/dao.ts":"8","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/RoiModal.ts":"9","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/index.tsx":"10","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/index.tsx":"11","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/index.tsx":"12","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/index.ts":"13","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/RoiOptions.ts":"14","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/index.ts":"15","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/logger/index.ts":"16","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/formatters.ts":"17","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/compoundApy.ts":"18","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/index.ts":"19","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/constants/index.ts":"20","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Farms.ts":"21","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Fees.ts":"22","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Tokens.ts":"23","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/User.ts":"24","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Pools.ts":"25","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Dao.ts":"26","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/farms.ts":"27","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/pools.ts":"28","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/tokens.ts":"29","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/contracts.ts":"30","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/constants.ts":"31","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/types/index.ts":"32","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Pools/index.tsx":"33","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Teams/index.tsx":"34","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Trade/index.tsx":"35","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Lottery/index.tsx":"36","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Collectibles/index.tsx":"37","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Team/index.tsx":"38","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/DaoList/index.tsx":"39","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Dao/index.tsx":"40","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/DaoProposal/index.tsx":"41","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Farms/index.tsx":"42","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Menu/index.tsx":"43","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Header/index.tsx":"44","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/WalletModal/index.tsx":"45","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/Modal/index.tsx":"46","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/MetamaskErrModal/index.tsx":"47","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/RoiModal/index.tsx":"48","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/index.ts":"49","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Token.ts":"50","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Address.ts":"51","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/helpers.ts":"52","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/multicall.ts":"53","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/apr.ts":"54","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/priceHelperLps.ts":"55","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/contractHelpers.ts":"56","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/helpers.ts":"57","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useTokenUsdPrice.ts":"58","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/debounce.ts":"59","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/farms/hooks.ts":"60","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/StakeUnstakeModal.ts":"61","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/PoolsCollectModal.ts":"62","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/MetamaskErrModal.ts":"63","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/FarmsStakeUnstakeModal.ts":"64","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/farms/index.ts":"65","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/index.ts":"66","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/index.ts":"67","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/abi/index.ts":"68","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useCreateProposal.ts":"69","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/index.ts":"70","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/index.ts":"71","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/index.tsx":"72","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/FarmsStakeUnstakeModal/index.tsx":"73","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/index.tsx":"74","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/index.tsx":"75","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/types.ts":"76","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/hooks.ts":"77","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/tokens/index.ts":"78","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/index.ts":"79","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Notification/index.ts":"80","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useStakeFarms.ts":"81","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useUnstakeFarms.ts":"82","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/useGetCurrentBalance.ts":"83","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/useGetBalanceByBlock.ts":"84","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/index.tsx":"85","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/CollectModal/index.tsx":"86","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/Table/index.tsx":"87","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/Preview/index.tsx":"88","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/WinNumber/index.tsx":"89","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Switch/index.tsx":"90","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/SortSelect/index.tsx":"91","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Slider/index.tsx":"92","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Skeleton/index.tsx":"93","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/core/axios.ts":"94","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/RadioGroup/index.tsx":"95","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Search/index.tsx":"96","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Popover/index.tsx":"97","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useUnstakeFarm.ts":"98","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useStakeFarm.ts":"99","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/InputNumber/index.tsx":"100","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/ImgWebp/index.tsx":"101","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Input/index.tsx":"102","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Button/index.tsx":"103","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/StakeUnstakeModal/index.tsx":"104","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/ItemsController/index.tsx":"105","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/hooks.ts":"106","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useStakePool.ts":"107","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useHarvestPool.ts":"108","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/configHelpers.ts":"109","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useHarvestFarm.ts":"110","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUnstakePool.ts":"111","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUnstakeVault.ts":"112","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useStakeVault.ts":"113","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/utils.ts":"114","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useFarmsPrices.ts":"115","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/hooks.ts":"116","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/helpers.ts":"117","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useIntersectionObserver.ts":"118","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/hooks.ts":"119","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/utils.ts":"120","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUpdateView.ts":"121","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsLinks/index.tsx":"122","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsEarnedSection/index.tsx":"123","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Popovers/index.tsx":"124","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsActionsSection/index.tsx":"125","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/Popovers/index.tsx":"126","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposalsPreview.ts":"127","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposal.ts":"128","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposalVotes.ts":"129","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Collectibles/index.ts":"130","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/index.tsx":"131","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/index.tsx":"132","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/index.tsx":"133","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/EasyMde/index.tsx":"134","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/ReactMarkdown/index.tsx":"135","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoWrapperContent/index.tsx":"136","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoList/index.tsx":"137","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/index.tsx":"138","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/index.tsx":"139","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Teams/index.tsx":"140","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useScannerUrl.ts":"141","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/urlConstructors.ts":"142","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useApprove.ts":"143","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/HOC/BasePopover.tsx":"144","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useProposalVotes.ts":"145","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsBadge/index.tsx":"146","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/OpenLink/index.tsx":"147","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsSectionTitle/index.tsx":"148","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/FarmsStakeUnstakeButtons/index.tsx":"149","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/index.tsx":"150","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Collectibles/Preview/index.tsx":"151","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Collectibles/Card/index.tsx":"152","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/TitleForm/index.tsx":"153","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ChoicesForm/index.tsx":"154","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ActionsForm/index.tsx":"155","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/FarmingModeStatus/index.tsx":"156","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/index.tsx":"157","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/OpenLink/index.tsx":"158","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Table/index.tsx":"159","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Information/index.tsx":"160","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Preview/index.tsx":"161","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Preview/index.tsx":"162","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Wrapper/index.tsx":"163","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Section/index.tsx":"164","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/ReactMarkdown/MarkdownComponents/index.tsx":"165","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalInformation/index.tsx":"166","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalVotes/index.tsx":"167","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalCastVote/index.tsx":"168","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalVotesResult/index.tsx":"169","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoList/List/index.tsx":"170","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/Preview/index.tsx":"171","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/NotFound/index.tsx":"172","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/WinningTicketsModal/index.tsx":"173","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/Round/index.tsx":"174","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Navbar/index.tsx":"175","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Exchange/index.tsx":"176","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/TradeBox/index.tsx":"177","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/BuyTicketsModal/index.tsx":"178","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Swap/index.tsx":"179","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ManageTokensModal/index.tsx":"180","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ImportPool/index.tsx":"181","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/YourLiquidity/index.tsx":"182","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ImportTokensModal/index.tsx":"183","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Liquidity/index.tsx":"184","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ExchangeSettings/index.tsx":"185","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/SelectTokenModal/index.tsx":"186","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/RemoveLiquidity/index.tsx":"187","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/AddLiquidity/index.tsx":"188","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/RecentTxs/index.tsx":"189","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ChooseTokens/index.tsx":"190","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Receive/index.tsx":"191","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/LiquidityInfoModal/index.tsx":"192","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Teams/Preview/index.tsx":"193","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Teams/TeamCard/index.tsx":"194","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useScrollToTop.ts":"195","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/HOC/TradeWrapper.tsx":"196","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/OpenLink/index.tsx":"197","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/RecentProfit/index.tsx":"198","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/TableRowSubtitle/index.tsx":"199","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/TableRowTitle/index.tsx":"200","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useCastVote.ts":"201","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/DetailsLinks/index.tsx":"202","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakingSection/index.tsx":"203","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakeUnstakeButtons/index.tsx":"204","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/CollectButton/index.tsx":"205","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useApprove.ts":"206","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useLastUpdated.ts":"207","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useTotalStaked.ts":"208","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/usePreviousValue.ts":"209","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/index.tsx":"210","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/EarnedSection/index.tsx":"211","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardTitle/index.tsx":"212","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardSubtitle/index.tsx":"213","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardFooter/index.tsx":"214","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/AutoVaultRecentProfitSection/index.tsx":"215","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/Apr/index.tsx":"216","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/EndsIn/index.tsx":"217","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/TotalStaked/index.tsx":"218","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/RecentProfit/index.tsx":"219","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/TextUnstakingFee/index.tsx":"220","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/AutoVaultRecentProfitSection/UnstakingFeeTimer/index.tsx":"221","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardFooter/CardDetails/index.tsx":"222","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useWithdrawalTimer.ts":"223"},{"size":2045,"mtime":1639494734264,"results":"224","hashOfConfig":"225"},{"size":2088,"mtime":1639494734209,"results":"226","hashOfConfig":"225"},{"size":1844,"mtime":1639494734264,"results":"227","hashOfConfig":"225"},{"size":1685,"mtime":1639494734267,"results":"228","hashOfConfig":"225"},{"size":1878,"mtime":1639494734269,"results":"229","hashOfConfig":"225"},{"size":2600,"mtime":1639494734266,"results":"230","hashOfConfig":"225"},{"size":168,"mtime":1639494734261,"results":"231","hashOfConfig":"225"},{"size":515,"mtime":1639494734261,"results":"232","hashOfConfig":"225"},{"size":9562,"mtime":1639494734269,"results":"233","hashOfConfig":"225"},{"size":508,"mtime":1639494734266,"results":"234","hashOfConfig":"225"},{"size":160,"mtime":1639494734244,"results":"235","hashOfConfig":"225"},{"size":144,"mtime":1639494734261,"results":"236","hashOfConfig":"225"},{"size":339,"mtime":1639494734269,"results":"237","hashOfConfig":"225"},{"size":450,"mtime":1639494734269,"results":"238","hashOfConfig":"225"},{"size":1097,"mtime":1639494734262,"results":"239","hashOfConfig":"225"},{"size":642,"mtime":1639494734271,"results":"240","hashOfConfig":"225"},{"size":3202,"mtime":1639494734271,"results":"241","hashOfConfig":"225"},{"size":5320,"mtime":1639494734271,"results":"242","hashOfConfig":"225"},{"size":9975,"mtime":1639494734268,"results":"243","hashOfConfig":"225"},{"size":107,"mtime":1639494734261,"results":"244","hashOfConfig":"225"},{"size":4779,"mtime":1639494734268,"results":"245","hashOfConfig":"225"},{"size":386,"mtime":1639494734268,"results":"246","hashOfConfig":"225"},{"size":1623,"mtime":1639494734269,"results":"247","hashOfConfig":"225"},{"size":507,"mtime":1639494734269,"results":"248","hashOfConfig":"225"},{"size":14774,"mtime":1639494734269,"results":"249","hashOfConfig":"225"},{"size":734,"mtime":1639494734268,"results":"250","hashOfConfig":"225"},{"size":770,"mtime":1639494734262,"results":"251","hashOfConfig":"225"},{"size":1541,"mtime":1639494734262,"results":"252","hashOfConfig":"225"},{"size":2304,"mtime":1639494734262,"results":"253","hashOfConfig":"225"},{"size":30081,"mtime":1639494734261,"results":"254","hashOfConfig":"225"},{"size":444,"mtime":1639494734271,"results":"255","hashOfConfig":"225"},{"size":3959,"mtime":1639494734271,"results":"256","hashOfConfig":"225"},{"size":12263,"mtime":1639494734266,"results":"257","hashOfConfig":"225"},{"size":973,"mtime":1639494734266,"results":"258","hashOfConfig":"225"},{"size":392,"mtime":1639494734266,"results":"259","hashOfConfig":"225"},{"size":2614,"mtime":1639494734265,"results":"260","hashOfConfig":"225"},{"size":607,"mtime":1639494734264,"results":"261","hashOfConfig":"225"},{"size":553,"mtime":1639494734266,"results":"262","hashOfConfig":"225"},{"size":2642,"mtime":1639494734265,"results":"263","hashOfConfig":"225"},{"size":882,"mtime":1639494734265,"results":"264","hashOfConfig":"225"},{"size":9382,"mtime":1639494734265,"results":"265","hashOfConfig":"225"},{"size":8348,"mtime":1639494734265,"results":"266","hashOfConfig":"225"},{"size":5019,"mtime":1639662392045,"results":"267","hashOfConfig":"225"},{"size":1445,"mtime":1639674539134,"results":"268","hashOfConfig":"225"},{"size":2135,"mtime":1639494734260,"results":"269","hashOfConfig":"225"},{"size":971,"mtime":1639669022868,"results":"270","hashOfConfig":"225"},{"size":659,"mtime":1639494734243,"results":"271","hashOfConfig":"225"},{"size":9364,"mtime":1639494734244,"results":"272","hashOfConfig":"225"},{"size":530,"mtime":1639494734269,"results":"273","hashOfConfig":"225"},{"size":417,"mtime":1639494734269,"results":"274","hashOfConfig":"225"},{"size":131,"mtime":1639494734268,"results":"275","hashOfConfig":"225"},{"size":161,"mtime":1639494734268,"results":"276","hashOfConfig":"225"},{"size":1662,"mtime":1639494734271,"results":"277","hashOfConfig":"225"},{"size":2114,"mtime":1639494734271,"results":"278","hashOfConfig":"225"},{"size":1096,"mtime":1639494734262,"results":"279","hashOfConfig":"225"},{"size":1031,"mtime":1639494734268,"results":"280","hashOfConfig":"225"},{"size":4825,"mtime":1639494734269,"results":"281","hashOfConfig":"225"},{"size":78,"mtime":1639494734264,"results":"282","hashOfConfig":"225"},{"size":799,"mtime":1639494734271,"results":"283","hashOfConfig":"225"},{"size":1155,"mtime":1639494734269,"results":"284","hashOfConfig":"225"},{"size":1146,"mtime":1639494734269,"results":"285","hashOfConfig":"225"},{"size":686,"mtime":1639494734268,"results":"286","hashOfConfig":"225"},{"size":303,"mtime":1639494734268,"results":"287","hashOfConfig":"225"},{"size":1153,"mtime":1639494734268,"results":"288","hashOfConfig":"225"},{"size":11540,"mtime":1639494734269,"results":"289","hashOfConfig":"225"},{"size":49,"mtime":1639494734266,"results":"290","hashOfConfig":"225"},{"size":1582,"mtime":1639494734271,"results":"291","hashOfConfig":"225"},{"size":412,"mtime":1639494734261,"results":"292","hashOfConfig":"225"},{"size":2082,"mtime":1639494734262,"results":"293","hashOfConfig":"225"},{"size":7202,"mtime":1639494734270,"results":"294","hashOfConfig":"225"},{"size":25,"mtime":1639494734267,"results":"295","hashOfConfig":"225"},{"size":268,"mtime":1639494734245,"results":"296","hashOfConfig":"225"},{"size":8082,"mtime":1639494734245,"results":"297","hashOfConfig":"225"},{"size":157,"mtime":1639494734251,"results":"298","hashOfConfig":"225"},{"size":648,"mtime":1639494734243,"results":"299","hashOfConfig":"225"},{"size":201,"mtime":1639494734267,"results":"300","hashOfConfig":"225"},{"size":80,"mtime":1639494734267,"results":"301","hashOfConfig":"225"},{"size":256,"mtime":1639494734267,"results":"302","hashOfConfig":"225"},{"size":924,"mtime":1639494734267,"results":"303","hashOfConfig":"225"},{"size":559,"mtime":1639494734242,"results":"304","hashOfConfig":"225"},{"size":632,"mtime":1639494734263,"results":"305","hashOfConfig":"225"},{"size":558,"mtime":1639494734263,"results":"306","hashOfConfig":"225"},{"size":2075,"mtime":1639494734267,"results":"307","hashOfConfig":"225"},{"size":3177,"mtime":1639494734267,"results":"308","hashOfConfig":"225"},{"size":6668,"mtime":1639494734251,"results":"309","hashOfConfig":"225"},{"size":5147,"mtime":1639494734244,"results":"310","hashOfConfig":"225"},{"size":841,"mtime":1639494734250,"results":"311","hashOfConfig":"225"},{"size":2406,"mtime":1639494734250,"results":"312","hashOfConfig":"225"},{"size":348,"mtime":1639494734243,"results":"313","hashOfConfig":"225"},{"size":819,"mtime":1639494734243,"results":"314","hashOfConfig":"225"},{"size":1412,"mtime":1639494734243,"results":"315","hashOfConfig":"225"},{"size":344,"mtime":1639494734243,"results":"316","hashOfConfig":"225"},{"size":617,"mtime":1639494734242,"results":"317","hashOfConfig":"225"},{"size":259,"mtime":1639494734262,"results":"318","hashOfConfig":"225"},{"size":916,"mtime":1639494734242,"results":"319","hashOfConfig":"225"},{"size":3116,"mtime":1639672231056,"results":"320","hashOfConfig":"225"},{"size":360,"mtime":1639494734242,"results":"321","hashOfConfig":"225"},{"size":1146,"mtime":1639494734263,"results":"322","hashOfConfig":"225"},{"size":1139,"mtime":1639494734263,"results":"323","hashOfConfig":"225"},{"size":1967,"mtime":1639666123898,"results":"324","hashOfConfig":"225"},{"size":881,"mtime":1639494734241,"results":"325","hashOfConfig":"225"},{"size":884,"mtime":1639494734242,"results":"326","hashOfConfig":"225"},{"size":2550,"mtime":1639661852038,"results":"327","hashOfConfig":"225"},{"size":8534,"mtime":1639494734245,"results":"328","hashOfConfig":"225"},{"size":2681,"mtime":1639494734245,"results":"329","hashOfConfig":"225"},{"size":2302,"mtime":1639494734268,"results":"330","hashOfConfig":"225"},{"size":3359,"mtime":1639494734263,"results":"331","hashOfConfig":"225"},{"size":1864,"mtime":1639494734263,"results":"332","hashOfConfig":"225"},{"size":481,"mtime":1639494734268,"results":"333","hashOfConfig":"225"},{"size":938,"mtime":1639494734263,"results":"334","hashOfConfig":"225"},{"size":3282,"mtime":1639494734263,"results":"335","hashOfConfig":"225"},{"size":4547,"mtime":1639494734263,"results":"336","hashOfConfig":"225"},{"size":1606,"mtime":1639494734263,"results":"337","hashOfConfig":"225"},{"size":98,"mtime":1639494734251,"results":"338","hashOfConfig":"225"},{"size":1726,"mtime":1639494734263,"results":"339","hashOfConfig":"225"},{"size":115,"mtime":1639494734267,"results":"340","hashOfConfig":"225"},{"size":1134,"mtime":1639494734248,"results":"341","hashOfConfig":"225"},{"size":1179,"mtime":1639494734264,"results":"342","hashOfConfig":"225"},{"size":3468,"mtime":1639494734270,"results":"343","hashOfConfig":"225"},{"size":2927,"mtime":1639494734254,"results":"344","hashOfConfig":"225"},{"size":441,"mtime":1639494734264,"results":"345","hashOfConfig":"225"},{"size":1571,"mtime":1639494734251,"results":"346","hashOfConfig":"225"},{"size":2617,"mtime":1639494734251,"results":"347","hashOfConfig":"225"},{"size":2399,"mtime":1639494734254,"results":"348","hashOfConfig":"225"},{"size":6232,"mtime":1639494734250,"results":"349","hashOfConfig":"225"},{"size":1133,"mtime":1639494734250,"results":"350","hashOfConfig":"225"},{"size":2943,"mtime":1639494734267,"results":"351","hashOfConfig":"225"},{"size":1621,"mtime":1639494734267,"results":"352","hashOfConfig":"225"},{"size":1814,"mtime":1639494734267,"results":"353","hashOfConfig":"225"},{"size":114,"mtime":1639494734246,"results":"354","hashOfConfig":"225"},{"size":164,"mtime":1639494734249,"results":"355","hashOfConfig":"225"},{"size":331,"mtime":1639494734257,"results":"356","hashOfConfig":"225"},{"size":212,"mtime":1639494734248,"results":"357","hashOfConfig":"225"},{"size":1471,"mtime":1639494734244,"results":"358","hashOfConfig":"225"},{"size":358,"mtime":1639494734244,"results":"359","hashOfConfig":"225"},{"size":6461,"mtime":1639494734247,"results":"360","hashOfConfig":"225"},{"size":54,"mtime":1639494734248,"results":"361","hashOfConfig":"225"},{"size":299,"mtime":1639494734252,"results":"362","hashOfConfig":"225"},{"size":977,"mtime":1639494734260,"results":"363","hashOfConfig":"225"},{"size":103,"mtime":1639494734257,"results":"364","hashOfConfig":"225"},{"size":730,"mtime":1639494734264,"results":"365","hashOfConfig":"225"},{"size":426,"mtime":1639494734272,"results":"366","hashOfConfig":"225"},{"size":1022,"mtime":1639494734262,"results":"367","hashOfConfig":"225"},{"size":762,"mtime":1639494734209,"results":"368","hashOfConfig":"225"},{"size":3614,"mtime":1639494734262,"results":"369","hashOfConfig":"225"},{"size":643,"mtime":1639494734251,"results":"370","hashOfConfig":"225"},{"size":494,"mtime":1639494734250,"results":"371","hashOfConfig":"225"},{"size":426,"mtime":1639494734251,"results":"372","hashOfConfig":"225"},{"size":1836,"mtime":1639494734250,"results":"373","hashOfConfig":"225"},{"size":5974,"mtime":1639494734254,"results":"374","hashOfConfig":"225"},{"size":281,"mtime":1639494734245,"results":"375","hashOfConfig":"225"},{"size":939,"mtime":1639494734245,"results":"376","hashOfConfig":"225"},{"size":1384,"mtime":1639494734248,"results":"377","hashOfConfig":"225"},{"size":3088,"mtime":1639494734248,"results":"378","hashOfConfig":"225"},{"size":7069,"mtime":1639494734248,"results":"379","hashOfConfig":"225"},{"size":1267,"mtime":1639494734253,"results":"380","hashOfConfig":"225"},{"size":10428,"mtime":1639494734256,"results":"381","hashOfConfig":"225"},{"size":502,"mtime":1639494734253,"results":"382","hashOfConfig":"225"},{"size":1690,"mtime":1639494734255,"results":"383","hashOfConfig":"225"},{"size":789,"mtime":1639494734247,"results":"384","hashOfConfig":"225"},{"size":875,"mtime":1639494734247,"results":"385","hashOfConfig":"225"},{"size":4891,"mtime":1639494734255,"results":"386","hashOfConfig":"225"},{"size":521,"mtime":1639494734248,"results":"387","hashOfConfig":"225"},{"size":998,"mtime":1639494734247,"results":"388","hashOfConfig":"225"},{"size":1678,"mtime":1639494734244,"results":"389","hashOfConfig":"225"},{"size":2878,"mtime":1639494734246,"results":"390","hashOfConfig":"225"},{"size":2778,"mtime":1639494734246,"results":"391","hashOfConfig":"225"},{"size":1720,"mtime":1639494734246,"results":"392","hashOfConfig":"225"},{"size":1152,"mtime":1639494734247,"results":"393","hashOfConfig":"225"},{"size":1122,"mtime":1639494734248,"results":"394","hashOfConfig":"225"},{"size":832,"mtime":1639494734252,"results":"395","hashOfConfig":"225"},{"size":427,"mtime":1639494734252,"results":"396","hashOfConfig":"225"},{"size":2217,"mtime":1639494734252,"results":"397","hashOfConfig":"225"},{"size":3479,"mtime":1639494734252,"results":"398","hashOfConfig":"225"},{"size":581,"mtime":1639662609598,"results":"399","hashOfConfig":"225"},{"size":5690,"mtime":1639662824863,"results":"400","hashOfConfig":"225"},{"size":2553,"mtime":1639664212109,"results":"401","hashOfConfig":"225"},{"size":2159,"mtime":1639494734252,"results":"402","hashOfConfig":"225"},{"size":3215,"mtime":1639494734260,"results":"403","hashOfConfig":"225"},{"size":11920,"mtime":1639494734259,"results":"404","hashOfConfig":"225"},{"size":1177,"mtime":1639494734258,"results":"405","hashOfConfig":"225"},{"size":6988,"mtime":1639494734260,"results":"406","hashOfConfig":"225"},{"size":3829,"mtime":1639494734258,"results":"407","hashOfConfig":"225"},{"size":4468,"mtime":1639494734258,"results":"408","hashOfConfig":"225"},{"size":4984,"mtime":1639673398836,"results":"409","hashOfConfig":"225"},{"size":5594,"mtime":1639672405301,"results":"410","hashOfConfig":"225"},{"size":7676,"mtime":1639494734259,"results":"411","hashOfConfig":"225"},{"size":13309,"mtime":1639494734257,"results":"412","hashOfConfig":"225"},{"size":4007,"mtime":1639494734259,"results":"413","hashOfConfig":"225"},{"size":17525,"mtime":1639665683376,"results":"414","hashOfConfig":"225"},{"size":5593,"mtime":1639494734259,"results":"415","hashOfConfig":"225"},{"size":6222,"mtime":1639494734259,"results":"416","hashOfConfig":"225"},{"size":464,"mtime":1639494734257,"results":"417","hashOfConfig":"225"},{"size":1962,"mtime":1639494734257,"results":"418","hashOfConfig":"225"},{"size":245,"mtime":1639494734264,"results":"419","hashOfConfig":"225"},{"size":12310,"mtime":1639494734209,"results":"420","hashOfConfig":"225"},{"size":727,"mtime":1639494734242,"results":"421","hashOfConfig":"225"},{"size":1408,"mtime":1639494734256,"results":"422","hashOfConfig":"225"},{"size":962,"mtime":1639494734256,"results":"423","hashOfConfig":"225"},{"size":562,"mtime":1639494734256,"results":"424","hashOfConfig":"225"},{"size":1774,"mtime":1639494734262,"results":"425","hashOfConfig":"225"},{"size":1838,"mtime":1639494734256,"results":"426","hashOfConfig":"225"},{"size":3768,"mtime":1639494734255,"results":"427","hashOfConfig":"225"},{"size":2536,"mtime":1639494734255,"results":"428","hashOfConfig":"225"},{"size":858,"mtime":1639494734253,"results":"429","hashOfConfig":"225"},{"size":4490,"mtime":1639494734263,"results":"430","hashOfConfig":"225"},{"size":585,"mtime":1639494734264,"results":"431","hashOfConfig":"225"},{"size":2416,"mtime":1639494734263,"results":"432","hashOfConfig":"225"},{"size":379,"mtime":1639494734264,"results":"433","hashOfConfig":"225"},{"size":224,"mtime":1639494734256,"results":"434","hashOfConfig":"225"},{"size":3338,"mtime":1639494734254,"results":"435","hashOfConfig":"225"},{"size":599,"mtime":1639494734254,"results":"436","hashOfConfig":"225"},{"size":943,"mtime":1639494734254,"results":"437","hashOfConfig":"225"},{"size":1721,"mtime":1639494734254,"results":"438","hashOfConfig":"225"},{"size":2119,"mtime":1639494734253,"results":"439","hashOfConfig":"225"},{"size":965,"mtime":1639494734255,"results":"440","hashOfConfig":"225"},{"size":905,"mtime":1639494734255,"results":"441","hashOfConfig":"225"},{"size":910,"mtime":1639494734256,"results":"442","hashOfConfig":"225"},{"size":960,"mtime":1639494734256,"results":"443","hashOfConfig":"225"},{"size":697,"mtime":1639494734254,"results":"444","hashOfConfig":"225"},{"size":927,"mtime":1639494734253,"results":"445","hashOfConfig":"225"},{"size":3748,"mtime":1639494734254,"results":"446","hashOfConfig":"225"},{"size":1268,"mtime":1639494734264,"results":"447","hashOfConfig":"225"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},"1t0t0di",{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"450"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"450"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"450"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"450"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"450"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"450"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"450"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"450"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"450"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"450"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"450"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"450"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"450"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"450"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"450"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"450"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"450"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"450"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"450"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"450"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"450"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"450"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"450"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"450"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"450"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"450"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"450"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"450"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"719","usedDeprecatedRules":"450"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"450"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"743","usedDeprecatedRules":"450"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"450"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767","usedDeprecatedRules":"450"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"796","messages":"797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"808","messages":"809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"824","messages":"825","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"826","messages":"827","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"832","messages":"833","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"850","usedDeprecatedRules":"450"},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"859","usedDeprecatedRules":"450"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"874","usedDeprecatedRules":"450"},{"filePath":"875","messages":"876","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"877","usedDeprecatedRules":"450"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"898","usedDeprecatedRules":"450"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"450"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"906","usedDeprecatedRules":"450"},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"913","messages":"914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"915","messages":"916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"919","messages":"920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"925","messages":"926","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"931","messages":"932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935","usedDeprecatedRules":"450"},"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/index.tsx",[],["936","937","938","939"],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/App.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useRefresh.tsx",["940"],"import React, { useContext, useEffect, useRef, useState } from 'react';\n\nconst FAST_INTERVAL = 15000;\nconst SLOW_INTERVAL = 60000;\n\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 });\n\n// Check if the tab is active in the user browser\nconst useIsBrowserTabActive = () => {\n  const isBrowserTabActiveRef = useRef(true);\n\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      isBrowserTabActiveRef.current = !document.hidden;\n    };\n\n    window.addEventListener('visibilitychange', onVisibilityChange);\n\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange);\n    };\n  }, []);\n\n  return isBrowserTabActiveRef;\n};\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({ children }) => {\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n  const isBrowserTabActiveRef = useIsBrowserTabActive();\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setFast((prev) => prev + 1);\n      }\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setSlow((prev) => prev + 1);\n      }\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>;\n};\n\n// This hook is used to perform components/fetches to update the displayed data\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext);\n  return { fastRefresh: fast, slowRefresh: slow };\n};\n\nexport default useRefresh;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/apolloClient.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/MetamaskConnect/index.tsx",["941"],"import React, { createContext, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { observer } from 'mobx-react';\n\nimport { contracts } from '@/config';\nimport MetamaskService from '@/services/web3';\nimport rootStore from '@/store';\n\nexport interface IwalletConnectorContext {\n  metamaskService: MetamaskService;\n  connect: () => void;\n  disconnect: () => void;\n}\n\nexport const metamaskService = new MetamaskService({\n  testnet: 'bsct',\n  // isProduction: process.env.NODE_ENV === 'production',\n});\n\nexport const walletConnectorContext = createContext<IwalletConnectorContext>({\n  metamaskService,\n  connect: (): void => {},\n  disconnect: (): void => {},\n});\n\n@observer\nclass Connector extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      provider: metamaskService,\n    };\n\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n  }\n\n  componentDidMount() {\n    const self = this;\n\n    // eslint-disable-next-line prefer-destructuring\n    const refFinanceMetamask: undefined | 'true' | 'false' = localStorage.refFinanceMetamask;\n    const hasConnectedWallet = refFinanceMetamask\n      ? (JSON.parse(refFinanceMetamask) as boolean)\n      : false;\n\n    if (hasConnectedWallet) {\n      this.connect();\n    }\n\n    this.state.provider.createContract('FACTORY', contracts.FACTORY.ADDRESS, contracts.FACTORY.ABI);\n    this.state.provider.createContract('ROUTER', contracts.ROUTER.ADDRESS, contracts.ROUTER.ABI);\n\n    this.state.provider.chainChangedObs.subscribe({\n      next(err: string) {\n        rootStore.modals.metamaskErr.setErr(err);\n      },\n    });\n\n    this.state.provider.accountChangedObs.subscribe({\n      next() {\n        self.disconnect();\n      },\n    });\n  }\n\n  connect = async () => {\n    try {\n      const { address } = await this.state.provider.connect();\n\n      rootStore.user.setAddress(address);\n      localStorage.refFinanceMetamask = true;\n    } catch (err: any) {\n      rootStore.modals.metamaskErr.setErr(err.message);\n      this.disconnect();\n    }\n  };\n\n  disconnect = () => {\n    rootStore.user.disconnect();\n  };\n\n  render() {\n    return (\n      <walletConnectorContext.Provider\n        value={{\n          metamaskService: this.state.provider,\n          connect: this.connect,\n          disconnect: this.disconnect,\n        }}\n      >\n        {this.props.children}\n      </walletConnectorContext.Provider>\n    );\n  }\n}\n\nexport default withRouter(Connector);\n\nexport function useWalletConnectorContext() {\n  return useContext(walletConnectorContext);\n}\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/constants/trade.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/constants/dao.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/RoiModal.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/index.tsx",["942","943"],"export { default as Menu } from './Menu';\nexport { default as Header } from './Header';\nexport { default as WalletModal } from './WalletModal';\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/index.ts",["944","945","946"],"export { default as ModalsModel } from './Modals';\nexport { default as UserModel } from './User';\nexport { default as TokensModel } from './Tokens';\nexport { default as FeesModel } from './Fees';\nexport { default as PoolsModel } from './Pools';\nexport { default as FarmsModel } from './Farms';\nexport { default as DaoModel } from './Dao';\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/RoiOptions.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/logger/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/formatters.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/compoundApy.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/index.ts",["947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967"],"import BigNumber from 'bignumber.js/bignumber';\nimport { Observable } from 'rxjs';\nimport Web3 from 'web3';\n\nimport { contracts } from '@/config';\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\ninterface INetworks {\n  [key: string]: string;\n}\n\ninterface IMetamaskService {\n  testnet: 'ropsten' | 'kovan' | 'rinkeby' | 'bsct';\n  isProduction?: boolean;\n}\n\nconst networks: INetworks = {\n  mainnet: '0x1',\n  ropsten: '0x3',\n  kovan: '0x2a',\n  rinkeby: '0x4',\n  bsct: '0x61',\n  bsc: '0x38',\n};\n\nexport default class MetamaskService {\n  public wallet;\n\n  public web3Provider;\n\n  private testnet: string;\n\n  private isProduction: boolean;\n\n  public walletAddress = '';\n\n  public chainChangedObs: any;\n\n  public accountChangedObs: any;\n\n  public usedNetwork: string;\n\n  public usedChain: string;\n\n  public contracts: any = {};\n\n  constructor({ testnet, isProduction = false }: IMetamaskService) {\n    this.wallet = window.ethereum;\n    this.web3Provider = new Web3(this.wallet);\n    this.testnet = testnet;\n    this.isProduction = isProduction;\n\n    this.usedNetwork = this.isProduction ? 'mainnet' : this.testnet;\n    this.usedChain = this.isProduction ? networks.mainnet : networks[this.testnet];\n\n    this.chainChangedObs = new Observable((subscriber) => {\n      if (!this.wallet) {\n        return;\n      }\n\n      this.wallet.on('chainChanged', () => {\n        const currentChain = this.wallet.chainId;\n\n        if (currentChain !== this.usedChain) {\n          subscriber.next(`Please choose ${this.usedNetwork} network in metamask wallet.`);\n        }\n      });\n    });\n\n    this.accountChangedObs = new Observable((subscriber) => {\n      if (!this.wallet) {\n        return;\n      }\n\n      this.wallet.on('accountsChanged', () => {\n        subscriber.next();\n      });\n    });\n  }\n\n  ethRequestAccounts() {\n    return this.wallet.request({ method: 'eth_requestAccounts' });\n  }\n\n  public connect() {\n    if (!this.wallet) {\n      return Promise.reject(\n        new Error(`Couldn't find Metamask extension, check if it's installed and enabled.`),\n      );\n    }\n    const currentChain = this.wallet.chainId;\n\n    return new Promise((resolve, reject) => {\n      if (!this.wallet) {\n        reject(new Error(`metamask wallet is not injected`));\n      }\n\n      if (!currentChain || currentChain === null) {\n        this.wallet\n          .request({ method: 'eth_chainId' })\n          .then((resChain: any) => {\n            if (resChain === this.usedChain) {\n              this.ethRequestAccounts()\n                .then((account: any) => {\n                  [this.walletAddress] = account;\n                  resolve({\n                    address: account[0],\n                    network: resChain,\n                  });\n                })\n                .catch(() => reject(new Error('Not authorized')));\n            } else {\n              reject(new Error(`Please choose ${this.usedNetwork} network in metamask wallet`));\n            }\n          })\n          .catch(() => reject(new Error('Not authorized')));\n      } else if (currentChain === this.usedChain) {\n        this.ethRequestAccounts()\n          .then((account: any) => {\n            [this.walletAddress] = account;\n            resolve({\n              address: account[0],\n              network: currentChain,\n            });\n          })\n          .catch(() => reject(new Error('Not authorized')));\n      } else {\n        reject(new Error(`Please choose ${this.usedNetwork} network in metamask wallet.`));\n      }\n    });\n  }\n\n  createContract(contractName: string, tokenAddress: string, abi: Array<any>) {\n    if (!this.contracts[contractName]) {\n      const contract = this.getContract(tokenAddress, abi);\n      this.contracts = {\n        ...this.contracts,\n        [contractName]: contract,\n      };\n    }\n  }\n\n  getContract(tokenAddress: string, abi: Array<any>) {\n    return new this.web3Provider.eth.Contract(abi, tokenAddress);\n  }\n\n  getEthBalance() {\n    return this.web3Provider.eth.getBalance(this.walletAddress);\n  }\n\n  static getMethodInterface(abi: Array<any>, methodName: string) {\n    return abi.filter((m) => {\n      return m.name === methodName;\n    })[0];\n  }\n\n  encodeFunctionCall(abi: any, data: Array<any>) {\n    return this.web3Provider.eth.abi.encodeFunctionCall(abi, data);\n  }\n\n  async totalSupply(tokenAddress: string, abi: Array<any>, tokenDecimals: number) {\n    const contract = this.getContract(tokenAddress, abi);\n    const totalSupply = await contract.methods.totalSupply().call();\n\n    return +new BigNumber(totalSupply).dividedBy(new BigNumber(10).pow(tokenDecimals)).toString(10);\n  }\n\n  async getTokenInfo(address: string, abi: any) {\n    try {\n      const contract = this.getContract(address, abi);\n      const name = await contract.methods.name().call();\n      const decimals = await contract.methods.decimals().call();\n      const symbol = await contract.methods.symbol().call();\n\n      return {\n        name,\n        decimals,\n        symbol,\n        address,\n      };\n    } catch (err) {\n      throw new Error('err get token info');\n    }\n  }\n\n  async checkTokenAllowance({\n    contractName,\n    tokenDecimals,\n    approvedAddress,\n    walletAddress,\n    tokenAddress,\n    approveSum,\n  }: {\n    contractName: 'ROUTER' | 'ERC20' | 'PAIR';\n    tokenDecimals?: number;\n    approvedAddress?: string;\n    walletAddress?: string;\n    tokenAddress: string;\n    approveSum?: number;\n  }) {\n    let decimals = NaN;\n\n    const contract = this.getContract(tokenAddress, contracts[contractName].ABI);\n\n    if (!tokenDecimals) {\n      const tokenInfo = await this.getTokenInfo(tokenAddress, contracts[contractName].ABI);\n      decimals = tokenInfo.decimals;\n    }\n    const walletAdr = walletAddress || this.walletAddress;\n\n    try {\n      let result = await contract.methods.allowance(walletAdr, approvedAddress).call();\n\n      result =\n        result === '0'\n          ? null\n          : +new BigNumber(result)\n              .dividedBy(new BigNumber(10).pow(tokenDecimals || decimals))\n              .toString(10);\n      if (result && new BigNumber(result).minus(approveSum || 0).isPositive()) {\n        return true;\n      }\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async approveToken({\n    contractName,\n    tokenDecimals,\n    approvedAddress,\n    walletAddress,\n    tokenAddress,\n  }: {\n    contractName: 'ROUTER' | 'ERC20' | 'PAIR';\n    tokenDecimals?: number;\n    approvedAddress?: string;\n    walletAddress?: string;\n    tokenAddress: string;\n  }) {\n    try {\n      let decimals = NaN;\n\n      if (!tokenDecimals) {\n        const tokenInfo = await this.getTokenInfo(tokenAddress, contracts[contractName].ABI);\n        decimals = tokenInfo.decimals;\n      }\n\n      const approveMethod = MetamaskService.getMethodInterface(\n        contracts[contractName].ABI,\n        'approve',\n      );\n\n      const approveSignature = this.encodeFunctionCall(approveMethod, [\n        approvedAddress || walletAddress || this.walletAddress,\n        new BigNumber(90071992.5474099).times(new BigNumber(10).pow(decimals || 8)).toString(10),\n      ]);\n\n      return this.sendTransaction({\n        from: walletAddress || this.walletAddress,\n        to: tokenAddress,\n        data: approveSignature,\n      });\n    } catch (error) {\n      return error;\n    }\n  }\n\n  static calcTransactionAmount(amount: number | string, tokenDecimal: number) {\n    return new BigNumber(amount).times(new BigNumber(10).pow(tokenDecimal)).toString(10);\n  }\n\n  static amountFromGwei(amount: number | string, tokenDecimal: number) {\n    return new BigNumber(amount).dividedBy(new BigNumber(10).pow(tokenDecimal)).toString(10);\n  }\n\n  createTransaction({\n    method,\n    data,\n    contractName,\n    tx,\n    toAddress,\n    fromAddress,\n    value,\n  }: {\n    method: string;\n    data: Array<any>;\n    contractName: 'ROUTER' | 'FACTORY';\n    tx?: any;\n    toAddress?: string;\n    fromAddress?: string;\n    value?: any;\n  }) {\n    const contract = contracts[contractName];\n    const { ABI, ADDRESS } = contract;\n    const transactionMethod = MetamaskService.getMethodInterface(ABI, method);\n\n    let signature;\n    if (transactionMethod.inputs.length) {\n      signature = this.encodeFunctionCall(transactionMethod, data);\n    }\n\n    if (tx) {\n      tx.from = fromAddress || this.walletAddress;\n      tx.data = signature;\n\n      return this.sendTransaction(tx);\n    }\n    return this.sendTransaction({\n      from: fromAddress || this.walletAddress,\n      to: toAddress || ADDRESS,\n      data: signature || '',\n      value: value || '',\n    });\n  }\n\n  signMsg(msg: string) {\n    return this.web3Provider.eth.personal.sign(msg, this.walletAddress, '');\n  }\n\n  async callContractMethod(\n    contractName: string,\n    methodName: string,\n    data?: any[],\n    contractAddress?: string,\n    contractAbi?: Array<any>,\n  ) {\n    try {\n      if (!this.contracts[contractName] && contractAddress && contractAbi) {\n        await this.createContract(contractName, contractAddress, contractAbi);\n      }\n\n      if (this.contracts[contractName]) {\n        const method = await this.contracts[contractName].methods[methodName];\n        if (data) {\n          return await method(...data).call();\n        }\n        return await method().call();\n      }\n    } catch (err: any) {\n      debugger;\n      throw new Error(err);\n    }\n    return new Error(`contract ${contractName} didn't created`);\n  }\n\n  async callContractMethodFromNewContract(\n    contractAddress: string,\n    abi: any[],\n    methodName: string,\n    data?: any[],\n  ) {\n    try {\n      const contract = this.getContract(contractAddress, abi);\n      const method = contract.methods[methodName];\n\n      if (data) {\n        return await method(...data).call();\n      }\n      return await method().call();\n    } catch (err: any) {\n      throw new Error(err);\n    }\n  }\n\n  sendTransaction(transactionConfig: any) {\n    return this.web3Provider.eth.sendTransaction({\n      ...transactionConfig,\n      from: this.walletAddress,\n    });\n  }\n}\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/constants/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Farms.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Fees.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Tokens.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/User.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Pools.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Dao.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/farms.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/pools.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/tokens.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/contracts.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/constants.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/types/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Pools/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Teams/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Trade/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Lottery/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Collectibles/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Team/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/DaoList/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Dao/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/DaoProposal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/pages/Farms/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Menu/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Header/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/WalletModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/Modal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/MetamaskErrModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/RoiModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Token.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Address.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/helpers.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/multicall.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/apr.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/priceHelperLps.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/contractHelpers.ts",["968","969"],"import { contracts } from '@/config';\nimport { Address } from '@/types';\n\nimport { metamaskService } from '../MetamaskConnect';\n\nexport type IContract = keyof typeof contracts;\n\nexport interface IContractData {\n  ADDRESS: string;\n  ABI: [];\n}\n\nexport const getContractData = (name: IContract): [string, IContractData['ABI']] => {\n  const contractData = contracts[name] as IContractData;\n  return [contractData.ADDRESS, contractData.ABI];\n};\n\nexport const getContractAddress = (name: IContract) => {\n  return (contracts[name] as IContractData).ADDRESS;\n};\n\nexport const getContract = (name: IContract) => {\n  const [address, abi] = getContractData(name) as [string, []];\n  return metamaskService.getContract(address, abi);\n};\n\n// export const getRefineryVaultContractMethodCallFee = () => {\n//   const contract = getContract('REFINERY_VAULT');\n//   return contract.methods.callFee();\n// };\n\nexport const getAddress = (address: Address): string => {\n  const chainId = metamaskService.usedChain;\n  return address[Number(chainId)];\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/helpers.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useTokenUsdPrice.ts",["970"],"export const useRefineryUsdPrice = () => {\n  return { tokenUsdPrice: 27 };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/debounce.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/farms/hooks.ts",["971","972"],"import { useEffect } from 'react';\n\nimport { farms as farmsConfig } from '@/config/farms';\nimport useRefresh from '@/hooks/useRefresh';\nimport { Farm } from '@/types';\nimport { toBigNumber } from '@/utils';\n\nimport { useMst } from '..';\n\nexport const useFarms = (): { farms: Farm[] } => {\n  const { farms } = useMst();\n\n  return { farms: farms.data.slice() as Farm[] };\n};\n\nexport const usePollFarmsData = () => {\n  const { slowRefresh } = useRefresh();\n  const { user, farms: farmsStore } = useMst();\n\n  useEffect(() => {\n    // const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsConfig.map((farmToFetch) => farmToFetch.pid);\n\n    farmsStore.fetchFarmsPublicDataAsync(pids);\n\n    if (user.address) {\n      farmsStore.fetchFarmUserDataAsync(user.address, pids);\n    }\n  }, [farmsStore, user.address, slowRefresh]);\n};\n\nexport const useFarmUserData = (farm: Farm) => {\n  return {\n    allowance: toBigNumber(farm.userData?.allowance),\n    tokenBalance: toBigNumber(farm.userData?.tokenBalance),\n    stakedBalance: toBigNumber(farm.userData?.stakedBalance),\n    earnings: toBigNumber(farm.userData?.earnings),\n  };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/StakeUnstakeModal.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/PoolsCollectModal.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/MetamaskErrModal.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/Models/Modals/FarmsStakeUnstakeModal.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/farms/index.ts",["973","974","975","976"],"import BigNumber from 'bignumber.js/bignumber';\n\nimport { getAddress, getContractAddress, getContractData } from '@/services/web3/contractHelpers';\nimport rootStore from '@/store';\nimport { Farm, FarmConfig, SerializedBigNumber } from '@/types';\nimport { toBigNumber } from '@/utils';\nimport { BIG_ONE, BIG_TEN, BIG_ZERO } from '@/utils/constants';\nimport { multicall } from '@/utils/multicall';\n\nexport const getTokenPricesFromFarms = (): Record<string, number> => {\n  const farms = rootStore.farms.data.slice() as Farm[];\n  return farms.reduce((prices: Record<string, number>, farm) => {\n    const quoteTokenAddress = getAddress(farm.quoteToken.address).toLocaleLowerCase();\n    const tokenAddress = getAddress(farm.token.address).toLocaleLowerCase();\n    if (farm.quoteToken.busdPrice !== undefined) {\n      if (!prices[quoteTokenAddress]) {\n        prices[quoteTokenAddress] = new BigNumber(farm.quoteToken.busdPrice).toNumber();\n      }\n    }\n\n    if (farm.token.busdPrice !== undefined) {\n      if (!prices[tokenAddress]) {\n        prices[tokenAddress] = new BigNumber(farm.token.busdPrice).toNumber();\n      }\n    }\n    return prices;\n  }, {});\n};\n\n/**\n * Returns the first farm with a quote token that matches from an array of preferred quote tokens\n * @param farms Array of farms\n * @param preferredQuoteTokens Array of preferred quote tokens\n * @returns A preferred farm, if found - or the first element of the farms array\n */\nexport const filterFarmsByQuoteToken = (\n  farms: Farm[],\n  preferredQuoteTokens: string[] = ['BUSD', 'WBNB'],\n): Farm => {\n  const preferredFarm = farms.find((farm) => {\n    return preferredQuoteTokens.some((quoteToken) => {\n      return farm.quoteToken.symbol === quoteToken;\n    });\n  });\n  return preferredFarm || farms[0];\n};\n\nconst getFarmFromTokenSymbol = (\n  farms: Farm[],\n  tokenSymbol: string,\n  preferredQuoteTokens?: string[],\n): Farm => {\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol);\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens);\n  return filteredFarm;\n};\n\nconst getFarmBaseTokenPrice = (\n  farm: Farm,\n  quoteTokenFarm: Farm,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  if (farm.quoteToken.symbol === 'BUSD') {\n    // hasTokenPriceVsQuote\n    return toBigNumber(farm.tokenPriceVsQuote);\n  }\n\n  if (farm.quoteToken.symbol === 'wBNB') {\n    return farm.tokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO;\n  }\n\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\n  if (!quoteTokenFarm) {\n    return BIG_ZERO;\n  }\n\n  // Possible alternative farm quoteTokens:\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n  // If the farm's quote token isn't BUSD or wBNB, we then use the quote token, of the original farm's quote token\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\n  if (quoteTokenFarm.quoteToken.symbol === 'WBNB') {\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm?.tokenPriceVsQuote || BIG_ZERO);\n    return farm.tokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote;\n    return farm.tokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO;\n  }\n\n  // Catch in case token does not have immediate or once-removed BUSD/wBNB quoteToken\n  return BIG_ZERO;\n};\n\nconst getFarmQuoteTokenPrice = (\n  farm: Farm,\n  quoteTokenFarm: Farm,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return BIG_ONE;\n  }\n\n  if (farm.quoteToken.symbol === 'WBNB') {\n    return bnbPriceBusd;\n  }\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'WBNB') {\n    return quoteTokenFarm.tokenPriceVsQuote\n      ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\n      : BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    return toBigNumber(quoteTokenFarm.tokenPriceVsQuote);\n  }\n\n  return BIG_ZERO;\n};\n\nexport const fetchFarmsPrices = async (farms: Farm[]): Promise<Farm[]> => {\n  // TODO: probably bug\n  const bnbBusdFarm = farms.find((farm: Farm) => farm.pid === 252);\n  const bnbPriceBusd = bnbBusdFarm?.tokenPriceVsQuote\n    ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote)\n    : BIG_ZERO;\n\n  const farmsWithPrices = farms.map((farm) => {\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol);\n    const baseTokenPrice = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);\n    const quoteTokenPrice = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);\n    const token = { ...farm.token, busdPrice: baseTokenPrice.toJSON() };\n    const quoteToken = { ...farm.quoteToken, busdPrice: quoteTokenPrice.toJSON() };\n    return { ...farm, token, quoteToken };\n  });\n\n  return farmsWithPrices;\n};\n\ntype PublicFarmData = {\n  tokenAmountMc: SerializedBigNumber;\n  quoteTokenAmountMc: SerializedBigNumber;\n  tokenAmountTotal: SerializedBigNumber;\n  quoteTokenAmountTotal: SerializedBigNumber;\n  lpTotalInQuoteToken: SerializedBigNumber;\n  lpTotalSupply: SerializedBigNumber;\n  tokenPriceVsQuote: SerializedBigNumber;\n  poolWeight: SerializedBigNumber;\n  multiplier: string;\n};\n\nexport const fetchPublicFarmData = async (farm: Farm): Promise<PublicFarmData> => {\n  const { pid, lpAddresses, token, quoteToken } = farm;\n  const lpAddress = getAddress(lpAddresses);\n  const [masterRefinerAddress, masterRefinerAbi] = getContractData('MASTER_REFINER');\n  const calls = [\n    // Balance of token in the LP contract\n    {\n      address: getAddress(token.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of quote token on LP contract\n    {\n      address: getAddress(quoteToken.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of LP tokens in the master chef contract\n    {\n      address: lpAddress,\n      name: 'balanceOf',\n      params: [masterRefinerAddress],\n    },\n    // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply',\n    },\n    // Token decimals\n    {\n      address: getAddress(token.address),\n      name: 'decimals',\n    },\n    // Quote token decimals\n    {\n      address: getAddress(quoteToken.address),\n      name: 'decimals',\n    },\n  ];\n\n  const [, erc20Abi] = getContractData('ERC20');\n  const [\n    tokenBalanceLP,\n    quoteTokenBalanceLP,\n    lpTokenBalanceMC,\n    lpTotalSupply,\n    tokenDecimals,\n    quoteTokenDecimals,\n  ] = await multicall(erc20Abi, calls);\n\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));\n\n  // Raw amount of token in the LP, including those not staked\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals));\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(\n    BIG_TEN.pow(quoteTokenDecimals),\n  );\n\n  // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\n  const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio);\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio);\n\n  // Total staked in LP, in quote token value\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2));\n\n  // Only make masterchef calls if farm has pid (there can be farms with \"pid: -1\" which must be excluded)\n  const [info, totalAllocPoint] =\n    pid >= 0\n      ? await multicall(masterRefinerAbi, [\n          {\n            address: masterRefinerAddress,\n            name: 'poolInfo',\n            params: [pid],\n          },\n          {\n            address: masterRefinerAddress,\n            name: 'totalAllocPoint',\n          },\n        ])\n      : [null, null];\n\n  const [, allocPointRaw] = info || [];\n  const allocPoint = toBigNumber(allocPointRaw);\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO;\n\n  return {\n    tokenAmountMc: tokenAmountMc.toJSON(),\n    quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\n    quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n    poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`,\n  };\n};\n\nexport const fetchFarm = async (farm: Farm): Promise<Farm> => {\n  const farmPublicData = await fetchPublicFarmData(farm);\n  return { ...farm, ...farmPublicData };\n};\n\nexport const fetchFarms = (farmsToFetch: FarmConfig[]): Promise<Farm[]> => {\n  return Promise.all(\n    farmsToFetch.map((farmConfig) => {\n      return fetchFarm(farmConfig);\n    }),\n  );\n};\n\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const masterRefinerAddress = getContractAddress('MASTER_REFINER');\n\n  const calls = farmsToFetch.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'allowance',\n      params: [account, masterRefinerAddress],\n    };\n  });\n\n  const [, erc20Abi] = getContractData('ERC20');\n  const rawLpAllowances = await multicall(erc20Abi, calls);\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance: any) => {\n    return new BigNumber(lpBalance).toJSON();\n  });\n  return parsedLpAllowances;\n};\n\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const calls = farmsToFetch.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    };\n  });\n\n  const [, erc20Abi] = getContractData('ERC20');\n  const rawTokenBalances = await multicall(erc20Abi, calls);\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance: any) => {\n    return new BigNumber(tokenBalance).toJSON();\n  });\n  return parsedTokenBalances;\n};\n\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const [masterRefinerAddress, masterRefinerAbi] = getContractData('MASTER_REFINER');\n\n  const calls = farmsToFetch.map((farm) => {\n    return {\n      address: masterRefinerAddress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    };\n  });\n\n  const rawStakedBalances = await multicall(masterRefinerAbi, calls);\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance: any) => {\n    return new BigNumber(stakedBalance[0]).toJSON();\n  });\n  return parsedStakedBalances;\n};\n\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const [masterRefinerAddress, masterRefinerAbi] = getContractData('MASTER_REFINER');\n\n  const calls = farmsToFetch.map((farm) => {\n    return {\n      address: masterRefinerAddress,\n      name: 'pendingRP1',\n      params: [farm.pid, account],\n    };\n  });\n\n  const rawEarnings = await multicall(masterRefinerAbi, calls);\n  const parsedEarnings = rawEarnings.map((earnings: any) => {\n    return new BigNumber(earnings).toJSON();\n  });\n  return parsedEarnings;\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/config/abi/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useCreateProposal.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/FarmsStakeUnstakeModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/index.tsx",["977"],"export { default as FarmsPreview } from './Preview';\nexport { default as FarmsTable } from './Table';\nexport { default as FarmsTableRow } from './TableRow';\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/index.tsx",["978"],"export { default as Button } from './Button';\nexport { default as ImgWebp } from './ImgWebp';\nexport { default as Input } from './Input';\nexport { default as InputNumber } from './InputNumber';\nexport { default as Notification } from './Notification';\nexport { default as Popover } from './Popover';\nexport { default as RadioGroup } from './RadioGroup';\nexport { default as Search } from './Search';\nexport { default as Skeleton } from './Skeleton';\nexport { default as Slider } from './Slider';\nexport { default as SortSelect } from './SortSelect';\nexport { default as Switch } from './Switch';\nexport { default as WinNumber } from './WinNumber';\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/types.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/hooks.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/tokens/index.ts",["979","980","981"],"import { localApi } from '../../../core/axios';\n\nexport default {\n  getDefaultTokens: () => localApi.get('default-tokens.json'),\n  getTopTokens: () => localApi.get('top-100-tokens.json'),\n  getExtendedTokens: () => localApi.get('extended-tokens.json'),\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Notification/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useStakeFarms.ts",["982","983"],"import { useCallback } from 'react';\n\nimport { useStakeFarm } from '@/hooks/farms/useStakeFarm';\nimport { getContract } from '@/services/web3/contractHelpers';\n// import { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterRefineryContract = getContract('MASTER_REFINER');\n  const { stakeFarm } = useStakeFarm(masterRefineryContract);\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(pid, amount);\n      console.info(txHash);\n    },\n    [pid, stakeFarm],\n  );\n\n  return { onStake: handleStake };\n};\n\nexport default useStakeFarms;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useUnstakeFarms.ts",["984"],"import { useCallback } from 'react';\n\nimport { useUnstakeFarm } from '@/hooks/farms/useUnstakeFarm';\nimport { getContract } from '@/services/web3/contractHelpers';\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterRefineryContract = getContract('MASTER_REFINER');\n  const { unstakeFarm } = useUnstakeFarm(masterRefineryContract);\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(pid, amount);\n    },\n    [pid, unstakeFarm],\n  );\n\n  return { onUnstake: handleUnstake };\n};\n\nexport default useUnstakeFarms;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/useGetCurrentBalance.ts",["985","986"],"import { useCallback } from 'react';\nimport { ApolloClient, gql, LazyQueryHookOptions, QueryTuple, useLazyQuery } from '@apollo/client';\n\nimport { getRfPairsContext } from '@/services/apolloClient';\n\ninterface IGetCurrentBalanceResponse {\n  user: {\n    TotalBalance: string;\n    // __typename: \"User\"\n  } | null;\n}\n\ninterface IGetCurrentBalanceVariables {\n  user_address: string;\n}\n\nexport const GET_CURRENT_BALANCE = gql`\n  query GetCurrentBalance($user_address: String!) {\n    user(id: $user_address) {\n      TotalBalance\n    }\n  }\n`;\n\n/**\n * Allows to get current user balance to use it for voting power counting purposes.\n */\nexport const useGetCurrentBalance = (\n  options?: LazyQueryHookOptions<IGetCurrentBalanceResponse, IGetCurrentBalanceVariables>,\n): {\n  getCurrentBalance: (userAddress: string) => void;\n  options: QueryTuple<IGetCurrentBalanceResponse, IGetCurrentBalanceVariables>;\n} => {\n  const [func, responseData] = useLazyQuery<\n    IGetCurrentBalanceResponse,\n    IGetCurrentBalanceVariables\n  >(GET_CURRENT_BALANCE, options);\n\n  const getCurrentBalance = useCallback(\n    (userAddress: string) => {\n      func({\n        ...getRfPairsContext(),\n        variables: {\n          user_address: userAddress,\n        },\n      });\n    },\n    [func],\n  );\n\n  return { getCurrentBalance, options: [func, responseData] };\n};\n\nexport const selectCurrentBalance = (data: IGetCurrentBalanceResponse): string | null => {\n  if (!data.user) return null;\n  return data.user.TotalBalance;\n};\n\nexport const hasCurrentBalance = (error: any, data: any): boolean => {\n  if (error || !data) return false;\n  const balance = selectCurrentBalance(data);\n  if (!balance || balance === '0') return false;\n  return Boolean(balance);\n};\n\nexport const requestHasCurrentBalance = async (\n  userAddress: string,\n  client?: ApolloClient<any>,\n): Promise<boolean> => {\n  const result = await client?.query({\n    query: GET_CURRENT_BALANCE,\n    variables: {\n      user_address: userAddress,\n    },\n  });\n  if (!result) return false;\n  return hasCurrentBalance(result.error, result.data);\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/refinery-finance-pairs/useGetBalanceByBlock.ts",["987","988"],"import { gql } from '@apollo/client';\n\nimport { apolloClient, getRfPairsContext } from '@/services/apolloClient';\nimport { Awaited } from '@/types';\n\nexport const GET_BALANCE_BY_BLOCK = gql`\n  query GetBalanceOnBlock($user_address: String!, $block_number: BigInt!) {\n    balanceHistories(\n      first: 1\n      orderBy: BlockNumber\n      orderDirection: desc\n      where: { BlockNumber_lte: $block_number, User: $user_address }\n    ) {\n      TotalBalance\n      BlockNumber\n      User {\n        id\n        TotalBalance\n      }\n    }\n  }\n`;\n// /**\n//  * Get user balance by userAddress and block (snapshot).\n//  */\n// export const useGetBalanceByBlock = (\n//   options?: UseLazyQueryOptions,\n// ): {\n//   getBalanceByBlock: (userAddress: string, block: number | string) => void;\n//   options: ReturnType<typeof useLazyQuery>;\n// } => {\n//   const [func, responseData] = useLazyQuery(GET_BALANCE_BY_BLOCK, options);\n\n//   const getBalanceByBlock = useCallback(\n//     (userAddress: string, block: number | string) => {\n//       func({\n//         ...getRfPairsContext(),\n//         variables: {\n//           user_address: userAddress,\n//           block_number: block,\n//         },\n//       });\n//     },\n//     [func],\n//   );\n\n//   return { getBalanceByBlock, options: [func, responseData] };\n// };\n\ninterface IUserBalance {\n  id: string;\n  TotalBalance: string;\n}\n\ninterface IFetchUserBalanceByBlockResponse {\n  balanceHistories: Array<{\n    BlockNumber: string;\n    TotalBalance: string;\n    User: IUserBalance;\n  }>;\n}\n\nexport const fetchUserBalanceByBlock = (userAddress: string, block: number) => {\n  return apolloClient.query<IFetchUserBalanceByBlockResponse>({\n    ...getRfPairsContext(),\n    query: GET_BALANCE_BY_BLOCK,\n    variables: {\n      user_address: userAddress,\n      block_number: block,\n    },\n  });\n};\n\nexport const fetchUserBalancesByBlock = async (\n  addresses: string[],\n  blocks: (number | string | null)[],\n) => {\n  const promises = addresses.map((address, index) => {\n    // .toLowerCase() to prevent TheGraph's errors (it returns nothing when address is not in lowerCase)\n    if (!blocks[index]) return Promise.resolve(null);\n    return fetchUserBalanceByBlock(address.toLowerCase(), Number(blocks[index]));\n  });\n\n  const results = await Promise.allSettled(promises);\n\n  return results;\n};\n\n// export const selectUserBalancesByBlock = (\n//   results: Awaited<ReturnType<typeof fetchUserBalancesByBlock>>,\n// ) => {\n//   return results.map((item) => {\n//     if (item.status !== 'fulfilled') return item;\n//     const { value } = item;\n//     if (value === null || value.data) return null;\n//     return value.data.balanceHistories[0];\n//   });\n// };\nexport const selectTotalUserBalancesByBlock = (\n  results: Awaited<ReturnType<typeof fetchUserBalancesByBlock>>,\n): IUserBalance[] => {\n  return results\n    .map((item) => {\n      if (item.status !== 'fulfilled') return undefined;\n      const { value } = item;\n      if (!value) return null;\n      const [userData] = value.data.balanceHistories;\n      return userData ? userData.User : null;\n    })\n    .filter((item) => {\n      if (item) return true;\n      return false;\n    }) as IUserBalance[];\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/CollectModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/Table/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/Preview/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/WinNumber/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Switch/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/SortSelect/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Slider/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Skeleton/index.tsx",["989","990","991"],"// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport React from 'react';\nimport { Skeleton, SkeletonProps } from 'antd';\n\nimport 'antd/lib/skeleton/style/css';\n\nexport default Skeleton;\n\nexport const SkeletonTwoRows = (props: SkeletonProps) => (\n  <Skeleton active title={false} paragraph={{ rows: 2 }} {...props} />\n);\nexport const SkeletonSixRows = (props: SkeletonProps) => (\n  <Skeleton active title={false} paragraph={{ rows: 6 }} {...props} />\n);\nexport const SkeletonTenRows = (props: SkeletonProps) => (\n  <Skeleton active title={false} paragraph={{ rows: 10 }} {...props} />\n);\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/core/axios.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/RadioGroup/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Search/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Popover/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useUnstakeFarm.ts",["992"],"import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { DEFAULT_TOKEN_DECIMAL } from '@/utils/constants';\n\nexport const useUnstakeFarm = (masterRefinerContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const unstakeFarm = useCallback(\n    async (pid: number, amount: any) => {\n      const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toFixed();\n      if (pid === 0) {\n        const tx = await callWithGasPrice({\n          contract: masterRefinerContract,\n          methodName: 'leaveStaking',\n          methodArgs: [value],\n          options: {\n            gas: 300000,\n          },\n        });\n        return tx.status;\n      }\n\n      const tx = await callWithGasPrice({\n        contract: masterRefinerContract,\n        methodName: 'withdraw',\n        methodArgs: [pid, value],\n        options: {\n          gas: 300000,\n        },\n      });\n      return tx.status;\n    },\n    [callWithGasPrice, masterRefinerContract],\n  );\n\n  return { unstakeFarm };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useStakeFarm.ts",["993"],"import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { DEFAULT_TOKEN_DECIMAL } from '@/utils/constants';\n\nexport const useStakeFarm = (masterRefinerContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const stakeFarm = useCallback(\n    async (pid: number, amount: any) => {\n      const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toFixed();\n      if (pid === 0) {\n        const tx = await callWithGasPrice({\n          contract: masterRefinerContract,\n          methodName: 'enterStaking',\n          methodArgs: [value],\n          options: {\n            gas: 300000,\n          },\n        });\n        return tx.status;\n      }\n\n      const tx = await callWithGasPrice({\n        contract: masterRefinerContract,\n        methodName: 'deposit',\n        methodArgs: [pid, value],\n        options: {\n          gas: 300000,\n        },\n      });\n      return tx.status;\n    },\n    [callWithGasPrice, masterRefinerContract],\n  );\n\n  return { stakeFarm };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/InputNumber/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/ImgWebp/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Input/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/Button/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/StakeUnstakeModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/ItemsController/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/hooks.ts",["994","995"],"import { useCallback, useEffect, useState } from 'react';\nimport { Contract } from 'web3-eth-contract';\n\nimport useRefresh from '@/hooks/useRefresh';\nimport { IReceipt } from '@/types';\n\nimport { useWalletConnectorContext } from '../MetamaskConnect';\n\nimport { GAS_PRICE_GWEI } from './configHelpers';\n\ninterface ICallWithGasPrice {\n  (params: {\n    contract: Contract;\n    methodName: string;\n    methodArgs?: any[];\n    options?: {\n      from?: string;\n      gasPrice?: string;\n      gas?: number;\n    };\n  }): Promise<IReceipt>;\n}\n\nexport function useGasPrice(): string {\n  const { metamaskService } = useWalletConnectorContext();\n  return metamaskService.usedNetwork === 'mainnet'\n    ? GAS_PRICE_GWEI.default\n    : GAS_PRICE_GWEI.testnet;\n}\n\n/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param options An options object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n */\nexport function useCallWithGasPrice() {\n  const gasPrice = useGasPrice();\n  const {\n    metamaskService: { walletAddress: from },\n  } = useWalletConnectorContext();\n\n  const callWithGasPrice = useCallback<ICallWithGasPrice>(\n    async ({ contract, methodName, methodArgs = [], options }) => {\n      const contractMethod = contract.methods[methodName];\n      const overrideOptions = {\n        from: options?.from ? options.from : from,\n        gasPrice: options?.gasPrice ? options.gasPrice : gasPrice,\n        gas: options?.gas ? options.gas : 30000,\n      };\n      const tx: IReceipt = await contractMethod(...methodArgs).send(overrideOptions);\n\n      return tx;\n    },\n    [gasPrice, from],\n  );\n\n  return { callWithGasPrice };\n}\n\nexport const useBlock = () => {\n  const { metamaskService } = useWalletConnectorContext();\n  const [block, setBlock] = useState(0);\n  const { fastRefresh } = useRefresh();\n\n  useEffect(() => {\n    const getBlock = async () => {\n      const currentBlock = await metamaskService.web3Provider.eth.getBlockNumber();\n      setBlock(currentBlock);\n    };\n\n    getBlock();\n  }, [metamaskService.web3Provider.eth, fastRefresh]);\n\n  return [block];\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useStakePool.ts",["996","997","998"],"import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useStakeFarm } from '@/hooks/farms/useStakeFarm';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { BIG_TEN } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\n\nexport const useSmartRefinerStake = (smartRefinerInitContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const smartRefinerStake = useCallback(\n    async (amount: string, decimals = 18) => {\n      const value = new BigNumber(amount).times(BIG_TEN.pow(decimals)).toFixed();\n      const tx = await callWithGasPrice({\n        contract: smartRefinerInitContract,\n        methodName: 'deposit',\n        methodArgs: [value],\n        options: {\n          gas: 300000,\n        },\n      });\n      return tx.status;\n    },\n    [callWithGasPrice, smartRefinerInitContract],\n  );\n\n  return { smartRefinerStake };\n};\n\nconst useStakePool = (poolId: number) => {\n  const { metamaskService } = useWalletConnectorContext();\n  const { user, pools } = useMst();\n\n  const [foundPool] = poolsConfig.filter((pool) => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n  const { smartRefinerStake } = useSmartRefinerStake(smartRefinerInitContract);\n  // const { harvestPool } = useHarvestPoolDeposit(smartRefinerInitContract);\n\n  const masterRefinerContract = getContract('MASTER_REFINER');\n  const { stakeFarm } = useStakeFarm(masterRefinerContract);\n  // const { harvestFarm } = useHarvestFarm(masterRefinerContract, 0);\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (poolId === 0) {\n        await stakeFarm(0, amount);\n      } else {\n        await smartRefinerStake(amount, decimals);\n      }\n      pools.updateUserStakedBalance(poolId, user.address);\n      pools.updateUserBalance(poolId, user.address);\n    },\n    [poolId, pools, user.address, smartRefinerStake, stakeFarm],\n  );\n\n  return { onStake: handleStake };\n};\n\nexport default useStakePool;\n\nexport const useNonVaultStake = (poolId: number, onFinally: () => void) => {\n  const { onStake } = useStakePool(poolId);\n\n  const nonVaultStake = useCallback(\n    async (valueToStake: string, stakingTokenDecimals: number, stakingTokenSymbol = '') => {\n      try {\n        await onStake(valueToStake, stakingTokenDecimals);\n        successNotification(\n          'Staked!',\n          `Your ${stakingTokenSymbol} funds have been staked in the pool!`,\n        );\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [onStake, onFinally],\n  );\n\n  return { nonVaultStake };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useHarvestPool.ts",["999"],"import { useCallback } from 'react';\nimport { Contract } from 'web3-eth-contract';\n\n// import { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useHarvestFarm } from '@/hooks/farms/useHarvestFarm';\nimport { metamaskService } from '@/services/MetamaskConnect';\nimport { getAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\n\nconst useHarvestPoolDeposit = (smartRefinerInitContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n  const harvestPool = useCallback(async () => {\n    const tx = await callWithGasPrice({\n      contract: smartRefinerInitContract,\n      methodName: 'deposit',\n      methodArgs: ['0'],\n      options: {\n        gas: 300000,\n      },\n    });\n    return tx.status;\n  }, [callWithGasPrice, smartRefinerInitContract]);\n\n  return { harvestPool };\n};\n\nconst useHarvestPool = (poolId: number) => {\n  const { user, pools } = useMst();\n\n  const [foundPool] = poolsConfig.filter((pool) => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n  const { harvestPool } = useHarvestPoolDeposit(smartRefinerInitContract);\n  const { harvestFarm } = useHarvestFarm(0);\n\n  const handleHarvest = useCallback(async () => {\n    if (poolId === 0) {\n      await harvestFarm();\n    } else {\n      await harvestPool();\n    }\n    pools.updateUserPendingReward(poolId, user.address);\n    pools.updateUserBalance(poolId, user.address);\n  }, [harvestFarm, harvestPool, poolId, pools, user.address]);\n\n  return { onReward: handleHarvest };\n};\n\nexport default useHarvestPool;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/web3/configHelpers.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useHarvestFarm.ts",["1000"],"import { useCallback } from 'react';\n\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\n\nexport const useHarvestFarm = (pid: number) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n  const masterRefinerContract = getContract('MASTER_REFINER');\n\n  const harvestFarm = useCallback(async () => {\n    if (pid === 0) {\n      const tx = await callWithGasPrice({\n        contract: masterRefinerContract,\n        methodName: 'leaveStaking',\n        methodArgs: ['0'],\n        options: {\n          gas: 300000,\n        },\n      });\n      return tx.status;\n    }\n\n    const tx = await callWithGasPrice({\n      contract: masterRefinerContract,\n      methodName: 'deposit',\n      methodArgs: [pid, '0'],\n      options: {\n        gas: 300000,\n      },\n    });\n    return tx.status;\n  }, [callWithGasPrice, masterRefinerContract, pid]);\n\n  return { harvestFarm };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUnstakePool.ts",["1001","1002","1003"],"import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { useUnstakeFarm } from '@/hooks/farms/useUnstakeFarm';\nimport { useWalletConnectorContext } from '@/services/MetamaskConnect';\nimport { getAddress, getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { BIG_TEN } from '@/utils/constants';\n\nconst gasOptions = {\n  gas: 300000,\n};\n\nexport const useSmartRefinerUnstake = (smartRefinerInitContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const smartRefinerUnstake = useCallback(\n    async (amount: string, decimals = 18) => {\n      const value = new BigNumber(amount).times(BIG_TEN.pow(decimals)).toFixed();\n      const tx = await callWithGasPrice({\n        contract: smartRefinerInitContract,\n        methodName: 'withdraw',\n        methodArgs: [value],\n        options: gasOptions,\n      });\n      return tx.status;\n    },\n    [callWithGasPrice, smartRefinerInitContract],\n  );\n\n  return { smartRefinerUnstake };\n};\n\nconst useUnstakePool = (poolId: number) => {\n  const { metamaskService } = useWalletConnectorContext();\n  const { user, pools } = useMst();\n\n  const [foundPool] = poolsConfig.filter((pool) => pool.id === poolId);\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n  const { smartRefinerUnstake } = useSmartRefinerUnstake(smartRefinerInitContract);\n\n  const masterRefinerContract = getContract('MASTER_REFINER');\n  const { unstakeFarm } = useUnstakeFarm(masterRefinerContract);\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (poolId === 0) {\n        await unstakeFarm(0, amount);\n      } else {\n        await smartRefinerUnstake(amount, decimals);\n      }\n      pools.updateUserStakedBalance(poolId, user.address);\n      pools.updateUserBalance(poolId, user.address);\n      pools.updateUserPendingReward(poolId, user.address);\n    },\n    [poolId, pools, user.address, smartRefinerUnstake, unstakeFarm],\n  );\n\n  return { onUnstake: handleUnstake };\n};\n\nexport default useUnstakePool;\n\nexport const useNonVaultUnstake = (poolId: number, onFinally: () => void) => {\n  const { onUnstake } = useUnstakePool(poolId);\n\n  const nonVaultUnstake = useCallback(\n    async (valueToUnstake: string, stakingTokenDecimals: number, stakingTokenSymbol = '') => {\n      try {\n        await onUnstake(valueToUnstake, stakingTokenDecimals);\n        successNotification(\n          'Unstaked!',\n          `Your ${stakingTokenSymbol} earnings have also been harvested to your wallet!`,\n        );\n      } catch (e) {\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [onUnstake, onFinally],\n  );\n\n  return { nonVaultUnstake };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUnstakeVault.ts",["1004","1005"],"import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { convertRefineryToShares, IConvertRefineryToSharesResult } from '@/store/pools/helpers';\nimport { useSelectVaultData } from '@/store/pools/hooks';\nimport { clogData, clogError } from '@/utils/logger';\n\nimport { useUpdateView } from './useUpdateView';\n\nconst gasOptions = { gas: 380000 };\n\nexport const useVaultUnstakeActions = (onFinally: () => void) => {\n  const { updateViewByFetchingBlockchainData } = useUpdateView();\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const withdraw = useCallback(\n    async (\n      refineryVaultContract: Contract,\n      shareStakeToWithdraw: IConvertRefineryToSharesResult,\n    ) => {\n      clogData(\n        'Converted to Shares UNSTAKING VALUE',\n        shareStakeToWithdraw.sharesAsBigNumber.toFixed(0, BigNumber.ROUND_DOWN),\n      );\n      try {\n        const tx = await callWithGasPrice({\n          contract: refineryVaultContract,\n          methodName: 'withdraw',\n          methodArgs: [shareStakeToWithdraw.sharesAsBigNumber.toFixed(0, BigNumber.ROUND_DOWN)],\n          options: gasOptions,\n        });\n        if (tx.status) {\n          successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet');\n          updateViewByFetchingBlockchainData();\n        }\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [callWithGasPrice, updateViewByFetchingBlockchainData, onFinally],\n  );\n\n  const withdrawAll = useCallback(\n    async (refineryVaultContract: Contract) => {\n      try {\n        const tx = await callWithGasPrice({\n          contract: refineryVaultContract,\n          methodName: 'withdrawAll',\n          methodArgs: undefined,\n          options: gasOptions,\n        });\n        if (tx.status) {\n          successNotification('Unstaked!', 'Your earnings have also been harvested to your wallet');\n          updateViewByFetchingBlockchainData();\n        }\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [callWithGasPrice, updateViewByFetchingBlockchainData, onFinally],\n  );\n\n  return {\n    withdraw,\n    withdrawAll,\n  };\n};\n\nexport const useVaultUnstake = (onFinally: () => void) => {\n  const refineryVaultContract = getContract('REFINERY_VAULT');\n\n  const {\n    pricePerFullShare,\n    userData: { userShares },\n  } = useSelectVaultData();\n\n  const { withdraw, withdrawAll } = useVaultUnstakeActions(onFinally);\n\n  const vaultUnstake = useCallback(\n    async (valueToUnstakeDecimal: BigNumber) => {\n      clogData('UNSTAKING VALUE', {\n        valueToUnstakeDecimal,\n        pricePerFullShare,\n        valueToStakeDecimalToFixed: valueToUnstakeDecimal.toFixed(),\n        pricePerFullShareToFixed: pricePerFullShare?.toFixed(),\n        userShares,\n      });\n\n      if (!pricePerFullShare || !userShares) return;\n\n      const shareStakeToWithdraw = convertRefineryToShares(\n        valueToUnstakeDecimal,\n        pricePerFullShare,\n      );\n      // trigger withdrawAll function if the withdrawal will leave 0.000001 RP1 or less\n      const triggerWithdrawAllThreshold = convertRefineryToShares(\n        new BigNumber(1000000000000),\n        pricePerFullShare,\n      ).sharesAsBigNumber;\n      const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);\n\n      clogData(\n        'TEST WITHDRAW ALL',\n        userShares.toFixed(),\n        shareStakeToWithdraw.sharesAsBigNumber.toFixed(),\n        sharesRemaining.toFixed(),\n        triggerWithdrawAllThreshold.toFixed(),\n      );\n      const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold);\n\n      if (isWithdrawingAll) {\n        await withdrawAll(refineryVaultContract);\n      } else {\n        await withdraw(refineryVaultContract, shareStakeToWithdraw);\n      }\n    },\n    [refineryVaultContract, pricePerFullShare, userShares, withdraw, withdrawAll],\n  );\n\n  return { vaultUnstake };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useStakeVault.ts",["1006"],"import { useCallback } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { getContract } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { clog, clogError } from '@/utils/logger';\n\nimport { useUpdateView } from './useUpdateView';\n\nconst gasOptions = { gas: 380000 };\n\nexport const useVaultStake = (onFinally: () => void) => {\n  const { updateViewByFetchingBlockchainData } = useUpdateView();\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const refineryVaultContract = getContract('REFINERY_VAULT');\n\n  const vaultStake = useCallback(\n    async (valueToStakeDecimal: BigNumber) => {\n      clog('STAKING AUTO ', valueToStakeDecimal.toFixed());\n      try {\n        const tx = await callWithGasPrice({\n          contract: refineryVaultContract,\n          methodName: 'deposit',\n          methodArgs: [valueToStakeDecimal.toFixed()],\n          options: gasOptions,\n        });\n        if (tx.status) {\n          successNotification('Staked!', 'Your funds have been staked in the pool');\n          updateViewByFetchingBlockchainData();\n        }\n      } catch (error) {\n        clogError(error);\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      } finally {\n        onFinally();\n      }\n    },\n    [refineryVaultContract, callWithGasPrice, updateViewByFetchingBlockchainData, onFinally],\n  );\n\n  return { vaultStake };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/utils.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useFarmsPrices.ts",["1007"],"import BigNumber from 'bignumber.js/bignumber';\n\nimport { useMst } from '@/store';\nimport { Farm } from '@/types';\nimport { BIG_ZERO } from '@/utils/constants';\nimport { getBalanceAmount } from '@/utils/formatters';\nimport { clog } from '@/utils/logger';\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\n  const { farms } = useMst();\n  const [farm] = farms.data.filter((f) => f.lpSymbol === lpSymbol);\n  return farm as Farm;\n};\n\nexport const useFarmFromPid = (pid: number): Farm => {\n  const { farms } = useMst();\n  const [farm] = farms.data.filter((f) => f.pid === pid);\n  return farm as Farm;\n};\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid);\n  if (farm.token?.busdPrice) {\n    return new BigNumber(farm.token.busdPrice);\n  }\n  return BIG_ZERO;\n};\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal || BIG_ZERO);\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2);\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n\n    clog('TEST1', farmTokenPriceInUsd, farm.tokenAmountTotal, overallValueOfAllTokensInFarm);\n  }\n\n  return lpTokenPrice;\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/hooks.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/helpers.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useIntersectionObserver.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/store/pools/hooks.ts",["1008"],"import { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\n\nimport useRefresh from '@/hooks/useRefresh';\nimport { IPoolFarmingMode, Pool, PoolFarmingMode } from '@/types';\nimport { toBigNumber } from '@/utils';\n\nimport { useMst } from '..';\n\nimport { getStakedValue, transformPool } from './helpers';\n\nexport const usePools = (): { pools: Pool[] } => {\n  const { fastRefresh } = useRefresh();\n  const { pools: poolStore, user } = useMst();\n\n  useEffect(() => {\n    if (user.address) {\n      poolStore.fetchPoolsUserDataAsync(user.address);\n    }\n  }, [user.address, poolStore, fastRefresh]);\n\n  return { pools: poolStore.data.slice().map(transformPool as any) };\n};\n\nexport const useSelectVaultData = () => {\n  const {\n    pools: {\n      estimatedRefineryBountyReward: estimatedRefineryBountyRewardRaw,\n      totalRefineryInVault: totalRefineryInVaultRaw,\n      pricePerFullShare: pricePerFullShareRaw,\n      totalShares: totalSharesRaw,\n      availableRefineryAmountToCompound: availableRefineryAmountToCompoundRaw,\n      fuelTokensAmount: fuelTokensAmountRaw,\n      fees,\n      userData: {\n        isLoading,\n        userShares: userSharesAsString,\n        refineryAtLastUserAction: refineryAtLastUserActionAsString,\n        lastDepositedTime,\n        lastUserActionTime,\n      },\n    },\n  } = useMst();\n\n  const estimatedRefineryBountyReward = useMemo(\n    () => toBigNumber(estimatedRefineryBountyRewardRaw, true),\n    [estimatedRefineryBountyRewardRaw],\n  );\n\n  const totalRefineryInVault = useMemo(() => toBigNumber(totalRefineryInVaultRaw, true), [\n    totalRefineryInVaultRaw,\n  ]);\n\n  const pricePerFullShare = useMemo(() => toBigNumber(pricePerFullShareRaw, true), [\n    pricePerFullShareRaw,\n  ]);\n\n  const totalShares = useMemo(() => toBigNumber(totalSharesRaw, true), [totalSharesRaw]);\n\n  const availableRefineryAmountToCompound = useMemo(\n    () => toBigNumber(availableRefineryAmountToCompoundRaw),\n    [availableRefineryAmountToCompoundRaw],\n  );\n\n  const fuelTokensAmount = useMemo(() => toBigNumber(fuelTokensAmountRaw), [fuelTokensAmountRaw]);\n\n  const userShares = useMemo(() => toBigNumber(userSharesAsString, true), [userSharesAsString]);\n\n  const refineryAtLastUserAction = useMemo(\n    () => toBigNumber(refineryAtLastUserActionAsString, true),\n    [refineryAtLastUserActionAsString],\n  );\n\n  return {\n    estimatedRefineryBountyReward,\n    totalRefineryInVault,\n    pricePerFullShare,\n    totalShares,\n    availableRefineryAmountToCompound,\n    fuelTokensAmount,\n    fees,\n    userData: {\n      isLoading,\n      userShares,\n      refineryAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  };\n};\n\nexport const useStakedValue = (\n  farmMode: IPoolFarmingMode,\n  pool: Pool,\n): {\n  hasStakedValue: boolean;\n  stakedValue: BigNumber;\n} => {\n  const {\n    pricePerFullShare,\n    userData: { userShares },\n  } = useSelectVaultData();\n\n  const { userData } = pool;\n\n  const hasStakedValue = useMemo(() => {\n    if (farmMode === PoolFarmingMode.auto) {\n      return userShares ? userShares.gt(0) : false;\n    }\n    const stakedBalance = toBigNumber(userData?.stakedBalance);\n    return stakedBalance.gt(0);\n  }, [farmMode, userData?.stakedBalance, userShares]);\n\n  const stakedValue = useMemo(() => getStakedValue(farmMode, pool, userShares, pricePerFullShare), [\n    farmMode,\n    pool,\n    pricePerFullShare,\n    userShares,\n  ]);\n\n  return {\n    hasStakedValue,\n    stakedValue,\n  };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/utils.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useUpdateView.ts",["1009"],"import { useCallback } from 'react';\n\nimport { useMst } from '@/store';\n\nexport const useUpdateView = () => {\n  const { pools: poolsStore, user } = useMst();\n  const updateViewByFetchingBlockchainData = useCallback(() => {\n    poolsStore.fetchVaultPublicData();\n    poolsStore.fetchVaultUserData(user.address);\n    poolsStore.fetchPoolsPublicDataAsync();\n  }, [poolsStore, user.address]);\n  return { updateViewByFetchingBlockchainData };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsLinks/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsEarnedSection/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Popovers/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsActionsSection/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/Popovers/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposalsPreview.ts",["1010"],"import { useCallback } from 'react';\nimport { gql, LazyQueryHookOptions, QueryTuple, useLazyQuery } from '@apollo/client';\n\nimport { SNAPSHOT_SPACE } from '@/config/constants/dao';\nimport { getSnapshotContext } from '@/services/apolloClient';\nimport { TimestampSeconds } from '@/types';\n\nimport { ProposalStatus } from './types';\n\nexport interface IProposalPreviewRaw {\n  id: string;\n  title: string;\n  state: ProposalStatus;\n  created: TimestampSeconds;\n}\nexport interface IGetProposalsPreviewkResponse {\n  proposals: IProposalPreviewRaw[];\n}\nexport interface IGetProposalsPreviewVariables {\n  first: number;\n  skip: number;\n  space: string;\n}\n\nexport interface IProposalPreview extends Omit<IProposalPreviewRaw, 'state'> {\n  status: ProposalStatus;\n}\nexport type IProposalsPreview = IProposalPreview[];\n\nexport const GET_PROPOSALS_PREVIEW = gql`\n  query GetProposalsPreview($first: Int!, $skip: Int!, $space: String!) {\n    proposals(\n      first: $first\n      skip: $skip\n      orderBy: \"end\"\n      orderDirection: desc\n      where: {\n        space_in: [$space]\n        # state: \"closed\"\n      }\n    ) {\n      id\n      title\n      # body\n      # choices\n      # start\n      # end\n      # snapshot\n      state\n      # author\n      # space {\n      #   id\n      #   name\n      # }\n      created\n    }\n  }\n`;\n\n/**\n * Get list of the proposals' previews.\n */\nexport const useGetProposalsPreview = (\n  options?: LazyQueryHookOptions<IGetProposalsPreviewkResponse, IGetProposalsPreviewVariables>,\n): {\n  getProposalsPreview: (first?: number, skip?: number, space?: string) => void;\n  options: QueryTuple<IGetProposalsPreviewkResponse, IGetProposalsPreviewVariables>;\n} => {\n  const [func, responseData] = useLazyQuery<\n    IGetProposalsPreviewkResponse,\n    IGetProposalsPreviewVariables\n  >(GET_PROPOSALS_PREVIEW, options);\n\n  const getProposalsPreview = useCallback(\n    (first = 20, skip = 0, space = SNAPSHOT_SPACE) => {\n      func({\n        ...getSnapshotContext(),\n        variables: {\n          first,\n          skip,\n          space,\n        },\n      });\n    },\n    [func],\n  );\n\n  return { getProposalsPreview, options: [func, responseData] };\n};\n\nexport const transformGetProposalsPreview = (\n  data: IGetProposalsPreviewkResponse,\n): IProposalsPreview => {\n  return data.proposals.map((proposal) => {\n    const { state, ...newData } = proposal;\n    return {\n      ...newData,\n      status: state,\n    };\n  });\n};\n\nexport const groupProposalsPreviewByStatus = (items: IProposalsPreview) => {\n  const map: Record<string, IProposalsPreview> = {};\n  items.forEach((it) => {\n    const { status } = it;\n    if (map[status]) {\n      map[status].push(it);\n    } else {\n      map[status] = [it];\n    }\n  });\n  return { map, keys: Object.keys(map) };\n};\n\nexport const sortByCreated = (\n  { created: created1 }: { created: TimestampSeconds },\n  { created: created2 }: { created: TimestampSeconds },\n): number => {\n  return created2 - created1;\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposal.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/services/api/snapshot.org/useGetProposalVotes.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Collectibles/index.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/index.tsx",["1011"],"export { default as PoolsPreview } from './Preview';\nexport { default as PoolCard } from './PoolCard';\nexport { default as PoolTable } from './Table';\nexport { default as PoolTableRow } from './TableRow';\nexport { default as PoolOpenLink } from './OpenLink';\nexport { default as PoolFarmingModeStatus } from './FarmingModeStatus';\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/organisms/EasyMde/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/ReactMarkdown/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoWrapperContent/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoList/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/index.tsx",["1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022"],"export { default as TradeNavbar } from './Navbar';\nexport { default as Exchange } from './Exchange';\nexport { default as ExchangeSettings } from './ExchangeSettings';\nexport { default as Swap } from './Swap';\nexport { default as SelectTokenModal } from './SelectTokenModal';\nexport { default as RecentTxs } from './RecentTxs';\nexport { default as TradeBox } from './TradeBox';\nexport { default as YourLiquidity } from './YourLiquidity';\nexport { default as Liquidity } from './Liquidity';\nexport { default as ImportPool } from './ImportPool';\nexport { default as ChooseTokens } from './ChooseTokens';\nexport { default as ManageTokensModal } from './ManageTokensModal';\nexport { default as ImportTokensModal } from './ImportTokensModal';\nexport { default as AddLiquidity } from './AddLiquidity';\nexport { default as RemoveLiquidity } from './RemoveLiquidity';\nexport { default as Receive } from './Receive';\nexport { default as LiquidityInfoModal } from './LiquidityInfoModal';\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Teams/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useScannerUrl.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/utils/urlConstructors.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/farms/useApprove.ts",["1023"],"import { useCallback } from 'react';\nimport { Contract } from 'web3-eth-contract';\n\nimport { getContractAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { MAX_UINT_256 } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\n\nconst masterRefinerContractAddress = getContractAddress('MASTER_REFINER');\nconst gasOptions = { gas: 300000 };\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const { callWithGasPrice } = useCallWithGasPrice();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice({\n        contract: lpContract,\n        methodName: 'approve',\n        methodArgs: [masterRefinerContractAddress, MAX_UINT_256],\n        options: gasOptions,\n      });\n\n      return tx.status;\n    } catch (error) {\n      clogError('Approve error', error);\n      return false;\n    }\n  }, [lpContract, callWithGasPrice]);\n\n  return { onApprove: handleApprove };\n};\n\nexport default useApproveFarm;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/HOC/BasePopover.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useProposalVotes.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsBadge/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/OpenLink/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/TableRow/DetailsSectionTitle/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Farms/FarmsStakeUnstakeButtons/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Collectibles/Preview/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Collectibles/Card/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/TitleForm/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ChoicesForm/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoProposal/ActionsForm/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/FarmingModeStatus/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/OpenLink/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Table/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Information/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Preview/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/Preview/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Wrapper/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/Section/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/molecules/ReactMarkdown/MarkdownComponents/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalInformation/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalVotes/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalCastVote/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Dao/DaoProposalVotesResult/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/DaoList/List/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/Preview/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/NotFound/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/WinningTicketsModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/Round/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Navbar/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Exchange/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/TradeBox/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Lottery/BuyTicketsModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Swap/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ManageTokensModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ImportPool/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/YourLiquidity/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ImportTokensModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Liquidity/index.tsx",["1024"],"import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { observer } from 'mobx-react-lite';\nimport moment from 'moment';\n\nimport TradeWrapper from '../../../../HOC/TradeWrapper';\nimport { useMst } from '../../../../store';\nimport { IRecentTx, ISettings } from '../../../../types';\nimport AddLiquidity from '../AddLiquidity';\nimport {\n  ExchangeSettings,\n  ImportPool,\n  Receive,\n  RecentTxs,\n  RemoveLiquidity,\n  YourLiquidity,\n} from '..';\n\nconst GET_USER_TRX = gql`\n  query User($address: String!) {\n    liquidityPositionSnapshots(\n      where: { user: $address, mintOrBurn: true }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      transaction {\n        mints {\n          amount0\n          amount1\n          transaction {\n            id\n          }\n        }\n        burns {\n          amount0\n          amount1\n          transaction {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst AddLiquidityComp = TradeWrapper(AddLiquidity, 'quote');\n\nconst Liquidity: React.FC = observer(() => {\n  const { user } = useMst();\n\n  const [getUserTrx, { error, data: userTrx }] = useLazyQuery(GET_USER_TRX, {\n    pollInterval: 60000,\n  });\n\n  const [trx, setTrx] = React.useState<IRecentTx[] | undefined>(undefined);\n\n  const [settings, setSettings] = React.useState<ISettings>({\n    slippage: {\n      type: 'btn',\n      value: 0.1,\n    },\n    txDeadline: 20,\n    txDeadlineUtc: moment.utc().add(20, 'm').unix(),\n  });\n  console.log(settings.txDeadlineUtc, 'deadline');\n\n  const handleSaveSettings = (settingsObj: ISettings): void => {\n    setSettings(settingsObj);\n  };\n\n  React.useEffect(() => {\n    if (user.address) {\n      getUserTrx({\n        variables: {\n          address: user.address,\n        },\n      });\n    }\n  }, [user.address, getUserTrx]);\n\n  // React.useEffect(() => {\n  //   return () => {\n  //     console.log('clean');\n  //   };\n  // }, []);\n\n  React.useEffect(() => {\n    if (!error && userTrx && userTrx.liquidityPositionSnapshots) {\n      const trxData: IRecentTx[] = [];\n\n      userTrx.liquidityPositionSnapshots.forEach((pairObj: any) => {\n        const dataItem: IRecentTx = {\n          type: '',\n          address: '',\n          from: {\n            symbol: '',\n            value: 0,\n          },\n          to: {\n            symbol: '',\n            value: 0,\n          },\n        };\n\n        dataItem.from.symbol = pairObj.pair.token0.symbol;\n        dataItem.to.symbol = pairObj.pair.token1.symbol;\n\n        if (pairObj.transaction.burns.length) {\n          pairObj.transaction.burns.forEach((burnTrx: any) => {\n            dataItem.type = 'Burn';\n            dataItem.from.value = burnTrx.amount0;\n            dataItem.to.value = burnTrx.amount1;\n            dataItem.address = burnTrx.transaction.id;\n\n            trxData.push(dataItem);\n          });\n        }\n\n        if (pairObj.transaction.mints.length) {\n          pairObj.transaction.mints.forEach((mintTx: any) => {\n            dataItem.type = 'Add Liquidity';\n            dataItem.from.value = mintTx.amount0;\n            dataItem.to.value = mintTx.amount1;\n            dataItem.address = mintTx.transaction.id;\n\n            trxData.push(dataItem);\n          });\n        }\n      });\n\n      setTrx(trxData);\n    }\n  }, [userTrx, error]);\n\n  return (\n    <Switch>\n      <Route exact path=\"/trade/liquidity\" component={YourLiquidity} />\n      <Route exact path=\"/trade/liquidity/find\" component={ImportPool} />\n      <Route\n        exact\n        path=\"/trade/liquidity/add\"\n        render={() => <AddLiquidityComp settings={settings} />}\n      />\n      <Route\n        exact\n        path=\"/trade/liquidity/add/:currencyIdA/:currencyIdB\"\n        render={() => <AddLiquidityComp settings={settings} />}\n      />\n      <Route exact path=\"/trade/liquidity/remove\" component={RemoveLiquidity} />\n      <Route exact path=\"/trade/liquidity/receive\" component={Receive} />\n      <Route\n        exact\n        path=\"/trade/liquidity/settings\"\n        render={() => (\n          <ExchangeSettings\n            savedSettings={settings}\n            handleSave={handleSaveSettings}\n            isSlippage={false}\n          />\n        )}\n      />\n      <Route exact path=\"/trade/liquidity/history\" render={() => <RecentTxs items={trx} />} />\n    </Switch>\n  );\n});\n\nexport default Liquidity;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ExchangeSettings/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/SelectTokenModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/RemoveLiquidity/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/AddLiquidity/index.tsx",["1025"],"import React from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\n\nimport { clog, clogError } from '@/utils/logger';\nimport { tokens } from '@/config';\n\nimport { useWalletConnectorContext } from '../../../../services/MetamaskConnect';\nimport MetamaskService from '../../../../services/web3';\nimport { useMst } from '../../../../store';\nimport { ISettings, ITokens } from '../../../../types';\nimport { Button, Popover } from '../../../atoms';\nimport { ChooseTokens, TradeBox } from '..';\n\nimport './AddLiquidity.scss';\n\ninterface IAddLiquidity {\n  tokensData: ITokens;\n  setTokensData: (value: ITokens) => void;\n  isLoadingExchange: boolean;\n  setAllowanceFrom: (value: boolean) => void;\n  setAllowanceTo: (value: boolean) => void;\n  isAllowanceFrom: boolean;\n  isAllowanceTo: boolean;\n  handleApproveTokens: () => void;\n  settings: ISettings;\n  tokensResurves: any;\n  isApproving: boolean;\n}\n\ninterface IPrices {\n  first?: number;\n  second?: number;\n  share?: number;\n}\n\nconst AddLiquidity: React.FC<IAddLiquidity> = observer(\n  ({\n    tokensData,\n    setTokensData,\n    setAllowanceFrom,\n    setAllowanceTo,\n    isAllowanceFrom,\n    handleApproveTokens,\n    isAllowanceTo,\n    settings,\n    tokensResurves,\n    isLoadingExchange,\n    isApproving,\n  }) => {\n    const { metamaskService, connect } = useWalletConnectorContext();\n    const { user } = useMst();\n\n    const [exchange, setExchange] = React.useState<IPrices | undefined | null>(undefined);\n    const [isLoading, setLoading] = React.useState<boolean>(false);\n\n    const handleCreatePair = async () => {\n      clog(settings, 'txDeadlineUtc');\n      try {\n        if (tokensData.from.token && tokensData.to.token) {\n          setLoading(true);\n          let data: any[] = [\n            tokensData.from.token?.address,\n            tokensData.to.token?.address,\n            MetamaskService.calcTransactionAmount(\n              tokensData.from.amount,\n              +tokensData.from.token.decimals,\n            ),\n            MetamaskService.calcTransactionAmount(\n              tokensData.to.amount,\n              +tokensData.to.token.decimals,\n            ),\n            MetamaskService.calcTransactionAmount(\n              tokensData.from.amount,\n              +tokensData.from.token.decimals,\n            ),\n            MetamaskService.calcTransactionAmount(\n              tokensData.to.amount,\n              +tokensData.to.token.decimals,\n            ),\n            user.address,\n            settings.txDeadlineUtc,\n          ];\n          let method = 'addLiquidity';\n          let value = '';\n\n          const isFromBnb = tokensData.from.token.symbol.toLowerCase() === 'bnb';\n          const isToBnb = tokensData.to.token.symbol.toLowerCase() === 'bnb';\n\n          if (isFromBnb || isToBnb) {\n            const bnbToken = isFromBnb ? tokensData.from : tokensData.to;\n            const bepToken = !isFromBnb ? tokensData.from : tokensData.to;\n            method = 'addLiquidityETH';\n\n            if (bepToken.token && bnbToken.token) {\n              data = [\n                bepToken.token?.address,\n                MetamaskService.calcTransactionAmount(bepToken.amount, +bepToken.token.decimals),\n                MetamaskService.calcTransactionAmount(bepToken.amount, +bepToken.token.decimals),\n                MetamaskService.calcTransactionAmount(bnbToken.amount, +bnbToken.token.decimals),\n                user.address,\n                settings.txDeadlineUtc,\n              ];\n              value = MetamaskService.calcTransactionAmount(\n                bnbToken.amount,\n                +bnbToken.token.decimals,\n              );\n            }\n          }\n\n          debugger;\n\n          await metamaskService.createTransaction({\n            contractName: 'ROUTER',\n            method,\n            data,\n            value,\n          });\n          setLoading(false);\n          delete localStorage['refinery-finance-quote'];\n          setTokensData({\n            from: {\n              token: undefined,\n              amount: NaN,\n            },\n            to: {\n              token: undefined,\n              amount: NaN,\n            },\n          });\n        }\n      } catch (err) {\n        setLoading(false);\n        clogError(err);\n      }\n    };\n\n    React.useEffect(() => {\n      if (\n        tokensData.from.amount &&\n        tokensData.to.amount &&\n        tokensResurves &&\n        tokensData.from.token &&\n        tokensData.to.token\n      ) {\n        try {\n          const token1 = new BigNumber(\n            MetamaskService.calcTransactionAmount(\n              tokensData.from.amount,\n              +tokensData.from.token.decimals,\n            ),\n          ).toString(10);\n          const token2 = new BigNumber(\n            MetamaskService.calcTransactionAmount(\n              tokensData.to.amount,\n              +tokensData.to.token.decimals,\n            ),\n          ).toString(10);\n          const share1 = new BigNumber(token1)\n            .dividedBy(new BigNumber(tokensResurves['0']).plus(tokensResurves['1']).plus(token1))\n            .toString(10);\n          const share2 = new BigNumber(token2)\n            .dividedBy(new BigNumber(tokensResurves['0']).plus(tokensResurves['1']).plus(token2))\n            .toString(10);\n          const min = BigNumber.min(share1, share2).toString(10);\n\n          setExchange((ex) => ({\n            ...ex,\n            share: +min,\n          }));\n          const isFromBnb = tokensData.from.token.symbol.toLowerCase() === 'bnb';\n          const isToBnb = tokensData.to.token.symbol.toLowerCase() === 'bnb';\n\n          metamaskService\n            .callContractMethod('ROUTER', 'getAmountsOut', [\n              MetamaskService.calcTransactionAmount(\n                tokensData.from.amount,\n                +tokensData.from.token.decimals,\n              ),\n              [\n                isToBnb ? tokens.wbnb.address[97] : tokensData.to.token.address,\n                isFromBnb ? tokens.wbnb.address[97] : tokensData.from.token.address,\n              ],\n            ])\n            .then((res) => {\n              if (tokensData.from.token) {\n                const amount = +MetamaskService.amountFromGwei(\n                  res[1],\n                  +tokensData.from.token?.decimals,\n                );\n                setExchange((data) => ({\n                  ...data,\n                  first: amount,\n                }));\n              }\n            });\n          metamaskService\n            .callContractMethod('ROUTER', 'getAmountsOut', [\n              MetamaskService.calcTransactionAmount(\n                tokensData.to.amount,\n                +tokensData.to.token.decimals,\n              ),\n              [\n                isFromBnb ? tokens.wbnb.address[97] : tokensData.from.token.address,\n                isToBnb ? tokens.wbnb.address[97] : tokensData.to.token.address,\n              ],\n            ])\n            .then((res) => {\n              if (tokensData.to.token) {\n                const amount = +MetamaskService.amountFromGwei(\n                  res[1],\n                  +tokensData.to.token?.decimals,\n                );\n                setExchange((data) => ({\n                  ...data,\n                  second: amount,\n                }));\n              }\n            });\n        } catch (err) {\n          clogError(err);\n        }\n      } else {\n        setExchange(undefined);\n      }\n    }, [\n      tokensData.from.token,\n      tokensData.to.token,\n      tokensData.from.amount,\n      tokensData.to.amount,\n      tokensResurves,\n      metamaskService,\n    ]);\n\n    return (\n      <TradeBox\n        className=\"add-liquidity\"\n        title=\"Add Liquidity\"\n        subtitle=\"Add liquidity to receive LP tokens\"\n        settingsLink=\"/trade/liquidity/settings\"\n        recentTxLink=\"/trade/liquidity/history\"\n        info=\"Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.\"\n        titleBackLink\n      >\n        {exchange === null || tokensResurves === null ? (\n          <div className=\"add-liquidity__first text-smd\">\n            <p className=\"text-bold\">You are the first liquidity provider.</p>\n            <p>The ratio of tokens you add will set the price of this pool.</p>\n          </div>\n        ) : (\n          ''\n        )}\n        <ChooseTokens\n          handleChangeTokens={setTokensData}\n          initialTokenData={tokensData}\n          textFrom=\"Input\"\n          textTo=\"Input\"\n          changeTokenFromAllowance={(value: boolean) => setAllowanceFrom(value)}\n          changeTokenToAllowance={(value: boolean) => setAllowanceTo(value)}\n        />\n        {tokensData.from.token &&\n        tokensData.to.token &&\n        exchange &&\n        (exchange.first || exchange.first === 0) &&\n        (exchange.second || exchange.second === 0) &&\n        (exchange.share || exchange.share === 0) ? (\n          <div className=\"add-liquidity__info\">\n            <div className=\"add-liquidity__info-title text-smd text-yellow\">\n              Prices and pool share\n            </div>\n            <div className=\"add-liquidity__info-content text-med\">\n              <div className=\"add-liquidity__info-item\">\n                <Popover content={<span>{new BigNumber(exchange.first).toString(10)}</span>}>\n                  <div className=\"text text-center text-yellow add-liquidity__info-item-title\">\n                    {new BigNumber(exchange.first).toFixed(4).toString()}\n                  </div>\n                </Popover>\n                <div className=\"text-sm text-center text-gray text-center text-yellow\">\n                  {tokensData.from.token.symbol}\n                  <br /> per {tokensData.to.token.symbol}\n                </div>\n              </div>\n              <div className=\"add-liquidity__info-item\">\n                <Popover content={<span>{new BigNumber(exchange.second).toString(10)}</span>}>\n                  <div className=\"text text-center text-yellow add-liquidity__info-item-title\">\n                    {new BigNumber(exchange.second).toFixed(4).toString()}\n                  </div>\n                </Popover>\n                <div className=\"text-sm text-center text-gray text-center text-yellow\">\n                  {tokensData.to.token.symbol}\n                  <br /> per {tokensData.from.token.symbol}\n                </div>\n              </div>\n              <div className=\"add-liquidity__info-item\">\n                <Popover content={<span>{new BigNumber(exchange.share).toString(10)}</span>}>\n                  <div className=\"text text-center text-yellow add-liquidity__info-item-title\">\n                    {exchange.share < 0.01\n                      ? '<0.01'\n                      : new BigNumber(exchange.share).toFixed(4).toString()}\n                    %\n                  </div>\n                </Popover>\n                <div className=\"text-sm text-center text-gray text-center text-yellow\">\n                  Share\n                  <br /> of Pool\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          ''\n        )}\n        {!user.address ? (\n          <Button className=\"exchange__btn\" onClick={connect}>\n            <span className=\"text-bold text-md text-white\">Connect</span>\n          </Button>\n        ) : (\n          ''\n        )}\n        {user.address &&\n        isAllowanceFrom &&\n        isAllowanceTo &&\n        tokensData.from.token &&\n        tokensData.to.token &&\n        tokensData.to.amount &&\n        tokensData.from.amount ? (\n          <Button\n            className=\"add-liquidity__btn\"\n            disabled={!tokensData.from.amount || !tokensData.to.amount}\n            onClick={handleCreatePair}\n            loading={isLoading || isLoadingExchange}\n            loadingText={isLoadingExchange ? 'Geting exchange' : ''}\n          >\n            <span className=\"text-white text-bold text-smd\">Add</span>\n          </Button>\n        ) : (\n          ''\n        )}\n        {user.address &&\n        tokensData.from.token &&\n        tokensData.to.token &&\n        (!tokensData.to.amount || !tokensData.from.amount) ? (\n          <Button\n            className=\"add-liquidity__btn\"\n            disabled={!tokensData.from.amount || !tokensData.to.amount}\n            loading={isLoadingExchange}\n            loadingText=\"Geting exchange\"\n          >\n            <span className=\"text-white text-bold text-smd\">Enter an amount</span>\n          </Button>\n        ) : (\n          ''\n        )}\n        {user.address &&\n        (!isAllowanceFrom || !isAllowanceTo) &&\n        tokensData.from.token &&\n        tokensData.to.token &&\n        tokensData.to.amount &&\n        tokensData.from.amount ? (\n          <Button\n            className=\"add-liquidity__btn\"\n            onClick={handleApproveTokens}\n            loading={isApproving}\n          >\n            <span className=\"text-white text-bold text-smd\">Approve tokens</span>\n          </Button>\n        ) : (\n          ''\n        )}\n        {user.address && (!tokensData.from.token || !tokensData.to.token) ? (\n          <Button disabled className=\"add-liquidity__btn\">\n            <span className=\"text-white text-bold text-smd\">Select a Tokens</span>\n          </Button>\n        ) : (\n          ''\n        )}\n      </TradeBox>\n    );\n  },\n);\n\nexport default AddLiquidity;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/RecentTxs/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/ChooseTokens/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/Receive/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Trade/LiquidityInfoModal/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Teams/Preview/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Teams/TeamCard/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useScrollToTop.ts",["1026"],"import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport const useScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/HOC/TradeWrapper.tsx",["1027","1028","1029"],"import React from 'react';\n\nimport { contracts, tokens as configTokens } from '@/config';\nimport { walletConnectorContext } from '@/services/MetamaskConnect';\nimport MetamaskService from '@/services/web3';\nimport { IToken, ITokens } from '@/types';\nimport { clogError } from '@/utils/logger';\n\ninterface ITradeWrapper {\n  isAllowanceFrom: boolean;\n  isAllowanceTo: boolean;\n  tokensData: {\n    from: {\n      token: IToken | undefined;\n      amount: number | string;\n    };\n    to: {\n      token: IToken | undefined;\n      amount: number | string;\n    };\n  };\n  tokensResurves: any;\n  resurvesInterval: any;\n  pairAddress: string;\n  maxFrom: number | string;\n  maxTo: number | string;\n  isLoadingExchange: boolean;\n  isApproving: boolean;\n}\n\nconst TradeWrapper = (\n  Component: React.FC<any>,\n  getExchangeMethod: 'quote' | 'getAmountOut',\n  compProps?: any,\n) => {\n  return class TradeWrapperComponent extends React.Component<any, ITradeWrapper, any> {\n    // eslint-disable-next-line react/static-property-placement\n    static contextType = walletConnectorContext;\n\n    // eslint-disable-next-line react/static-property-placement\n    context!: React.ContextType<typeof walletConnectorContext>;\n\n    constructor(props: any) {\n      super(props);\n\n      this.state = {\n        tokensData: (localStorage[`refinery-finance-${getExchangeMethod}`] &&\n          JSON.parse(localStorage[`refinery-finance-${getExchangeMethod}`])) || {\n          from: {\n            token: undefined,\n            amount: NaN,\n          },\n          to: {\n            token: undefined,\n            amount: NaN,\n          },\n        },\n        isAllowanceFrom: true,\n        isAllowanceTo: true,\n        tokensResurves: undefined,\n        resurvesInterval: null,\n        pairAddress: '',\n        maxFrom: '',\n        maxTo: '',\n        isLoadingExchange: false,\n        isApproving: false,\n      };\n\n      this.handleChangeTokensData = this.handleChangeTokensData.bind(this);\n      this.handleApproveTokens = this.handleApproveTokens.bind(this);\n      this.handleChangeAllowanceFrom = this.handleChangeAllowanceFrom.bind(this);\n      this.handleChangeAllowanceTo = this.handleChangeAllowanceTo.bind(this);\n      this.handleGetExchange = this.handleGetExchange.bind(this);\n    }\n\n    componentDidMount() {\n      this.handleGetExchange(this.state.tokensData, 'from');\n      if (getExchangeMethod !== 'quote') {\n        const interval = setInterval(async () => {\n          if (\n            this.state.pairAddress &&\n            this.state.tokensData.from.token &&\n            this.state.tokensData.to.token &&\n            this.state.tokensData.to.amount &&\n            this.state.tokensData.from.amount\n          ) {\n            this.handleGetExchange(this.state.tokensData, 'from');\n          }\n        }, 60000);\n\n        this.setState({\n          resurvesInterval: interval,\n        });\n      }\n    }\n\n    componentDidUpdate() {\n      localStorage[`refinery-finance-${getExchangeMethod}`] = JSON.stringify(this.state.tokensData);\n    }\n\n    componentWillUnmount() {\n      if (this.state.resurvesInterval) {\n        clearInterval(this.state.resurvesInterval);\n      }\n    }\n\n    async handleApproveTokens() {\n      try {\n        if (\n          !this.state.isAllowanceFrom &&\n          this.state.tokensData.from.token &&\n          this.state.tokensData.from.token.symbol.toLowerCase() !== 'bnb'\n        ) {\n          this.setState({\n            isApproving: true,\n          });\n          await this.context.metamaskService.approveToken({\n            contractName: 'ERC20',\n            approvedAddress: contracts.ROUTER.ADDRESS,\n            tokenAddress: this.state.tokensData.from.token.address,\n          });\n          this.setState({\n            isAllowanceFrom: true,\n          });\n        }\n        if (\n          !this.state.isAllowanceTo &&\n          this.state.tokensData.to.token &&\n          this.state.tokensData.to.token.symbol.toLowerCase() !== 'bnb'\n        ) {\n          await this.context.metamaskService.approveToken({\n            contractName: 'ERC20',\n            approvedAddress: contracts.ROUTER.ADDRESS,\n            tokenAddress: this.state.tokensData.to.token.address,\n          });\n          this.setState({\n            isAllowanceTo: true,\n          });\n        }\n        this.setState({\n          isApproving: false,\n        });\n      } catch (err) {\n        this.setState({\n          isAllowanceFrom: false,\n          isAllowanceTo: false,\n          isApproving: false,\n        });\n        clogError('err approve tokens', err);\n      }\n    }\n\n    async handleGetExchange(tokens: ITokens, type?: 'from' | 'to') {\n      if (!tokens.from.token || !tokens.to.token) {\n        return;\n      }\n      try {\n        this.setState({\n          isLoadingExchange: true,\n        });\n        const isFromBnb = tokens.from.token.symbol.toLowerCase() === 'bnb';\n        const isToBnb = tokens.to.token.symbol.toLowerCase() === 'bnb';\n\n        const pairAddr = await this.context.metamaskService.callContractMethod(\n          'FACTORY',\n          'getPair',\n          [\n            isFromBnb ? configTokens.wbnb.address[97] : tokens.from.token?.address,\n            isToBnb ? configTokens.wbnb.address[97] : tokens.to.token?.address,\n          ],\n          contracts.FACTORY.ADDRESS,\n          contracts.FACTORY.ABI,\n        );\n\n        if (pairAddr === '0x0000000000000000000000000000000000000000') {\n          if (type === 'from') {\n            this.setState((prev) => ({\n              tokensResurves: null,\n              pairAddress: '',\n              isLoadingExchange: false,\n              tokensData: {\n                to: tokens.to,\n                from: {\n                  token: tokens.from.token,\n                  amount:\n                    prev.tokensData.from.token?.symbol !== tokens.from.token?.symbol\n                      ? NaN\n                      : tokens.from.amount,\n                },\n              },\n            }));\n          } else {\n            this.setState((prev) => ({\n              tokensResurves: null,\n              pairAddress: '',\n              isLoadingExchange: false,\n              tokensData: {\n                from: tokens.from,\n                to: {\n                  token: tokens.to.token,\n                  amount:\n                    prev.tokensData.to.token?.symbol !== tokens.to.token?.symbol\n                      ? NaN\n                      : tokens.to.amount,\n                },\n              },\n            }));\n          }\n          return;\n        }\n        this.setState({\n          pairAddress: pairAddr,\n          tokensResurves: undefined,\n        });\n\n        if (\n          tokens.from.token &&\n          tokens.to.token &&\n          (tokens.from.amount || tokens.to.amount) &&\n          pairAddr\n        ) {\n          const token0 = await this.context.metamaskService.callContractMethodFromNewContract(\n            pairAddr,\n            contracts.PAIR.ABI,\n            'token0',\n          );\n\n          const token1 = await this.context.metamaskService.callContractMethodFromNewContract(\n            pairAddr,\n            contracts.PAIR.ABI,\n            'token1',\n          );\n\n          const resurves = await this.context.metamaskService.callContractMethodFromNewContract(\n            pairAddr,\n            contracts.PAIR.ABI,\n            'getReserves',\n          );\n\n          this.setState({\n            tokensResurves: resurves,\n          });\n\n          if (\n            (type === 'from' && tokens.from.amount) ||\n            (tokens.from.token && tokens.from.amount && !tokens.to.amount)\n          ) {\n            let resurve1: number;\n            let resurve2: number;\n            if (tokens.from.token.address.toLowerCase() === token0.toLowerCase()) {\n              resurve1 = resurves['0'];\n              resurve2 = resurves['1'];\n            } else {\n              resurve1 = resurves['1'];\n              resurve2 = resurves['0'];\n            }\n\n            this.setState({\n              maxFrom: MetamaskService.amountFromGwei(resurve1, +tokens.from.token.decimals),\n              maxTo: MetamaskService.amountFromGwei(resurve2, +tokens.to.token.decimals),\n            });\n\n            const quote = await this.context.metamaskService.callContractMethod(\n              'ROUTER',\n              getExchangeMethod,\n              [\n                MetamaskService.calcTransactionAmount(\n                  tokens.from.amount,\n                  +tokens.from.token.decimals,\n                ),\n                resurve1,\n                resurve2,\n              ],\n            );\n\n            this.setState({\n              tokensData: {\n                from: {\n                  token: tokens.from.token,\n                  amount: tokens.from.amount,\n                },\n                to: {\n                  token: tokens.to.token,\n                  amount: MetamaskService.amountFromGwei(quote, +tokens.to.token.decimals),\n                },\n              },\n            });\n          } else if (\n            (type === 'to' && tokens.to.amount) ||\n            (tokens.to.token && tokens.to.amount && !tokens.from.amount)\n          ) {\n            let resurve1: number;\n            let resurve2: number;\n            if (tokens.to.token.address.toLowerCase() === token1.toLowerCase()) {\n              resurve1 = resurves['1'];\n              resurve2 = resurves['0'];\n            } else {\n              resurve1 = resurves['0'];\n              resurve2 = resurves['1'];\n            }\n\n            this.setState({\n              maxFrom: MetamaskService.amountFromGwei(resurve2, +tokens.from.token.decimals),\n              maxTo: MetamaskService.amountFromGwei(resurve1, +tokens.to.token.decimals),\n            });\n\n            const quote = await this.context.metamaskService.callContractMethod(\n              'ROUTER',\n              getExchangeMethod,\n              [\n                MetamaskService.calcTransactionAmount(tokens.to.amount, +tokens.to.token.decimals),\n                resurve1,\n                resurve2,\n              ],\n            );\n\n            this.setState({\n              tokensData: {\n                from: {\n                  token: tokens.from.token,\n                  amount: MetamaskService.amountFromGwei(quote, +tokens.from.token.decimals),\n                },\n                to: {\n                  token: tokens.to.token,\n                  amount: tokens.to.amount,\n                },\n              },\n            });\n          } else {\n            this.setState({\n              tokensData: tokens,\n            });\n          }\n        } else {\n          this.setState({\n            tokensData: tokens,\n          });\n        }\n        this.setState({\n          isLoadingExchange: false,\n        });\n      } catch (err) {\n        this.setState({\n          isLoadingExchange: false,\n        });\n        clogError('get pair', err);\n      }\n    }\n\n    handleChangeAllowanceFrom(value: boolean) {\n      this.setState({\n        isAllowanceFrom: value,\n      });\n    }\n\n    handleChangeAllowanceTo(value: boolean) {\n      this.setState({\n        isAllowanceTo: value,\n      });\n    }\n\n    handleChangeTokensData(tokensData: ITokens, type?: 'from' | 'to') {\n      if (tokensData.from.amount === 0 || tokensData.to.amount === 0) {\n        console.log(1);\n      } else if (tokensData.from.token && tokensData.to.token && type) {\n        this.handleGetExchange(tokensData, type);\n      } else {\n        this.setState({\n          tokensData,\n        });\n      }\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          {...compProps}\n          tokensData={this.state.tokensData}\n          setTokensData={this.handleChangeTokensData}\n          setAllowanceFrom={this.handleChangeAllowanceFrom}\n          setAllowanceTo={this.handleChangeAllowanceTo}\n          isAllowanceFrom={this.state.isAllowanceFrom}\n          isAllowanceTo={this.state.isAllowanceTo}\n          handleApproveTokens={this.handleApproveTokens}\n          tokensResurves={this.state.tokensResurves}\n          maxFrom={this.state.maxFrom}\n          maxTo={this.state.maxTo}\n          isLoadingExchange={this.state.isLoadingExchange}\n          isApproving={this.state.isApproving}\n        />\n      );\n    }\n  };\n  // TradeWrapperComponent.contextType = walletConnectorContext;\n\n  // return TradeWrapperComponent;\n};\n\nexport default TradeWrapper;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/atoms/OpenLink/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/RecentProfit/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/TableRowSubtitle/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/TableRowTitle/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/dao/useCastVote.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/DetailsLinks/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakingSection/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/StakeUnstakeButtons/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/CollectButton/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useApprove.ts",["1030","1031","1032"],"import { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { Contract } from 'web3-eth-contract';\n\nimport { errorNotification, successNotification } from '@/components/atoms/Notification';\nimport { pools as poolsConfig, tokens } from '@/config';\nimport { SmartRefinerInitializable as SmartRefinerInitializableAbi } from '@/config/abi';\nimport { metamaskService } from '@/services/MetamaskConnect';\nimport { getAddress, getContract, getContractAddress } from '@/services/web3/contractHelpers';\nimport { useCallWithGasPrice } from '@/services/web3/hooks';\nimport { useMst } from '@/store';\nimport { IReceipt } from '@/types';\nimport { MAX_UINT_256 } from '@/utils/constants';\nimport { clogError } from '@/utils/logger';\n\nimport useLastUpdated from '../useLastUpdated';\n\nconst gasOptions = { gas: 300000 };\n\nexport const useApprovePool = (lpContract: Contract, poolId: number) => {\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const { callWithGasPrice } = useCallWithGasPrice();\n  const { user, pools: poolsStore } = useMst();\n  const foundPool = poolsConfig.find((pool) => pool.id === poolId);\n  if (!foundPool) throw new Error('Specify the correct poolId');\n  const smartRefinerInitContract = metamaskService.getContract(\n    getAddress(foundPool.contractAddress),\n    SmartRefinerInitializableAbi,\n  );\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      const tx = await callWithGasPrice({\n        contract: lpContract,\n        methodName: 'approve',\n        methodArgs: [smartRefinerInitContract.options.address, MAX_UINT_256],\n        options: gasOptions,\n      });\n\n      poolsStore.updateUserAllowance(poolId, user.address);\n      if ((tx as IReceipt).status) {\n        successNotification(\n          'Contract Enabled!',\n          `You can now stake in the ${foundPool.earningToken.symbol} pool!`,\n        );\n      } else {\n        errorNotification(\n          'Error',\n          'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n        );\n      }\n      setRequestedApproval(false);\n    } catch (error) {\n      clogError(error);\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    }\n  }, [\n    callWithGasPrice,\n    lpContract,\n    poolId,\n    poolsStore,\n    smartRefinerInitContract,\n    user.address,\n    foundPool.earningToken.symbol,\n  ]);\n\n  return { handleApprove, requestedApproval };\n};\n\n// Approve RP1 auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const { callWithGasPrice } = useCallWithGasPrice();\n\n  const rocketPropellantContract = getContract('RP1');\n  const vaultAddress = getContractAddress('REFINERY_VAULT');\n\n  const handleApprove = async () => {\n    const tx = await callWithGasPrice({\n      contract: rocketPropellantContract,\n      methodName: 'approve',\n      methodArgs: [vaultAddress, MAX_UINT_256],\n      options: gasOptions,\n    });\n    setRequestedApproval(true);\n    if ((tx as IReceipt).status) {\n      successNotification(\n        'Contract Enabled!',\n        `You can now stake in the ${tokens.rp1.symbol} vault!`,\n      );\n      setLastUpdated();\n    } else {\n      errorNotification(\n        'Error',\n        'Please try again. Confirm the transaction and make sure you are paying enough gas!',\n      );\n    }\n    setRequestedApproval(false);\n  };\n\n  return { handleApprove, requestedApproval };\n};\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false);\n  const { user } = useMst();\n  const rocketPropellantContract = getContract('RP1');\n  const vaultAddress = getContractAddress('REFINERY_VAULT');\n  const { lastUpdated, setLastUpdated } = useLastUpdated();\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await rocketPropellantContract.methods\n          .allowance(user.address, vaultAddress)\n          .call();\n        const currentAllowance = new BigNumber(response.toString());\n        setIsVaultApproved(currentAllowance.gt(0));\n      } catch (error) {\n        setIsVaultApproved(false);\n      }\n    };\n\n    checkApprovalStatus();\n  }, [user.address, vaultAddress, lastUpdated, rocketPropellantContract.methods]);\n\n  return { isVaultApproved, setLastUpdated };\n};\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/useLastUpdated.ts",["1033"],"import { useCallback, useState } from 'react';\n\nimport usePreviousValue from './usePreviousValue';\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now());\n  const previousLastUpdated = usePreviousValue(lastUpdated);\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now());\n  }, [setStateLastUpdated]);\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated };\n};\n\nexport default useLastUpdated;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useTotalStaked.ts",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/usePreviousValue.ts",["1034","1035"],"import { useEffect, useRef } from 'react';\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n\nexport default usePreviousValue;\n","/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/EarnedSection/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardTitle/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardSubtitle/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardFooter/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/AutoVaultRecentProfitSection/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/Apr/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/EndsIn/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/TotalStaked/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/TableRow/Columns/RecentProfit/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/TextUnstakingFee/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/AutoVaultRecentProfitSection/UnstakingFeeTimer/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/components/sections/Pools/PoolCard/CardFooter/CardDetails/index.tsx",[],"/Users/rocknblock/Documents/GitHub/strong-hands-frontend/src/hooks/pools/useWithdrawalTimer.ts",["1036"],"import { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\n\nconst useWithdrawalFeeTimer = (\n  lastDepositedTime: number,\n  userShares: BigNumber,\n  withdrawalFeePeriod = 259200,\n) => {\n  const [secondsRemaining, setSecondsRemaining] = useState<number | null>(null);\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false);\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000));\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod;\n    const secondsRemainingCalc = feeEndTime - currentSeconds;\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0;\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1);\n    };\n    const timerInterval = setInterval(() => tick(), 1000);\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc);\n      setHasUnstakingFee(true);\n    } else {\n      setHasUnstakingFee(false);\n      clearInterval(timerInterval);\n    }\n\n    return () => clearInterval(timerInterval);\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares]);\n\n  return { hasUnstakingFee, secondsRemaining };\n};\n\nexport default useWithdrawalFeeTimer;\n",{"ruleId":"1037","replacedBy":"1038"},{"ruleId":"1039","replacedBy":"1040"},{"ruleId":"1041","replacedBy":"1042"},{"ruleId":"1043","replacedBy":"1044"},{"ruleId":"1045","severity":1,"message":"1046","line":55,"column":20,"nodeType":"1047","messageId":"1048","endLine":55,"endColumn":25},{"ruleId":"1045","severity":1,"message":"1046","line":101,"column":8,"nodeType":"1049","messageId":"1048","endLine":101,"endColumn":44},{"ruleId":"1050","severity":1,"message":"1051","line":1,"column":1,"nodeType":"1052","endLine":1,"endColumn":42},{"ruleId":"1050","severity":1,"message":"1051","line":2,"column":1,"nodeType":"1052","endLine":2,"endColumn":46},{"ruleId":"1050","severity":1,"message":"1053","line":5,"column":1,"nodeType":"1052","endLine":5,"endColumn":49},{"ruleId":"1050","severity":1,"message":"1054","line":6,"column":1,"nodeType":"1052","endLine":6,"endColumn":49},{"ruleId":"1050","severity":1,"message":"1055","line":7,"column":1,"nodeType":"1052","endLine":7,"endColumn":45},{"ruleId":"1045","severity":1,"message":"1046","line":85,"column":3,"nodeType":"1056","messageId":"1048","endLine":85,"endColumn":23},{"ruleId":"1045","severity":1,"message":"1046","line":89,"column":3,"nodeType":"1056","messageId":"1048","endLine":89,"endColumn":19},{"ruleId":"1045","severity":1,"message":"1046","line":137,"column":3,"nodeType":"1056","messageId":"1048","endLine":137,"endColumn":78},{"ruleId":"1045","severity":1,"message":"1046","line":147,"column":3,"nodeType":"1056","messageId":"1048","endLine":147,"endColumn":53},{"ruleId":"1045","severity":1,"message":"1046","line":151,"column":3,"nodeType":"1056","messageId":"1048","endLine":151,"endColumn":18},{"ruleId":"1045","severity":1,"message":"1046","line":155,"column":3,"nodeType":"1056","messageId":"1048","endLine":155,"endColumn":65},{"ruleId":"1045","severity":1,"message":"1046","line":161,"column":3,"nodeType":"1056","messageId":"1048","endLine":161,"endColumn":49},{"ruleId":"1045","severity":1,"message":"1057","line":161,"column":22,"nodeType":"1058","messageId":"1059","endLine":161,"endColumn":30},{"ruleId":"1045","severity":1,"message":"1046","line":165,"column":3,"nodeType":"1056","messageId":"1048","endLine":165,"endColumn":82},{"ruleId":"1045","severity":1,"message":"1046","line":172,"column":3,"nodeType":"1056","messageId":"1048","endLine":172,"endColumn":48},{"ruleId":"1045","severity":1,"message":"1057","line":172,"column":39,"nodeType":"1058","messageId":"1059","endLine":172,"endColumn":47},{"ruleId":"1045","severity":1,"message":"1046","line":190,"column":3,"nodeType":"1056","messageId":"1048","endLine":204,"endColumn":5},{"ruleId":"1045","severity":1,"message":"1046","line":233,"column":3,"nodeType":"1056","messageId":"1048","endLine":245,"endColumn":5},{"ruleId":"1045","severity":1,"message":"1046","line":274,"column":3,"nodeType":"1056","messageId":"1048","endLine":274,"endColumn":78},{"ruleId":"1045","severity":1,"message":"1046","line":278,"column":3,"nodeType":"1056","messageId":"1048","endLine":278,"endColumn":71},{"ruleId":"1045","severity":1,"message":"1046","line":282,"column":3,"nodeType":"1056","messageId":"1048","endLine":298,"endColumn":5},{"ruleId":"1045","severity":1,"message":"1046","line":322,"column":3,"nodeType":"1056","messageId":"1048","endLine":322,"endColumn":23},{"ruleId":"1045","severity":1,"message":"1046","line":326,"column":3,"nodeType":"1056","messageId":"1048","endLine":332,"endColumn":4},{"ruleId":"1045","severity":1,"message":"1046","line":352,"column":3,"nodeType":"1056","messageId":"1048","endLine":357,"endColumn":4},{"ruleId":"1045","severity":1,"message":"1046","line":371,"column":3,"nodeType":"1056","messageId":"1048","endLine":371,"endColumn":42},{"ruleId":"1045","severity":1,"message":"1060","line":371,"column":19,"nodeType":"1058","messageId":"1059","endLine":371,"endColumn":41},{"ruleId":"1045","severity":1,"message":"1046","line":18,"column":35,"nodeType":"1047","messageId":"1048","endLine":18,"endColumn":55},{"ruleId":"1045","severity":1,"message":"1046","line":22,"column":28,"nodeType":"1047","messageId":"1048","endLine":22,"endColumn":48},{"ruleId":"1045","severity":1,"message":"1046","line":1,"column":36,"nodeType":"1047","messageId":"1048","endLine":1,"endColumn":41},{"ruleId":"1045","severity":1,"message":"1046","line":16,"column":33,"nodeType":"1047","messageId":"1048","endLine":16,"endColumn":38},{"ruleId":"1045","severity":1,"message":"1046","line":32,"column":32,"nodeType":"1047","messageId":"1048","endLine":32,"endColumn":47},{"ruleId":"1045","severity":1,"message":"1046","line":273,"column":40,"nodeType":"1047","messageId":"1048","endLine":273,"endColumn":94},{"ruleId":"1045","severity":1,"message":"1046","line":293,"column":43,"nodeType":"1047","messageId":"1048","endLine":293,"endColumn":97},{"ruleId":"1045","severity":1,"message":"1046","line":311,"column":44,"nodeType":"1047","messageId":"1048","endLine":311,"endColumn":98},{"ruleId":"1045","severity":1,"message":"1046","line":329,"column":38,"nodeType":"1047","messageId":"1048","endLine":329,"endColumn":92},{"ruleId":"1050","severity":1,"message":"1051","line":2,"column":1,"nodeType":"1052","endLine":2,"endColumn":49},{"ruleId":"1050","severity":1,"message":"1051","line":8,"column":1,"nodeType":"1052","endLine":8,"endColumn":46},{"ruleId":"1045","severity":1,"message":"1046","line":4,"column":21,"nodeType":"1047","messageId":"1048","endLine":4,"endColumn":26},{"ruleId":"1045","severity":1,"message":"1046","line":5,"column":17,"nodeType":"1047","messageId":"1048","endLine":5,"endColumn":22},{"ruleId":"1045","severity":1,"message":"1046","line":6,"column":22,"nodeType":"1047","messageId":"1048","endLine":6,"endColumn":27},{"ruleId":"1045","severity":1,"message":"1046","line":7,"column":23,"nodeType":"1047","messageId":"1048","endLine":7,"endColumn":39},{"ruleId":"1061","severity":1,"message":"1062","line":14,"column":7,"nodeType":"1063","messageId":"1064","endLine":14,"endColumn":19},{"ruleId":"1045","severity":1,"message":"1046","line":6,"column":25,"nodeType":"1047","messageId":"1048","endLine":6,"endColumn":41},{"ruleId":"1045","severity":1,"message":"1065","line":59,"column":35,"nodeType":"1058","messageId":"1059","endLine":59,"endColumn":45},{"ruleId":"1045","severity":1,"message":"1066","line":59,"column":47,"nodeType":"1058","messageId":"1059","endLine":59,"endColumn":56},{"ruleId":"1045","severity":1,"message":"1046","line":63,"column":40,"nodeType":"1047","messageId":"1048","endLine":63,"endColumn":79},{"ruleId":"1045","severity":1,"message":"1046","line":74,"column":41,"nodeType":"1047","messageId":"1048","endLine":77,"endColumn":5},{"ruleId":"1045","severity":1,"message":"1046","line":10,"column":32,"nodeType":"1047","messageId":"1048","endLine":10,"endColumn":57},{"ruleId":"1045","severity":1,"message":"1046","line":13,"column":32,"nodeType":"1047","messageId":"1048","endLine":13,"endColumn":57},{"ruleId":"1045","severity":1,"message":"1046","line":16,"column":32,"nodeType":"1047","messageId":"1048","endLine":16,"endColumn":57},{"ruleId":"1045","severity":1,"message":"1046","line":8,"column":31,"nodeType":"1047","messageId":"1048","endLine":8,"endColumn":67},{"ruleId":"1045","severity":1,"message":"1046","line":8,"column":29,"nodeType":"1047","messageId":"1048","endLine":8,"endColumn":65},{"ruleId":"1045","severity":1,"message":"1046","line":38,"column":8,"nodeType":"1049","messageId":"1048","endLine":38,"endColumn":38},{"ruleId":"1045","severity":1,"message":"1046","line":62,"column":25,"nodeType":"1047","messageId":"1048","endLine":62,"endColumn":30},{"ruleId":"1045","severity":1,"message":"1046","line":16,"column":37,"nodeType":"1047","messageId":"1048","endLine":16,"endColumn":76},{"ruleId":"1045","severity":1,"message":"1046","line":38,"column":22,"nodeType":"1047","messageId":"1048","endLine":38,"endColumn":41},{"ruleId":"1045","severity":1,"message":"1046","line":72,"column":33,"nodeType":"1047","messageId":"1048","endLine":72,"endColumn":75},{"ruleId":"1045","severity":1,"message":"1046","line":30,"column":24,"nodeType":"1047","messageId":"1048","endLine":30,"endColumn":43},{"ruleId":"1045","severity":1,"message":"1046","line":6,"column":31,"nodeType":"1047","messageId":"1048","endLine":6,"endColumn":47},{"ruleId":"1045","severity":1,"message":"1046","line":19,"column":39,"nodeType":"1047","messageId":"1048","endLine":19,"endColumn":78},{"ruleId":"1045","severity":1,"message":"1046","line":39,"column":24,"nodeType":"1047","messageId":"1048","endLine":39,"endColumn":43},{"ruleId":"1045","severity":1,"message":"1046","line":72,"column":35,"nodeType":"1047","messageId":"1048","endLine":72,"endColumn":77},{"ruleId":"1045","severity":1,"message":"1046","line":16,"column":39,"nodeType":"1047","messageId":"1048","endLine":16,"endColumn":65},{"ruleId":"1045","severity":1,"message":"1046","line":85,"column":32,"nodeType":"1047","messageId":"1048","endLine":85,"endColumn":58},{"ruleId":"1045","severity":1,"message":"1046","line":13,"column":30,"nodeType":"1047","messageId":"1048","endLine":13,"endColumn":56},{"ruleId":"1045","severity":1,"message":"1046","line":30,"column":32,"nodeType":"1047","messageId":"1048","endLine":30,"endColumn":51},{"ruleId":"1045","severity":1,"message":"1046","line":25,"column":35,"nodeType":"1047","messageId":"1048","endLine":25,"endColumn":40},{"ruleId":"1045","severity":1,"message":"1046","line":5,"column":30,"nodeType":"1047","messageId":"1048","endLine":5,"endColumn":35},{"ruleId":"1045","severity":1,"message":"1046","line":103,"column":46,"nodeType":"1047","messageId":"1048","endLine":103,"endColumn":75},{"ruleId":"1050","severity":1,"message":"1051","line":3,"column":1,"nodeType":"1052","endLine":3,"endColumn":48},{"ruleId":"1050","severity":1,"message":"1051","line":2,"column":1,"nodeType":"1052","endLine":2,"endColumn":50},{"ruleId":"1050","severity":1,"message":"1051","line":4,"column":1,"nodeType":"1052","endLine":4,"endColumn":42},{"ruleId":"1050","severity":1,"message":"1051","line":5,"column":1,"nodeType":"1052","endLine":5,"endColumn":66},{"ruleId":"1050","severity":1,"message":"1051","line":8,"column":1,"nodeType":"1052","endLine":8,"endColumn":60},{"ruleId":"1050","severity":1,"message":"1051","line":9,"column":1,"nodeType":"1052","endLine":9,"endColumn":52},{"ruleId":"1050","severity":1,"message":"1051","line":10,"column":1,"nodeType":"1052","endLine":10,"endColumn":54},{"ruleId":"1050","severity":1,"message":"1051","line":11,"column":1,"nodeType":"1052","endLine":11,"endColumn":58},{"ruleId":"1050","severity":1,"message":"1051","line":12,"column":1,"nodeType":"1052","endLine":12,"endColumn":68},{"ruleId":"1050","severity":1,"message":"1051","line":14,"column":1,"nodeType":"1052","endLine":14,"endColumn":58},{"ruleId":"1050","severity":1,"message":"1051","line":15,"column":1,"nodeType":"1052","endLine":15,"endColumn":64},{"ruleId":"1050","severity":1,"message":"1051","line":16,"column":1,"nodeType":"1052","endLine":16,"endColumn":48},{"ruleId":"1045","severity":1,"message":"1046","line":12,"column":24,"nodeType":"1047","messageId":"1048","endLine":12,"endColumn":49},{"ruleId":"1061","severity":1,"message":"1062","line":74,"column":3,"nodeType":"1063","messageId":"1064","endLine":74,"endColumn":14},{"ruleId":"1067","severity":1,"message":"1068","line":1,"column":1,"nodeType":null,"messageId":"1069","endLine":15,"endColumn":30,"fix":"1070"},{"ruleId":"1045","severity":1,"message":"1046","line":4,"column":31,"nodeType":"1047","messageId":"1048","endLine":4,"endColumn":36},{"ruleId":"1045","severity":1,"message":"1046","line":31,"column":22,"nodeType":"1047","messageId":"1048","endLine":35,"endColumn":5},{"ruleId":"1045","severity":1,"message":"1071","line":34,"column":3,"nodeType":"1058","messageId":"1059","endLine":34,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1062","line":364,"column":9,"nodeType":"1063","messageId":"1064","endLine":364,"endColumn":20},{"ruleId":"1045","severity":1,"message":"1046","line":20,"column":31,"nodeType":"1047","messageId":"1048","endLine":20,"endColumn":72},{"ruleId":"1045","severity":1,"message":"1046","line":75,"column":32,"nodeType":"1047","messageId":"1048","endLine":75,"endColumn":63},{"ruleId":"1045","severity":1,"message":"1046","line":108,"column":44,"nodeType":"1047","messageId":"1048","endLine":108,"endColumn":49},{"ruleId":"1045","severity":1,"message":"1046","line":9,"column":24,"nodeType":"1047","messageId":"1048","endLine":9,"endColumn":29},{"ruleId":"1045","severity":1,"message":"1046","line":8,"column":26,"nodeType":"1047","messageId":"1048","endLine":8,"endColumn":41},{"ruleId":"1045","severity":1,"message":"1072","line":8,"column":27,"nodeType":"1058","messageId":"1059","endLine":8,"endColumn":37},{"ruleId":"1045","severity":1,"message":"1046","line":4,"column":31,"nodeType":"1047","messageId":"1048","endLine":8,"endColumn":5},"lines-around-directive",["1073"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","import/no-cycle","Dependency cycle detected.","ExportNamedDeclaration","Dependency cycle via @/services/MetamaskConnect:5=>@/store:7","Dependency cycle via ../farms:14=>@/store:4","Dependency cycle via @/services/web3/helpers:4=>../MetamaskConnect:1=>@/store:7","FunctionExpression","Argument 'abi' should be typed with a non-any type.","Identifier","anyTypedArg","Argument 'transactionConfig' should be typed with a non-any type.","no-console","Unexpected console statement.","MemberExpression","unexpected","Argument 'error' should be typed with a non-any type.","Argument 'data' should be typed with a non-any type.","simple-import-sort/sort","Run autofix to sort these imports!","sort",{"range":"1074","text":"1075"},"Argument 'compProps' should be typed with a non-any type.","Argument 'value' should be typed with a non-any type.","padding-line-between-statements",[0,570],"import React from 'react';\nimport BigNumber from 'bignumber.js/bignumber';\nimport { observer } from 'mobx-react-lite';\n\nimport { tokens } from '@/config';\nimport { clog, clogError } from '@/utils/logger';\n\nimport { useWalletConnectorContext } from '../../../../services/MetamaskConnect';\nimport MetamaskService from '../../../../services/web3';\nimport { useMst } from '../../../../store';\nimport { ISettings, ITokens } from '../../../../types';\nimport { Button, Popover } from '../../../atoms';\nimport { ChooseTokens, TradeBox } from '..';\n\nimport './AddLiquidity.scss';"]